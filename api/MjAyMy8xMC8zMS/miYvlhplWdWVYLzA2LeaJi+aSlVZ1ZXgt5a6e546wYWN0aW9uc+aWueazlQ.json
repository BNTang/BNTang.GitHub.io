{"title":"手撕Vuex-实现actions方法","date":"2023-10-31T14:53:34.000Z","date_formatted":{"ll":"Oct 31, 2023","L":"10/31/2023","MM-DD":"10-31"},"link":"2023/10/31/手写VueX/06-手撕Vuex-实现actions方法","tags":["手写Vuex"],"updated":"2023-11-01T15:43:05.610Z","content":"<blockquote>\n<p>经过上一篇章介绍，完成了实现 mutations 的功能，那么接下来本篇将会实现 actions 的功能。</p>\n</blockquote>\n<p>本篇我先介绍一下 actions 的作用，然后再介绍一下实现的思路，最后再实现代码。</p>\n<p>actions 的作用是用来异步修改共享数据的，怎么异步修改，这个时候我们回到 Vue 的官方 Vuex 文档中，有如下这么一个图：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231031235838102-1602942332.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>从图中可以看出，我们在组件中调用 dispatch 方法，然后 dispatch 方法会调用 actions，然后 actions 中的方法可以通过 commit 会调用 mutations 中的方法，最后 mutations 中的方法会修改 state 中的数据，这就是 actions 的作用。</p>\n<p>这里我们先来回顾一下怎么使用 actions，再来实现一遍即可。</p>\n<ol>\n<li>将官方的 Vuex 注释放开</li>\n<li>在 store 中定义 age</li>\n<li>在 mutations 中定义 changeAge 方法</li>\n<li>在 actions 中定义 asyncAddAge 方法 (页面通过 dispatch 调用 actions 中的方法, actions 中的方法通过 commit 调用 mutations 中的方法)</li>\n</ol>\n<p>如上是我本次实现的思路，接下来我们来实现代码。</p>\n<p>我这里直接贴出代码, 代码中有详细的注释, 代码如下:</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">1. 略过<br><br>2. 定义 age<br>state: &#123;<br>    age: 0<br>&#125;<br><br>3. 在 mutations 中定义 changeAge 方法<br>/**<br> * 通过dispatch调用<br> * @param state 仓库的state<br> * @param payload 载荷<br> */<br>addAge(state, payload) &#123;<br>    state.age += payload;<br>&#125;<br><br>4. 在 actions 中定义 asyncAddAge 方法<br>/**<br> * 通过dispatch调用<br> * @param commit 提交<br> * @param payload 载荷<br> */<br>asyncAddAge(&#123;commit&#125;, payload) &#123;<br>    // 模拟异步操作<br>    setTimeout(() =&gt; &#123;<br>        // 通过commit调用mutations中的方法<br>        commit(&#x27;addAge&#x27;, payload);<br>    &#125;, 3000);<br>&#125;<br></code></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在组件中通过 dispatch 调用 actions 中的方法（HelloWorld 组件）</li>\n</ol>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">// 显示数据<br>&lt;p&gt;&#123;&#123; this.$store.state.age &#125;&#125;&lt;/p&gt;<br><br>// 调用actions中的方法<br>&lt;button @click=&quot;myFn&quot;&gt;我是按钮&lt;/button&gt;<br>myFn() &#123;<br>  this.$store.dispatch(&#x27;asyncAddAge&#x27;, 10);<br>&#125;,<br></code></pre></td></tr></table></figure>\n<p>npm run serve 启动项目，点击按钮，3 秒后 age 的值加 10，说明 actions 的功能实现了。效果如下图：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231101001336132-1360506235.gif\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>到此为止，回顾完成了之后，我们就可以开始实现 actions 的功能了。</p>\n<p>actions 的实现思路和 mutations 的实现思路是一样的，首先将官方的 Vuex 注释掉，导入我们自己的 Nuex：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Vuex</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./Nuex&#x27;</span><br><span class=\"hljs-comment\">// import Vuex from &#x27;vuex&#x27;</span><br></code></pre></td></tr></table></figure>\n<p>回到我们的 Nuex 文件中，和之前一样先将 actions 保存到 Store 上，我这里单独弄了一个 <code>initActions</code> 方法，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 将传递进来的 actions 放到 Store 上</span><br><span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">initActions</span>(options);<br></code></pre></td></tr></table></figure>\n<p>initActions 方法的实现如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title function_\">initActions</span>(<span class=\"hljs-params\">options</span>) &#123;<br>    <span class=\"hljs-comment\">// 1.拿到传递进来的actions</span><br>    <span class=\"hljs-keyword\">let</span> actions = options.<span class=\"hljs-property\">actions</span> || &#123;&#125;;<br>    <span class=\"hljs-comment\">// 2.在Store上新增一个actions的属性</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">actions</span> = &#123;&#125;;<br>    <span class=\"hljs-comment\">// 3.将传递进来的actions中的方法添加到当前Store的actions上</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> actions) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">actions</span>[key] = <span class=\"hljs-function\">(<span class=\"hljs-params\">payload</span>) =&gt;</span> &#123;<br>            <span class=\"hljs-comment\">// 4.将actions中的方法执行, 并且将当前Store实例传递过去</span><br>            actions[key](<span class=\"hljs-variable language_\">this</span>, payload);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这里和 mutations 的实现思路是一样的，只是将 mutations 换成了 actions，然后将传递进来的 actions 中的方法添加到当前 Store 的 actions 上，最后将 actions 中的方法执行，并且将当前 Store 实例传递过去。</p>\n<p>测试一下看看有没有添加到 Store 上，运行项目，测试结果如下：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231101231654493-2050819481.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>可以看到 actions 已经添加到 Store 上了，那么在页面上是通过 dispatch 调用 actions 中的方法，所以我们需要在 Store 上添加 dispatch 方法，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">dispatch = <span class=\"hljs-function\">(<span class=\"hljs-params\">type, payload</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">actions</span>[type](payload);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这里和 mutations 的实现思路是一样的，只是将 commit 换成了 actions，然后将传递进来的 actions 中的方法执行，并且将当前 Store 实例传递过去。</p>\n<p>运行项目，测试结果如下：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231101232331990-1894175198.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p><code>Uncaught TypeError: Cannot read properties of undefined (reading 'mutations')</code></p>\n<p>这里报错了，其实这个问题我已经知道错在哪里了，我先带着大家看一下这个调用流程，然后再解决这个问题。</p>\n<ol>\n<li>在组件中调用 dispatch 方法，我传递是的 <code>'asyncAddAge', 10</code></li>\n</ol>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231101232519196-776343457.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<ol start=\"2\">\n<li>在 dispatch 方法中，我拿到了传递进来的 type，也就是 <code>'asyncAddAge'</code>, payload 也就是 10, 然后调用了 actions 中的方法</li>\n</ol>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231101232627079-1294808264.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<ol start=\"3\">\n<li>在 actions 中的方法中，我拿到了传递进来的 payload，也就是 10，在 asyncAddAge 方法中，我调用了 commit 方法，也就是调用了 mutations 中的方法</li>\n</ol>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231101232712499-176424904.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231101232838625-746907435.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<ol start=\"4\">\n<li>在 commit 方法中，我拿到了传递进来的 type，也就是 <code>'addAge'</code>, payload 也就是 10, 然后调用了 mutations 中的方法</li>\n</ol>\n<p>报错的位置在这里，因为我在 commit 方法中，拿到了传递进来的 type，也就是 <code>'addAge'</code>, 代码继续往下执行，执行到 <code>this.mutations[type](payload);</code> this 是 undefined，所以报错了。</p>\n<p>正是因为在 actions 中的方法中，我调用了 commit 方法，也就是调用了 mutations 中的方法，在调用时没有告诉 commit 方法，this 是谁，所以才会报错。</p>\n<p>那么怎么解决这个问题呢？其实很简单，只需要将之前的 commit 方法改为箭头函数即可，因为改为了箭头函数，this 就是当前 Store 实例了（改为了箭头函数当前在哪里定义的那么 this 就是谁），代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">commit = <span class=\"hljs-function\">(<span class=\"hljs-params\">type, payload</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">mutations</span>[type](payload);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>运行项目，测试结果如下：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231101001336132-1360506235.gif\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>到此为止，actions 的功能就实现了，接下来我们来回顾一下实现的思路。</p>\n<ol>\n<li>将传递进来的 actions 放到 Store 上</li>\n<li>在 Store 上添加 dispatch 方法</li>\n<li>在 dispatch 方法中，调用 actions 中的方法</li>\n<li>在 actions 中的方法中，调用 commit 方法</li>\n<li>在 commit 方法中，调用 mutations 中的方法（这里就走我们上一篇章的流程了）</li>\n</ol>\n","prev":{"title":"手撕Vuex-模块化共享数据上","link":"2023/11/01/手写VueX/07-手撕Vuex-模块化共享数据上"},"next":{"title":"手撕Vuex-实现mutations方法","link":"2023/10/28/手写VueX/05-手撕Vuex-实现mutations方法"},"plink":"http://example.com/2023/10/31/手写VueX/06-手撕Vuex-实现actions方法/","reading_time":"1530 words in 10 min"}