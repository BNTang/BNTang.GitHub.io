{"title":"『云函数』传参和调试","date":"2023-12-03T09:46:02.000Z","date_formatted":{"ll":"Dec 3, 2023","L":"12/03/2023","MM-DD":"12-03"},"link":"2023/12/03/Web/微信小程序/云开发/72-『云函数』传参和调试","tags":["云开发","微信小程序"],"updated":"2024-01-19T03:14:11.100Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231203183820554-493781297.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"1.前言\">1.前言<a title=\"#1.前言\" href=\"#1.前言\"></a></h1>\n<p>好了，经过上篇文章的介绍，给大家详细的介绍了云函数的基本使用，以及为什么要使用云函数，那么接下来我们就来看看云函数的传参和调试。</p>\n<h1 id=\"2.云函数的传参\">2.云函数的传参<a title=\"#2.云函数的传参\" href=\"#2.云函数的传参\"></a></h1>\n<p>与函数与函数，是一个函数那么就是有参数的，那么我们的云函数是不是也是有参数的，那么我们的云函数的参数是怎么传递的呢？</p>\n<p>好，那么继续来看上篇文章我们创建好的云函数，在官方代码中的 main 函数中，我们可以看到有一个 <code>event</code> 参数，这个参数就是我们的云函数的参数，那么我怎么验证我的这个说法呢？</p>\n<p>要验证这一点，我首先再重新创建一个云函数，比如说创建一个叫做 sum 的云函数，然后在这个云函数中, 我做一个加法运算，然后将结果返回给客户端，那么这个时候我就需要传递两个参数，一个是 <code>a</code>，一个是 <code>b</code>，那么我怎么传递呢？</p>\n<p>先看代码后解释：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 云函数入口文件</span><br><span class=\"hljs-keyword\">const</span> cloud = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;wx-server-sdk&#x27;</span>)<br><br><span class=\"hljs-comment\">// 使用当前云环境</span><br>cloud.<span class=\"hljs-title function_\">init</span>(&#123; <span class=\"hljs-attr\">env</span>: cloud.<span class=\"hljs-property\">DYNAMIC_CURRENT_ENV</span> &#125;)<br><br><span class=\"hljs-comment\">// 云函数入口函数</span><br><span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">main</span> = <span class=\"hljs-keyword\">async</span> (event, context) =&gt; &#123;<br>  <span class=\"hljs-keyword\">const</span> &#123; num1, num2 &#125; = event;<br>  <span class=\"hljs-keyword\">const</span> res = num1 + num2;<br>  <span class=\"hljs-keyword\">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>关键代码是这一行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> &#123; num1, num2 &#125; = event;<br></code></pre></td></tr></table></figure>\n<p>这一行代码是将 <code>event</code> 对象中的 <code>num1</code> 和 <code>num2</code> 两个属性解构出来，然后赋值给 <code>num1</code> 和 <code>num2</code> 这两个变量，这样就可以直接使用了。</p>\n<p>这个代码我就写完，先部署到云端，然后在小程序中调用一下，添加一个新的按钮，点击按钮之后调用这个云函数，然后将结果打印到控制台上，看看结果是不是我们想要的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;primary&quot;</span> <span class=\"hljs-attr\">bindtap</span>=<span class=\"hljs-string\">&quot;onCloudFnParamTap&quot;</span>&gt;</span>云函数传参<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">onCloudFnParamTap</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> wx.<span class=\"hljs-property\">cloud</span>.<span class=\"hljs-title function_\">callFunction</span>(&#123;<br>        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;sum&#x27;</span>,<br>        <span class=\"hljs-comment\">// data，可选参数</span><br>        <span class=\"hljs-attr\">data</span>: &#123;<br>            <span class=\"hljs-attr\">num1</span>: <span class=\"hljs-number\">20</span>,<br>            <span class=\"hljs-attr\">num2</span>: <span class=\"hljs-number\">30</span><br>        &#125;<br>    &#125;);<br><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(res)<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>在查看运行效果之前首先我讲解下这个调用过程，在代码中我通过 <code>wx.cloud.callFunction</code> 方法来调用云函数，这个方法中有一个 <code>name</code> 参数，这个参数就是我们的云函数的名称，然后还有一个 <code>data</code> 参数，这个参数就是我们的云函数的参数，这个参数是一个对象，这个对象中包含了我们的云函数的参数，我现在传递了这个 data，是一个可选参数那么它就会将这个 data 对象传递给 sum 云函数当中的 event 参数里面。</p>\n<p>然后我在 sum 的 main 函数中通过解构的方式将 event 对象中的 num1 和 num2 两个属性解构出来，然后再进行加法运算，最后将结果返回给客户端。</p>\n<p>运行效果如下：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240116070145230-611814411.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>可以看到，ok 了，所以说，现在是不是我们就可以在使用云函数时就可以传递参数了，现在就没问题了是吧。那么呢还没完，还有一个问题，现在我们编写的云函数运行在什么地方，是不是运行在云端，那么运行在云端，如果我想对这个云函数进行调试，那么我怎么调试呢？</p>\n<h1 id=\"3.云函数的调试\">3.云函数的调试<a title=\"#3.云函数的调试\" href=\"#3.云函数的调试\"></a></h1>\n<p>现在我们业务逻辑比较简单，就一些加减法，或者说简单的返回一些数据，这些可能还好，但是如果我们的业务逻辑比较复杂，那么我们的云函数的调试就显得尤为重要了，那么我们怎么调试呢？</p>\n<p>例如我在之前的 sum 云函数中，我对 res 进行控制台打印 <code>console.log(&quot;云端：&quot; + res);</code>，然后在来看看效果，一定要记住改了代码之后一定要重新部署到云端。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240116070814368-1634494192.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>更改了代码之后，并且重新发布之后，在这一次的调用结果中，我发现没有输出 res 的值，云端中并没有打印：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240116070943114-701505889.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>这个时候就不利于我们去调试了，那么如果我想调试该如何调试呢？这个时候就要找到云开发的后台，找到云函数，找到编写的 sum 云函数，这个时候就可以发现在右侧的操作中就有 <code>本地调试</code>，<code>云端测试</code>，这个时候先来看云端测试。</p>\n<h2 id=\"3.1.云端测试\">3.1.云端测试<a title=\"#3.1.云端测试\" href=\"#3.1.云端测试\"></a></h2>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240116071351600-271458305.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>点击云端测试按钮，会弹出一个抽屉，在测试模板中可以传递我们的一个参数给 sum：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240116071618374-1345176478.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>填写完毕参数之后点击，运行测试，就可以看到本次的结果，但是这个信息还是达不到我的预期想要的样子。</p>\n<p>并没有输出我在 sum 中 <code>console.log</code> 的信息，那么这个时候就要使用本地调试了，这个云端测试了解一下就可以了。</p>\n<h2 id=\"3.2.本地调试\">3.2.本地调试<a title=\"#3.2.本地调试\" href=\"#3.2.本地调试\"></a></h2>\n<p>重点关注本地调试，点击本地调试，会弹一个对话框点击是，就是安装所需要的依赖库：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240116071837929-1111036781.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>然后观察微信小程序的终端就会去下载依赖：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240116072437018-734999692.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>下载完毕之后本地调试界面就成了如下图所示的样子：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240116072506371-897628406.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>这个时候就会浏览器差不多咯，然后我们再次来点击调用云函数传参按钮来看看效果。</p>\n<p>微信小程序控制台输出内容：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240116072601396-1703212305.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>可以看到已经有一部分日志信息了，但是这还不够还不是我们的预期，那我们来看看本地调试的结果。</p>\n<p>本地调试输出内容：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240116072645188-784350506.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>可以看到，这个时候就有我们想要的结果了，那么这个时候关于云函数的传参和调试就介绍完毕了。</p>\n<p>本篇文章内容介绍到这就结束了，我们下期再见，感谢大家的观看，谢谢大家。</p>\n<blockquote>\n<ul>\n<li>🐤如果您对本文有任何疑问或想法，请在评论区留言，我将很乐意与您交流。</li>\n<li>🐰您的每一条评论对我都至关重要，我会尽快给予回复。</li>\n<li>🎈如果您觉得这篇文章对您有所启发或帮助，请不吝赞赏、收藏或分享。</li>\n<li>🎁您的每一个动作都是对我创作的最大鼓励和支持。</li>\n<li>👍谢谢您的阅读和陪伴！</li>\n<li>😁如果您觉得本文对您有所帮助，可以关注我的公众号 <code>BNTang</code>，我会不定期分享一些干货文章。</li>\n<li>🍻感谢您的支持，我会继续努力的！</li>\n</ul>\n</blockquote>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231211215004818-977875224.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"『云函数』快速获取 OpenID","link":"2023/12/03/Web/微信小程序/云开发/74-『云函数』快速获取 OpenID"},"next":{"title":"『云开发』使用云数据库和云存储","link":"2023/12/03/Web/微信小程序/云开发/62-『云开发』使用云数据库和云存储"},"plink":"http://example.com/2023/12/03/Web/微信小程序/云开发/72-『云函数』传参和调试/","toc":[{"id":"1.前言","title":"1.前言","index":"1"},{"id":"2.云函数的传参","title":"2.云函数的传参","index":"2"},{"id":"3.云函数的调试","title":"3.云函数的调试","index":"3","children":[{"id":"3.1.云端测试","title":"3.1.云端测试","index":"3.1"},{"id":"3.2.本地调试","title":"3.2.本地调试","index":"3.2"}]}]}