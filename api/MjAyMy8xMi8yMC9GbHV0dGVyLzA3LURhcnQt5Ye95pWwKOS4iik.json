{"title":"Dart-函数(上)","date":"2023-12-20T14:37:01.000Z","date_formatted":{"ll":"Dec 20, 2023","L":"12/20/2023","MM-DD":"12-20"},"link":"2023/12/20/Flutter/07-Dart-函数(上)","tags":["Dart"],"updated":"2023-12-26T02:15:21.679Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231220235006786-711288748.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h1>\n<ul>\n<li>在 Dart 和 JavaScript 中，函数是一种将代码封装以便重用使用的基本构建块</li>\n<li>这两种语言在定义和使用函数方面有很多相似之处</li>\n<li>但是呢，也有一些关键的差异</li>\n<li>本文主要介绍 Dart 中函数的使用，以及 Dart 中函数的一些特性</li>\n</ul>\n<h1 id=\"正文\">正文<a title=\"#正文\" href=\"#正文\"></a></h1>\n<h2 id=\"dart-中的函数\">Dart 中的函数<a title=\"#dart-中的函数\" href=\"#dart-中的函数\"></a></h2>\n<ul>\n<li>在 Dart 中，可以定义具有或不具有返回类型的函数</li>\n<li>在 Drat 中，函数是可以传递参数，包括可选参数和具有默认值的参数</li>\n</ul>\n<blockquote>\n<p>定义一个简单的函数：</p>\n</blockquote>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">void</span> printInteger(<span class=\"hljs-built_in\">int</span> aNumber) &#123;<br>  <span class=\"hljs-comment\">// 打印到控制台</span><br>  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;The number is <span class=\"hljs-subst\">$aNumber</span>.&#x27;</span>);<br>&#125;<br><br><span class=\"hljs-keyword\">void</span> main() &#123;<br>  printInteger(<span class=\"hljs-number\">10</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231220231819361-1375933409.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<blockquote>\n<p>定义带返回值的函数：</p>\n</blockquote>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-built_in\">int</span> add(<span class=\"hljs-built_in\">int</span> a, <span class=\"hljs-built_in\">int</span> b) &#123;<br>  <span class=\"hljs-keyword\">return</span> a + b;<br>&#125;<br><br><span class=\"hljs-keyword\">void</span> main() &#123;<br>  <span class=\"hljs-built_in\">print</span>(add(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>));<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231220232144188-2073792923.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<blockquote>\n<p>定义带可选命名参数的函数：</p>\n</blockquote>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">void</span> enableFlags(&#123;<span class=\"hljs-built_in\">bool</span> bold = <span class=\"hljs-keyword\">false</span>, <span class=\"hljs-built_in\">bool</span> hidden = <span class=\"hljs-keyword\">false</span>&#125;) &#123;<br>  <span class=\"hljs-built_in\">print</span>(bold);<br>  <span class=\"hljs-built_in\">print</span>(hidden);<br>&#125;<br><br><span class=\"hljs-keyword\">void</span> main() &#123;<br>  enableFlags(bold: <span class=\"hljs-keyword\">true</span>, hidden: <span class=\"hljs-keyword\">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>可选命名参数使用大括号 <code>&#123;&#125;</code> 括起来，使用时需要指定参数名</li>\n<li>在Dart中，命名参数的默认值不能是 null</li>\n</ul>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231220232722780-2062773430.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"异同点\">异同点<a title=\"#异同点\" href=\"#异同点\"></a></h2>\n<h3 id=\"类型注释\">类型注释<a title=\"#类型注释\" href=\"#类型注释\"></a></h3>\n<ul>\n<li>Dart：静态类型语言，可以(但不是必须)在函数参数和返回值上指定类型</li>\n<li>JavaScript：动态类型语言，不需要(也不能)在函数参数或返回值上指定类型</li>\n</ul>\n<h3 id=\"默认参数和可选参数\">默认参数和可选参数<a title=\"#默认参数和可选参数\" href=\"#默认参数和可选参数\"></a></h3>\n<ul>\n<li>Dart：支持命名可选参数(使用大括号 <code>&#123;&#125;</code>)和位置可选参数(使用方括号 <code>[]</code>)</li>\n<li>Dart: 可以为可选参数提供默认值</li>\n<li>JavaScript：不支持命名可选参数，但可以通过对象解构来模拟</li>\n<li>JavaScript：支持默认参数值</li>\n</ul>\n<h3 id=\"函数表达式\">函数表达式<a title=\"#函数表达式\" href=\"#函数表达式\"></a></h3>\n<ul>\n<li>Dart 和 JavaScript 都支持匿名函数或箭头函数(<code>=&gt;</code> 和 <code>() =&gt;</code> )</li>\n</ul>\n<h3 id=\"上下文绑定\">上下文绑定<a title=\"#上下文绑定\" href=\"#上下文绑定\"></a></h3>\n<ul>\n<li>在 JavaScript 中，函数中的 <code>“this&quot;</code> 关键字的值取决于函数的调用方式，这可能导致一些混乱</li>\n<li>Dart 中没有这样的概念</li>\n</ul>\n<p>如上的内容，我觉得大家，唯一有疑惑的就是 Dart 中的可选参数，下面我就来详细介绍一下 Dart 中的可选参数主要是位置可选参数和命名可选参数。</p>\n<h2 id=\"可选参数\">可选参数<a title=\"#可选参数\" href=\"#可选参数\"></a></h2>\n<ul>\n<li>Dart 中的可选参数分为两种，一种是位置可选参数，一种是命名可选参数</li>\n</ul>\n<blockquote>\n<p>命名可选参数，其实上面已经介绍了，主要介绍下位置可选参数</p>\n</blockquote>\n<ul>\n<li>位置可选参数通过方括号 <code>[]</code> 定义在函数参数列表中，使用时按照参数位置传递值</li>\n<li>也可以为位置可选参数提供默认值，使得调用函数时可以省略这些参数</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">void</span> printInfo(<span class=\"hljs-built_in\">String</span> name, <span class=\"hljs-built_in\">String</span> address, [<span class=\"hljs-built_in\">int</span> age = <span class=\"hljs-number\">25</span>]) &#123;<br>  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;<span class=\"hljs-subst\">$name</span>, <span class=\"hljs-subst\">$address</span>, <span class=\"hljs-subst\">$age</span>&#x27;</span>);<br>&#125;<br><br><span class=\"hljs-keyword\">void</span> main() &#123;<br>  <span class=\"hljs-comment\">// 使用位置参数调用函数</span><br>  printInfo(<span class=\"hljs-string\">&#x27;John&#x27;</span>, <span class=\"hljs-string\">&#x27;123 Main St&#x27;</span>);<br>  <br>  <span class=\"hljs-comment\">// 也可以提供可选参数的值</span><br>  printInfo(<span class=\"hljs-string\">&#x27;Alice&#x27;</span>, <span class=\"hljs-string\">&#x27;456 Oak St&#x27;</span>, <span class=\"hljs-number\">30</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231220234638736-1446930606.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"注意点\">注意点<a title=\"#注意点\" href=\"#注意点\"></a></h1>\n<ul>\n<li>在 Dart 中定义函数如果出现同名的函数，参数不一样，那么 Dart 会报错，所以说不能出现同名的函数</li>\n<li>在 Dart 中定义函数，如果参数没有指定对应的类型，默认是 <code>dynamic</code> 类型</li>\n<li>在 Dart 中万物皆对象，函数也是对象，所以函数可以赋值给变量，也可以作为参数传递给其他函数</li>\n</ul>\n<h1 id=\"end\">End<a title=\"#end\" href=\"#end\"></a></h1>\n<ul>\n<li>如果你有任何问题或建议，欢迎在下方留言，我会尽快回复</li>\n<li>如果你觉得本文对你有帮助，欢迎点赞、收藏，你的支持是我写作的最大动力</li>\n</ul>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231211215004818-977875224.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"Dart-函数(下)","link":"2023/12/20/Flutter/08-Dart-函数(下)"},"next":{"title":"uni-app-项目计算功能(苹果计算器)","link":"2023/12/19/Uniapp/23-uni-app-项目计算功能(苹果计算器)"},"plink":"http://example.com/2023/12/20/Flutter/07-Dart-函数(上)/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"正文","title":"正文","index":"2","children":[{"id":"dart-中的函数","title":"Dart 中的函数","index":"2.1"},{"id":"异同点","title":"异同点","index":"2.2","children":[{"id":"类型注释","title":"类型注释","index":"2.2.1"},{"id":"默认参数和可选参数","title":"默认参数和可选参数","index":"2.2.2"},{"id":"函数表达式","title":"函数表达式","index":"2.2.3"},{"id":"上下文绑定","title":"上下文绑定","index":"2.2.4"}]},{"id":"可选参数","title":"可选参数","index":"2.3"}]},{"id":"注意点","title":"注意点","index":"3"},{"id":"end","title":"End","index":"4"}]}