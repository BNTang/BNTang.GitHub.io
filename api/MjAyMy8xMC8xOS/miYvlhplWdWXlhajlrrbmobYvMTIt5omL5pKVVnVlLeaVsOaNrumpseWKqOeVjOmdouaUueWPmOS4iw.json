{"title":"手撕Vue-数据驱动界面改变下","date":"2023-10-19T14:39:20.000Z","date_formatted":{"ll":"Oct 19, 2023","L":"10/19/2023","MM-DD":"10-19"},"link":"2023/10/19/手写Vue全家桶/12-手撕Vue-数据驱动界面改变下","tags":["手写Vue全家桶"],"updated":"2023-10-19T16:07:51.380Z","content":"<p>经过上一篇的介绍，数据驱动界面改变 v-model 的双向绑定已告一段落, 剩余的就以这篇文章来完成。</p>\n<p>首先完成我们的 v-html，v-text, 其实很简单，就是将我们之前的 v-model 创建观察者的方法，在 v-html 和 v-text 中再写一次即可，创建属于 v-html 和 v-text 的观察者。</p>\n<p>v-html:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-attr\">html</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node, value, vm</span>) &#123;<br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Watcher</span>(vm, value, <span class=\"hljs-function\">(<span class=\"hljs-params\">newValue, oldValue</span>) =&gt;</span> &#123;<br>        node.<span class=\"hljs-property\">innerHTML</span> = newValue;<br>    &#125;);<br>    node.<span class=\"hljs-property\">innerHTML</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getValue</span>(vm, value);<br>&#125;,<br></code></pre></td></tr></table></figure>\n<p>v-text:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-attr\">text</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node, value, vm</span>) &#123;<br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Watcher</span>(vm, value, <span class=\"hljs-function\">(<span class=\"hljs-params\">newValue, oldValue</span>) =&gt;</span> &#123;<br>        node.<span class=\"hljs-property\">innerText</span> = newValue;<br>    &#125;);<br>    node.<span class=\"hljs-property\">innerText</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getValue</span>(vm, value);<br>&#125;,<br></code></pre></td></tr></table></figure>\n<p>测试一下 v-html，打开浏览器控制台，输入 <code>vue.$data.html = '&lt;p&gt;我是测试v-html&lt;p/&gt;'</code>，可以看到界面上的内容已经改变了。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231019224802671-899784048.png\" alt=\"image-20231019224801735\" loading=\"lazy\" class=\"φbp\"></p>\n<p>测试一下 v-text，打开浏览器控制台，输入 <code>vue.$data.text = '&lt;p&gt;我是测试v-text&lt;p/&gt;'</code>，可以看到界面上的内容已经改变了。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231019224913416-1070199024.png\" alt=\"image-20231019224912964\" loading=\"lazy\" class=\"φbp\"></p>\n<p>好了到此为止，指令的数据驱动界面改变已经完成了，接下来我们来完成模板语法的数据驱动界面改变。</p>\n<p>这个就与之前的指令的数据驱动界面改变不同了，好了先不说问题，我们先直接来看代码一步一步分析。</p>\n<p>我看了下之前处理 content 的代码发现，获取不到对应的属性名称叫什么，因为是直接调用 this.getContent(vm, value); 获取的，所以会出现一个问题就是给 content 创建观察者对象的时候不能直接告诉他我要监听的是哪个属性，所以我就想到了一个办法。</p>\n<p>首先将之前的代码注释掉，再然后我编写一个正则表达式，关于这个正则表达式在之前的文章中有讲到，大概意思就是匹配 <code>&#123;&#123;&#125;&#125;</code> 中的内容，这里就不再赘述了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> reg = <span class=\"hljs-regexp\">/\\&#123;\\&#123;(.+?)\\&#125;\\&#125;/gi</span>;<br></code></pre></td></tr></table></figure>\n<p>继续往下看，我利用 value 调用了 replace 方法，传递了两个参数，第一个参数是刚刚编写的正则表达式，第二个参数是一个函数，这个函数的作用就是将匹配到的内容替换成对应的值，我先将其返回值打印出来，看看是什么，我们的代码就可以写成这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-attr\">content</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node, value, vm</span>) &#123;<br>    <span class=\"hljs-comment\">// console.log(value); // &#123;&#123; name &#125;&#125; -&gt; name -&gt; $data[name]</span><br>    <span class=\"hljs-comment\">// node.textContent = this.getContent(vm, value);</span><br><br>    <span class=\"hljs-keyword\">let</span> reg = <span class=\"hljs-regexp\">/\\&#123;\\&#123;(.+?)\\&#125;\\&#125;/gi</span>;<br><br>    value.<span class=\"hljs-title function_\">replace</span>(reg, <span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(args[<span class=\"hljs-number\">1</span>].<span class=\"hljs-title function_\">trim</span>());<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231019230457482-1106365261.png\" alt=\"image-20231019230456960\" loading=\"lazy\" class=\"φbp\"></p>\n<p>是的，我们的确获取到了对应的属性名称，接下来我们就可以利用这个属性名称来创建观察者对象了，我们的代码就可以写成这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-attr\">content</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node, value, vm</span>) &#123;<br>    <span class=\"hljs-comment\">// console.log(value); // &#123;&#123; name &#125;&#125; -&gt; name -&gt; $data[name]</span><br>    <span class=\"hljs-comment\">// node.textContent = this.getContent(vm, value);</span><br><br>    <span class=\"hljs-keyword\">let</span> reg = <span class=\"hljs-regexp\">/\\&#123;\\&#123;(.+?)\\&#125;\\&#125;/gi</span>;<br><br>    node.<span class=\"hljs-property\">textContent</span> = value.<span class=\"hljs-title function_\">replace</span>(reg, <span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-keyword\">const</span> attr = args[<span class=\"hljs-number\">1</span>].<span class=\"hljs-title function_\">trim</span>();<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Watcher</span>(vm, attr, <span class=\"hljs-function\">(<span class=\"hljs-params\">newValue, oldValue</span>) =&gt;</span> &#123;<br>            node.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getContent</span>(vm, value);<br>        &#125;);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getValue</span>(vm, args[<span class=\"hljs-number\">1</span>]);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>好了，我们来测试一下，打开浏览器控制台，输入 <code>vue.$data.name = '我是测试 &#123;&#123; name &#125;&#125;'</code>，可以看到界面上的内容已经改变了。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231019230944823-1725838172.png\" alt=\"image-20231019230944283\" loading=\"lazy\" class=\"φbp\"></p>\n<p>一切看起来都很完美，最终版代码其实是我没有将坑点说出来，现在我们来看看这个坑点是什么，再看之前，我来讲述一下为什么是又调用了 this.getContent 方法而不是直接将 newValue 赋值给 node.textContent。</p>\n<p>假如我们的数据结构是这样的 <code>&#123;&#123; name &#125;&#125; - &#123;&#123; age &#125;&#125;</code> 如果是通过直接将 newValue 赋值给 node.textContent 的话，这个时候呢，我假设 name 的值是 BNTang, age 的值是 33，那么界面上第一次加载的内容会是 BNTang - 33，但是如果我将 name 的值改成了 xhh，那么界面上的内容就会变成 xhh，这个时候 age 的值就丢掉了，如下图是我的测试结果。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231019233645267-2138345810.png\" alt=\"image-20231019233644556\" loading=\"lazy\" class=\"φbp\"></p>\n<p>原因就是直接替换掉了，所以在动态更改 name 属性或者 age 属性其中一个的情况下，还需要将 <code>&#123;&#123; name &#125;&#125; - &#123;&#123; age &#125;&#125;</code> 这样的内容替换成 BNTang - 33，这样的话，我们就需要调用 this.getContent 方法，这个方法就会利用正则挨个匹配 <code>&#123;&#123;&#125;&#125;</code> 中的内容，然后再将其替换成对应的值，这样就不会出现上面的问题了。</p>\n<p>?&gt; 最后总结一下 content 函数的 value.replace 在外层是为了拿到属性名称，内层是为了保证数据完整性。</p>\n","prev":{"title":"手撕Vue-界面驱动数据更新","link":"2023/10/20/手写Vue全家桶/13-手撕Vue-界面驱动数据更新"},"next":{"title":"手撕Vue-数据驱动界面改变中","link":"2023/10/15/手写Vue全家桶/11-手撕Vue-数据驱动界面改变中"},"plink":"http://example.com/2023/10/19/手写Vue全家桶/12-手撕Vue-数据驱动界面改变下/","reading_time":"1180 words in 8 min"}