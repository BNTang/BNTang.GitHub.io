{"title":"手撕Vue-Router-初始化路由信息","date":"2023-11-21T13:36:35.000Z","date_formatted":{"ll":"Nov 21, 2023","L":"11/21/2023","MM-DD":"11-21"},"link":"2023/11/21/手写VueRouter/03-手撕Vue-Router-初始化路由信息","tags":["手写VueRouter"],"updated":"2023-11-21T15:32:11.432Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231121214216307-81281004.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h1>\n<p>经过上一节课的学习，我们已经完成了提取我们想要的路由信息数据格式，提取完毕了之后，接下来我们该干什么，接下来需要做的步骤就是监听路由的变化，保存当前的路由。</p>\n<p>那么就会遇到几个问题，就是怎么监听，怎么保存，我们先回到 VueRouter 的官方文档，点击右上角的 API 参考，然后拖动到底部，在底部找到组件注入，当中的注入的属性：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231121224515306-716618498.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>其实我们在使用 VueRouter 的时候，只要你注册了 VueRouter 之后，他会在每一个 Vue 实例中都添加两个属性，一个是 $router，一个是 $route，这两个属性是什么呢？</p>\n<h2 id=\"$router\">$router<a title=\"#$router\" href=\"#$router\"></a></h2>\n<p>其实对应着就是我们自定义的 NueRouter 对象。</p>\n<h2 id=\"$route\">$route<a title=\"#$route\" href=\"#$route\"></a></h2>\n<p><code>$route</code> 其实对应着就是一个普通的对象，这个对象就保存了当前的路由地址，等等等等一系列信息，所以为了将来能够注入这两个对象，我这里单独写一个类来存储这两个对象相关的信息。</p>\n<h1 id=\"代码实现\">代码实现<a title=\"#代码实现\" href=\"#代码实现\"></a></h1>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NueRouterInfo</span> &#123;<br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">currentPath</span> = <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>通过这个类，我们就可以保存当前的路由地址，默认等于 null，将来路由地址发生变化的时候，我们就可以修改这个值。</p>\n<p>定义好了这个类我们是需要使用这个类，所以我们在哪里进行使用呢，我们在 NueRouter 类中进行使用，我们在 NueRouter 类中定义一个属性，这个属性就是 NueRouterInfo 的实例，然后在 NueRouter 的构造函数中进行初始化路由信息。</p>\n<p>首先定义 NueRouterInfo 的实例:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">routerInfo</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NueRouterInfo</span>();<br></code></pre></td></tr></table></figure>\n<p>然后在 NueRouter 的构造函数中进行初始化路由信息，我这里定义一个 initDefault 方法，然后在这个方法中进行初始化路由信息，这个方法是在 NueRouter 的构造函数中进行调用的。</p>\n<p>在 initDefault 方法中，首先根据当前的 mode 也就是路由模式来进行走不同分支的逻辑代码，如果是 hash 模式，那么我们就需要监听 hashchange 事件，如果是 history 模式，那么我们就需要监听 popstate 事件。</p>\n<p>这是其中的一步，我们的第一步其实并不是监听，首先要处理的就是，打开的界面先判断 mode 模式如果是 hash，看看界面有没有 hash，如果没有就跳转到 <code>#/</code>，如果有就不用管了，如果是 history 模式，那么就看看界面有没有 history，如果没有就跳转到 <code>/</code>，如果有就不用管了。</p>\n<p>第二步才是监听，监听的时候，我们需要将当前的路由地址保存到 NueRouterInfo 的实例中，好了，我们来看看代码怎么写。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title function_\">initDefault</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">mode</span> === <span class=\"hljs-string\">&#x27;hash&#x27;</span>) &#123;<br>        <span class=\"hljs-comment\">// 1.判断打开的界面有没有hash, 如果没有就跳转到#/</span><br>        <span class=\"hljs-keyword\">if</span> (!location.<span class=\"hljs-property\">hash</span>) &#123;<br>            location.<span class=\"hljs-property\">hash</span> = <span class=\"hljs-string\">&#x27;/&#x27;</span>;<br>        &#125;<br>        <span class=\"hljs-comment\">// 2.加载完成之后和hash发生变化之后都需要保存当前的地址</span><br>        <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;load&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">routerInfo</span>.<span class=\"hljs-property\">currentPath</span> = location.<span class=\"hljs-property\">hash</span>.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>);<br>        &#125;);<br>        <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;hashchange&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">routerInfo</span>.<span class=\"hljs-property\">currentPath</span> = location.<span class=\"hljs-property\">hash</span>.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>);<br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">routerInfo</span>);<br>        &#125;);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-comment\">// 1.判断打开的界面有没有路径, 如果没有就跳转到/</span><br>        <span class=\"hljs-keyword\">if</span> (!location.<span class=\"hljs-property\">pathname</span>) &#123;<br>            location.<span class=\"hljs-property\">pathname</span> = <span class=\"hljs-string\">&#x27;/&#x27;</span>;<br>        &#125;<br>        <span class=\"hljs-comment\">// 2.加载完成之后和history发生变化之后都需要保存当前的地址</span><br>        <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;load&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">routerInfo</span>.<span class=\"hljs-property\">currentPath</span> = location.<span class=\"hljs-property\">pathname</span>;<br>        &#125;);<br>        <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;popstate&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">routerInfo</span>.<span class=\"hljs-property\">currentPath</span> = location.<span class=\"hljs-property\">pathname</span>;<br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">routerInfo</span>);<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"测试\">测试<a title=\"#测试\" href=\"#测试\"></a></h1>\n<p>代码写完了，我们来测试一下，先在 app.vue 中定义两个 a 标签 href 是 hash 模式代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>  &lt;div id=&quot;app&quot;&gt;<br>    &lt;a href=&quot;#/home&quot;&gt;首页&lt;/a&gt;<br>    &lt;a href=&quot;#/about&quot;&gt;关于&lt;/a&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>\n<p>然后在更改一下 NueRouter 的传参，将 mode 改成 hash 模式, 我们来测试第一步我们处理的逻辑，打开界面，看看有没有 hash，如果没有就跳转到 <code>#/</code>，如果有就不用管了。</p>\n<p>首先访问：<a href=\"http://localhost:8080/\" target=\"_blank\">http://localhost:8080/</a> ，然后我们看看界面的地址栏，发现没有 hash，默认就会跳转到 <code>#/</code>:</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231121232408345-1591785400.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>然后我们再访问：<a href=\"http://localhost:8080/#/home\" target=\"_blank\">http://localhost:8080/#/home</a> ，然后我们看看界面的地址栏，发现有 hash，就不用管了:</p>\n<p>接下来我们测试第二步，监听 hashchange 事件，我们在 hashchange 事件中打印了 NueRouterInfo 的实例，看看有没有保存当前的路由地址，我们分别点击首页和关于，打印结果如下：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231121232636600-925620671.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>好了，hash 模式的测试就完成了，关于 history 模式需要编写的代码比较多，我这里就不带着大家一起来验证了，因为他们两个都是同一个世界同一个梦想的。</p>\n<p>到此为止，我们就完成了初始化路由信息的代码编写，接下来我们下一篇的内容就是根据当前的路由地址，找到对应的组件，然后渲染到页面上。</p>\n<h1 id=\"最后\">最后<a title=\"#最后\" href=\"#最后\"></a></h1>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231120214412151-115292144.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"手撕Vue-Router-添加全局$router属性","link":"2023/11/22/手写VueRouter/04-手撕Vue-Router-添加全局$router属性"},"next":{"title":"手撕Vue-Router-提取路由信息","link":"2023/11/20/手写VueRouter/02-手撕Vue-Router-提取路由信息"},"plink":"http://example.com/2023/11/21/手写VueRouter/03-手撕Vue-Router-初始化路由信息/","toc":[{"id":"前言","title":"前言","index":"1","children":[{"id":"$router","title":"$router","index":"1.1"},{"id":"$route","title":"$route","index":"1.2"}]},{"id":"代码实现","title":"代码实现","index":"2"},{"id":"测试","title":"测试","index":"3"},{"id":"最后","title":"最后","index":"4"}],"reading_time":"1320 words in 9 min"}