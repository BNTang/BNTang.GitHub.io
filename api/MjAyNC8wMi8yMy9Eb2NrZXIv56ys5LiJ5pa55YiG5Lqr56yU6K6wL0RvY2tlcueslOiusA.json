{"title":"Docker 笔记","date":"2024-02-23T01:20:34.000Z","date_formatted":{"ll":"Feb 23, 2024","L":"02/23/2024","MM-DD":"02-23"},"link":"2024/02/23/Docker/第三方分享笔记/Docker笔记","tags":["Docker"],"updated":"2024-02-23T14:33:08.655Z","content":"<h1 id=\"docker笔记\">Docker笔记<a title=\"#docker笔记\" href=\"#docker笔记\"></a></h1>\n<h2 id=\"1.快速入门\">1.快速入门<a title=\"#1.快速入门\" href=\"#1.快速入门\"></a></h2>\n<p>要想让 Docker 帮我们安装和部署软件，肯定要保证你的机器上有 Docker. 由于大家的操作系统各不相同，安装方式也不同。为了便于大家学习，我们统一在 CentOS 的虚拟机中安装 Docker，统一学习环境。</p>\n<h3 id=\"1.1.部署-mysql\">1.1.部署 MySQL<a title=\"#1.1.部署-mysql\" href=\"#1.1.部署-mysql\"></a></h3>\n<p>首先，我们利用 Docker 来安装一个 MySQL 软件，大家可以对比一下之前传统的安装方式，看看哪个效率更高一些。</p>\n<p>如果是利用传统方式部署 MySQL，大概的步骤有：</p>\n<ul>\n<li>搜索并下载 MySQL 安装包</li>\n<li>上传至 Linux 环境</li>\n<li>编译和配置环境</li>\n<li>安装</li>\n</ul>\n<p>而使用 Docker 安装，仅仅需要一步即可，在命令行输入下面的命令（建议采用 CV 大法）：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">docker run <span class=\"hljs-literal\">-d</span> \\<br>  <span class=\"hljs-literal\">--name</span> mysql \\<br>  <span class=\"hljs-literal\">-p</span> <span class=\"hljs-number\">3306</span>:<span class=\"hljs-number\">3306</span> \\<br>  <span class=\"hljs-literal\">-e</span> TZ=Asia/Shanghai \\<br>  <span class=\"hljs-literal\">-e</span> MYSQL_ROOT_PASSWORD=<span class=\"hljs-number\">123</span> \\<br>  mysql<br></code></pre></td></tr></table></figure>\n<p>运行效果如图：</p>\n<p><img src=\"https://cdn.xf233.io/static/docker/static/UxK2beI0ros8O1xf2IJcWMvQnVb.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>MySQL 安装完毕！通过任意客户端工具即可连接到 MySQL.</p>\n<p>大家可以发现，当我们执行命令后，Docker 做的第一件事情，是去自动搜索并下载了 MySQL，然后会自动运行 MySQL，我们完全不用插手，是不是非常方便。</p>\n<p>而且，这种安装方式你完全不用考虑运行的操作系统环境，它不仅仅在 CentOS 系统是这样，在 Ubuntu 系统、macOS 系统、甚至是装了 WSL 的 Windows 下，都可以使用这条命令来安装 MySQL。</p>\n<p>要知道，<strong>不同操作系统下其安装包、运行环境是都不相同的</strong>！如果是<strong>手动安装，必须手动解决安装包不同、环境不同的、配置不同的问题</strong>！</p>\n<p>而使用 Docker，这些完全不用考虑。就是因为 Docker 会自动搜索并下载 MySQL。注意：这里下载的不是安装包，而是<strong>镜像。<strong>镜像中不仅包含了 MySQL 本身，还包含了其运行所需要的环境、配置、系统级函数库。因此它在运行时就有自己独立的环境，就可以跨系统运行，也不需要手动再次配置环境了。这套独立运行的隔离环境我们称为</strong>容器</strong>。</p>\n<p>说明：</p>\n<ul>\n<li>镜像：英文是 image</li>\n<li>容器：英文是 container</li>\n</ul>\n<p>Docker 会根据命令中的镜像名称自动搜索并下载镜像，那么问题来了，它是去哪里搜索和下载镜像的呢？这些镜像又是谁制作的呢？</p>\n<p>Docker 官方提供了一个专门管理、存储镜像的网站，并对外开放了镜像上传、下载的权利。Docker 官方提供了一些基础镜像，然后各大软件公司又在基础镜像基础上，制作了自家软件的镜像，全部都存放在这个网站。这个网站就成了 Docker 镜像交流的社区：</p>\n<p>基本上我们常用的各种软件都能在这个网站上找到，我们甚至可以自己制作镜像上传上去。</p>\n<p>像这种提供存储、管理 Docker 镜像的服务器，被称为 DockerRegistry，可以翻译为镜像仓库。DockerHub 网站是官方仓库，阿里云、华为云会提供一些第三方仓库，我们也可以自己搭建私有的镜像仓库。</p>\n<p>官方仓库在国外，下载速度较慢，一般我们都会使用第三方仓库提供的镜像加速功能，提高下载速度。而企业内部的机密项目，往往会采用私有镜像仓库。</p>\n<p>总之，镜像的来源有两种：</p>\n<ul>\n<li>基于官方基础镜像自己制作</li>\n<li>直接去 DockerRegistry 下载</li>\n</ul>\n<p>用一幅图标示如下：</p>\n<h3 id=\"1.2.命令解读\">1.2.命令解读<a title=\"#1.2.命令解读\" href=\"#1.2.命令解读\"></a></h3>\n<p>利用 Docker 快速的安装了 MySQL，非常的方便，不过我们执行的命令到底是什么意思呢？</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">docker run <span class=\"hljs-literal\">-d</span> \\<br>  <span class=\"hljs-literal\">--name</span> mysql \\<br>  <span class=\"hljs-literal\">-p</span> <span class=\"hljs-number\">3306</span>:<span class=\"hljs-number\">3306</span> \\<br>  <span class=\"hljs-literal\">-e</span> TZ=Asia/Shanghai \\<br>  <span class=\"hljs-literal\">-e</span> MYSQL_ROOT_PASSWORD=<span class=\"hljs-number\">123</span> \\<br>  mysql<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>解读：</p>\n<ul>\n<li><code>docker run -d</code> ：创建并运行一个容器，<code>-d</code> 则是让容器以后台进程运行</li>\n<li><code>--name mysql </code> : 给容器起个名字叫 <code>mysql</code>，你可以叫别的</li>\n<li><code>-p 3306:3306</code> : 设置端口映射。\n<ul>\n<li><strong>容器是隔离环境</strong>，外界不可访问。但是可以<strong>将<strong><strong>宿主机</strong></strong>端口****映射容器内到端口</strong>，当访问宿主机指定端口时，就是在访问容器内的端口了。</li>\n<li>容器内端口往往是由容器内的进程决定，例如 MySQL 进程默认端口是 3306，因此容器内端口一定是 3306；而宿主机端口则可以任意指定，一般与容器内保持一致。</li>\n<li>格式： <code>-p 宿主机端口:容器内端口</code>，示例中就是将宿主机的 3306 映射到容器内的 3306 端口</li>\n</ul>\n</li>\n<li><code>-e TZ=Asia/Shanghai</code> : 配置容器内进程运行时的一些参数\n<ul>\n<li>格式：<code>-e KEY=VALUE</code>，KEY 和 VALUE 都由容器内进程决定</li>\n<li>案例中，<code>TZ=Asia/Shanghai</code> 是设置时区；<code>MYSQL_ROOT_PASSWORD=123</code> 是设置 MySQL 默认密码</li>\n</ul>\n</li>\n<li><code>mysql</code> : 设置<strong>镜像</strong>名称，Docker 会根据这个名字搜索并下载镜像\n<ul>\n<li>格式：<code>REPOSITORY:TAG</code>，例如 <code>mysql:8.0</code>，其中 <code>REPOSITORY</code> 可以理解为镜像名，<code>TAG</code> 是版本号</li>\n<li>在未指定 <code>TAG</code> 的情况下，默认是最新版本，也就是 <code>mysql:latest</code></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>镜像的名称不是随意的，而是要到 DockerRegistry 中寻找，镜像运行时的配置也不是随意的，要参考镜像的帮助文档，这些在 DockerHub 网站或者软件的官方网站中都能找到。</p>\n<p>如果我们要安装其它软件，也可以到 DockerRegistry 中寻找对应的镜像名称和版本，阅读相关配置即可。</p>\n<h2 id=\"2.docker-基础\">2.Docker 基础<a title=\"#2.docker-基础\" href=\"#2.docker-基础\"></a></h2>\n<p>接下来，我们一起来学习 Docker 使用的一些基础知识，为将来部署项目打下基础。具体用法可以参考 Docker 官方文档：</p>\n<h3 id=\"2.1.常见命令\">2.1.常见命令<a title=\"#2.1.常见命令\" href=\"#2.1.常见命令\"></a></h3>\n<p>首先我们来学习 Docker 中的常见命令，可以参考官方文档：</p>\n<h4 id=\"2.1.1.命令介绍\">2.1.1.命令介绍<a title=\"#2.1.1.命令介绍\" href=\"#2.1.1.命令介绍\"></a></h4>\n<p>其中，比较常见的命令有：</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th><strong>命令</strong></th>\n<th><strong>说明</strong></th>\n<th><strong>文档地址</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>docker search</td>\n<td>寻找镜像</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/search/\" target=\"_blank\">docker search</a></td>\n</tr>\n<tr>\n<td>docker pull</td>\n<td>拉取镜像</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/pull/\" target=\"_blank\">docker pull</a></td>\n</tr>\n<tr>\n<td>docker login</td>\n<td>登录DockerHub</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/login/\" target=\"_blank\">docker login</a></td>\n</tr>\n<tr>\n<td>docker push</td>\n<td>推送镜像到 DockerRegistry</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/push/\" target=\"_blank\">docker push</a></td>\n</tr>\n<tr>\n<td>docker images</td>\n<td>查看本地镜像</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/images/\" target=\"_blank\">docker images</a></td>\n</tr>\n<tr>\n<td>docker rmi</td>\n<td>删除本地镜像</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/rmi/\" target=\"_blank\">docker rmi</a></td>\n</tr>\n<tr>\n<td>docker run</td>\n<td>创建并运行容器（不能重复创建）</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/run/\" target=\"_blank\">docker run</a></td>\n</tr>\n<tr>\n<td>docker stop</td>\n<td>停止指定容器</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/stop/\" target=\"_blank\">docker stop</a></td>\n</tr>\n<tr>\n<td>docker start</td>\n<td>启动指定容器</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/start/\" target=\"_blank\">docker start</a></td>\n</tr>\n<tr>\n<td>docker restart</td>\n<td>重新启动容器</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/restart/\" target=\"_blank\">docker restart</a></td>\n</tr>\n<tr>\n<td>docker rm</td>\n<td>删除指定容器</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/rm/\" target=\"_blank\">docs.docker.com</a></td>\n</tr>\n<tr>\n<td>docker ps</td>\n<td>查看容器</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/ps/\" target=\"_blank\">docker ps</a></td>\n</tr>\n<tr>\n<td>docker logs</td>\n<td>查看容器运行日志</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/logs/\" target=\"_blank\">docker logs</a></td>\n</tr>\n<tr>\n<td>docker exec</td>\n<td>进入容器</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/exec/\" target=\"_blank\">docker exec</a></td>\n</tr>\n<tr>\n<td>docker cp</td>\n<td>容器和宿主机文件拷贝</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/cp/#usage\" target=\"_blank\">docker cp</a></td>\n</tr>\n<tr>\n<td>docker save</td>\n<td>保存镜像到本地压缩文件</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/save/\" target=\"_blank\">docker save</a></td>\n</tr>\n<tr>\n<td>docker load</td>\n<td>加载本地压缩文件到镜像</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/load/\" target=\"_blank\">docker load</a></td>\n</tr>\n<tr>\n<td>docker inspect</td>\n<td>查看容器详细信息</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/inspect/\" target=\"_blank\">docker inspect</a></td>\n</tr>\n</tbody>\n</table></div></div><p><strong>补充：</strong></p>\n<p>默认情况下，每次重启虚拟机我们都需要手动启动 Docker 和 Docker 中的容器。通过命令可以实现开机自启：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-comment\"># Docker开机自启</span><br>systemctl enable docker<br><br><span class=\"hljs-comment\"># Docker容器开机自启</span><br>docker update <span class=\"hljs-literal\">--restart</span>=always [容器名/容器<span class=\"hljs-type\">id</span>]<br></code></pre></td></tr></table></figure>\n<h4 id=\"2.1.2.演示\">2.1.2.演示<a title=\"#2.1.2.演示\" href=\"#2.1.2.演示\"></a></h4>\n<p>教学环节说明：我们以 Nginx 为例给大家演示上述命令。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-comment\"># 第1步，去DockerHub查看nginx镜像仓库及相关信息</span><br><br><span class=\"hljs-comment\"># 第2步，拉取Nginx镜像</span><br>docker pull nginx<br><br><span class=\"hljs-comment\"># 第3步，查看镜像</span><br>docker images<br><span class=\"hljs-comment\"># 结果如下：</span><br>_REPOSITORY   TAG       IMAGE ID       CREATED         SIZE_<br>_nginx        latest    <span class=\"hljs-number\">605</span>c77e624dd   <span class=\"hljs-number\">16</span> months ago   <span class=\"hljs-number\">141</span>MB_<br>_mysql        latest    <span class=\"hljs-number\">3218</span>b38490ce   <span class=\"hljs-number\">17</span> months ago   <span class=\"hljs-number\">516</span>MB_<br><br><span class=\"hljs-comment\"># 第4步，创建并允许Nginx容器</span><br>docker run <span class=\"hljs-literal\">-d</span> <span class=\"hljs-literal\">--name</span> nginx <span class=\"hljs-literal\">-p</span> <span class=\"hljs-number\">80</span>:<span class=\"hljs-number\">80</span> nginx<br><br><span class=\"hljs-comment\"># 第5步，查看运行中容器</span><br>docker <span class=\"hljs-built_in\">ps</span><br><span class=\"hljs-comment\"># 也可以加格式化方式访问，格式会更加清爽</span><br>docker <span class=\"hljs-built_in\">ps</span> <span class=\"hljs-literal\">--format</span> <span class=\"hljs-string\">&quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Image&#125;&#125;\\t&#123;&#123;.Ports&#125;&#125;\\t&#123;&#123;.Status&#125;&#125;\\t&#123;&#123;.Names&#125;&#125;&quot;</span><br><br><span class=\"hljs-comment\"># 第6步，访问网页，地址：http://虚拟机地址</span><br><br><span class=\"hljs-comment\"># 第7步，停止容器</span><br>docker stop nginx<br><br><span class=\"hljs-comment\"># 第8步，查看所有容器</span><br>docker <span class=\"hljs-built_in\">ps</span> <span class=\"hljs-literal\">-a</span> <span class=\"hljs-literal\">--format</span> <span class=\"hljs-string\">&quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Image&#125;&#125;\\t&#123;&#123;.Ports&#125;&#125;\\t&#123;&#123;.Status&#125;&#125;\\t&#123;&#123;.Names&#125;&#125;&quot;</span><br><br><span class=\"hljs-comment\"># 第9步，再次启动nginx容器</span><br>docker <span class=\"hljs-built_in\">start</span> nginx<br><br><span class=\"hljs-comment\"># 第10步，再次查看容器</span><br>docker <span class=\"hljs-built_in\">ps</span> <span class=\"hljs-literal\">--format</span> <span class=\"hljs-string\">&quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Image&#125;&#125;\\t&#123;&#123;.Ports&#125;&#125;\\t&#123;&#123;.Status&#125;&#125;\\t&#123;&#123;.Names&#125;&#125;&quot;</span><br><br><span class=\"hljs-comment\"># 第11步，查看容器详细信息</span><br>docker inspect nginx<br><br><span class=\"hljs-comment\"># 第12步，进入容器,查看容器内目录</span><br>docker exec <span class=\"hljs-literal\">-it</span> nginx bash<br><span class=\"hljs-comment\"># 或者，可以进入MySQL</span><br>docker exec <span class=\"hljs-literal\">-it</span> mysql mysql <span class=\"hljs-literal\">-uroot</span> <span class=\"hljs-literal\">-p</span><br><br><span class=\"hljs-comment\"># 第13步，删除容器</span><br>docker <span class=\"hljs-built_in\">rm</span> nginx<br><span class=\"hljs-comment\"># 发现无法删除，因为容器运行中，强制删除容器</span><br>docker <span class=\"hljs-built_in\">rm</span> <span class=\"hljs-operator\">-f</span> nginx<br></code></pre></td></tr></table></figure>\n<h4 id=\"2.1.3.命令别名\">2.1.3.命令别名<a title=\"#2.1.3.命令别名\" href=\"#2.1.3.命令别名\"></a></h4>\n<p>给常用 Docker 命令起别名，方便我们访问：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-comment\"># 修改/root/.bashrc文件</span><br>vi /root/.bashrc<br>内容如下：<br><span class=\"hljs-comment\"># .bashrc</span><br><br><span class=\"hljs-comment\"># User specific aliases and functions</span><br><br>_alias <span class=\"hljs-built_in\">rm</span>=<span class=\"hljs-string\">&#x27;rm -i&#x27;</span>_<br>_alias <span class=\"hljs-built_in\">cp</span>=<span class=\"hljs-string\">&#x27;cp -i&#x27;</span>_<br>_alias <span class=\"hljs-built_in\">mv</span>=<span class=\"hljs-string\">&#x27;mv -i&#x27;</span>_<br>_alias dps=<span class=\"hljs-string\">&#x27;docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Image&#125;&#125;\\t&#123;&#123;.Ports&#125;&#125;\\t&#123;&#123;.Status&#125;&#125;\\t&#123;&#123;.Names&#125;&#125;&quot;&#x27;</span>_<br>_alias dis=<span class=\"hljs-string\">&#x27;docker images&#x27;</span>_<br><br><span class=\"hljs-comment\"># Source global definitions</span><br>_if [ -<span class=\"hljs-type\">f</span> /<span class=\"hljs-type\">etc</span>/<span class=\"hljs-type\">bashrc</span> ]; then_<br>_        . /etc/bashrc_<br>_fi_<br></code></pre></td></tr></table></figure>\n<p>然后，执行命令使别名生效</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">source /root/.bashrc<br></code></pre></td></tr></table></figure>\n<p>接下来，试试看新的命令吧。</p>\n<h4 id=\"2.1.4.将容器生成新的镜像\">2.1.4.将容器生成新的镜像<a title=\"#2.1.4.将容器生成新的镜像\" href=\"#2.1.4.将容器生成新的镜像\"></a></h4>\n<blockquote>\n<p>docker 启动一个镜像容器后， 可以在里面执行一些命令操作，然后使用<code>docker commit</code>将新的这个容器快照生成一个镜像。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker commit -m=<span class=\"hljs-string\">&quot;提交的描述信息&quot;</span> -a=<span class=\"hljs-string\">&quot;作者&quot;</span> 容器ID 要创建的目标镜像名:[tag]<br></code></pre></td></tr></table></figure>\n<p>Docker挂载主机目录，可能会出现报错：<code>cannot open directory .: Perission denied</code>。</p>\n<p><em><strong>解决方案</strong></em>：在命令中加入参数 <code>--privileged=true</code>。</p>\n<p>CentOS7安全模块比之前系统版本加强，不安全的会先禁止，目录挂载的情况被默认为不安全的行为，在SELinux里面挂载目录被禁止掉了。如果要开启，一般使用 <code>--privileged=true</code>，扩大容器的权限解决挂载没有权限的问题。也即使用该参数，容器内的root才拥有真正的root权限，否则容器内的root只是外部的一个普通用户权限。</p>\n<h4 id=\"2.1.5.将新的镜像推送到dockerhub\">2.1.5.将新的镜像推送到DockerHub<a title=\"#2.1.5.将新的镜像推送到dockerhub\" href=\"#2.1.5.将新的镜像推送到dockerhub\"></a></h4>\n<ol>\n<li>\n<p>登录DockerHub</p>\n<ul>\n<li><code>docker login</code></li>\n</ul>\n</li>\n<li>\n<p>给本地的镜像打上Tag</p>\n<ul>\n<li><code>docker tag &lt;local_image_id&gt; dockerhub_username/my-repo:latest</code></li>\n</ul>\n</li>\n<li>\n<p>将打上Tag的镜像上传到DockerHub</p>\n<ul>\n<li><code>docker push dockerhub_username/my-repo:latest</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2.2.数据卷\">2.2.数据卷<a title=\"#2.2.数据卷\" href=\"#2.2.数据卷\"></a></h3>\n<p>容器是隔离环境，容器内程序的文件、配置、运行时产生的容器都在容器内部，我们要读写容器内的文件非常不方便。大家思考几个问题：</p>\n<ul>\n<li>如果要升级 MySQL 版本，需要销毁旧容器，那么数据岂不是跟着被销毁了？</li>\n<li>MySQL、Nginx 容器运行后，如果我要修改其中的某些配置该怎么办？</li>\n<li>我想要让 Nginx 代理我的静态资源怎么办？</li>\n</ul>\n<p>因此，容器提供程序的运行环境，但是<strong>程序运行产生的数据、程序运行依赖的配置都应该与容器****解耦</strong>。</p>\n<h4 id=\"2.2.1.什么是数据卷\">2.2.1.什么是数据卷<a title=\"#2.2.1.什么是数据卷\" href=\"#2.2.1.什么是数据卷\"></a></h4>\n<p><strong>数据卷（volume）<strong>是一个虚拟目录，是</strong>容器内目录</strong>与<strong>宿主机****目录</strong>之间映射的桥梁。</p>\n<p>以 Nginx 为例，我们知道 Nginx 中有两个关键的目录：</p>\n<ul>\n<li><code>html</code>：放置一些静态资源</li>\n<li><code>conf</code>：放置配置文件</li>\n</ul>\n<p>如果我们要让 Nginx 代理我们的静态资源，最好是放到 <code>html</code> 目录；如果我们要修改 Nginx 的配置，最好是找到 <code>conf</code> 下的 <code>nginx.conf</code> 文件。</p>\n<p>但遗憾的是，容器运行的 Nginx 所有的文件都在容器内部。所以我们必须利用数据卷将两个目录与宿主机目录关联，方便我们操作。如图：</p>\n<p>在上图中：</p>\n<ul>\n<li>我们创建了两个数据卷：<code>conf</code>、<code>html</code></li>\n<li>Nginx 容器内部的 <code>conf</code> 目录和 <code>html</code> 目录分别与两个数据卷关联。</li>\n<li>而数据卷 conf 和 html 分别指向了宿主机的 <code>/var/lib/docker/volumes/conf/_data</code> 目录和 <code>/var/lib/docker/volumes/html/_data</code> 目录</li>\n</ul>\n<p>这样以来，容器内的 <code>conf</code> 和 <code>html</code> 目录就 与宿主机的 <code>conf</code> 和 <code>html</code> 目录关联起来，我们称为<strong>挂载</strong>。此时，我们操作宿主机的 <code>/var/lib/docker/volumes/html/_data</code> 就是在操作容器内的 <code>/usr/share/nginx/html/_data</code> 目录。只要我们将静态资源放入宿主机对应目录，就可以被 Nginx 代理了。</p>\n<h4 id=\"2.2.2.数据卷命令\">2.2.2.数据卷命令<a title=\"#2.2.2.数据卷命令\" href=\"#2.2.2.数据卷命令\"></a></h4>\n<p>数据卷的相关命令有：</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th><strong>命令</strong></th>\n<th><strong>说明</strong></th>\n<th><strong>文档地址</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>docker volume create</td>\n<td>创建数据卷</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/volume_create/\" target=\"_blank\">docker volume create</a></td>\n</tr>\n<tr>\n<td>docker volume ls</td>\n<td>查看所有数据卷</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/volume_ls/\" target=\"_blank\">docs.docker.com</a></td>\n</tr>\n<tr>\n<td>docker volume rm</td>\n<td>删除指定数据卷</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/volume_prune/\" target=\"_blank\">docs.docker.com</a></td>\n</tr>\n<tr>\n<td>docker volume inspect</td>\n<td>查看某个数据卷的详情</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/volume_inspect/\" target=\"_blank\">docs.docker.com</a></td>\n</tr>\n<tr>\n<td>docker volume prune</td>\n<td>清除数据卷</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/volume_prune/\" target=\"_blank\">docker volume prune</a></td>\n</tr>\n</tbody>\n</table></div></div><p>注意：容器与数据卷的挂载要在创建容器时配置，对于创建好的容器，是不能设置数据卷的。而且<strong>创建容器的过程中，数据卷会自动创建</strong>。</p>\n<p>教学<strong>演示环节</strong>：演示一下 nginx 的 html 目录挂载</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-comment\"># 1.首先创建容器并指定数据卷，注意通过 -v 参数来指定数据卷</span><br>docker run <span class=\"hljs-literal\">-d</span> <span class=\"hljs-literal\">--name</span> nginx <span class=\"hljs-literal\">-p</span> <span class=\"hljs-number\">80</span>:<span class=\"hljs-number\">80</span> <span class=\"hljs-literal\">-v</span> html:/usr/share/nginx/html nginx<br><br><span class=\"hljs-comment\"># 2.然后查看数据卷</span><br>docker volume <span class=\"hljs-built_in\">ls</span><br><span class=\"hljs-comment\"># 结果</span><br>_DRIVER    VOLUME NAME_<br>_local     <span class=\"hljs-number\">29524</span>ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f_<br>_local     html_<br><br><span class=\"hljs-comment\"># 3.查看数据卷详情</span><br>docker volume inspect html<br><span class=\"hljs-comment\"># 结果</span><br>_[<span class=\"hljs-type\">_</span><br><span class=\"hljs-type\">_</span>    &#123;<span class=\"hljs-type\">_</span><br><span class=\"hljs-type\">_</span>        <span class=\"hljs-string\">&quot;CreatedAt&quot;</span>: <span class=\"hljs-string\">&quot;2024-05-17T19:57:08+08:00&quot;</span>,<span class=\"hljs-type\">_</span><br><span class=\"hljs-type\">_</span>        <span class=\"hljs-string\">&quot;Driver&quot;</span>: <span class=\"hljs-string\">&quot;local&quot;</span>,<span class=\"hljs-type\">_</span><br><span class=\"hljs-type\">_</span>        <span class=\"hljs-string\">&quot;Labels&quot;</span>: <span class=\"hljs-type\">null</span>,<span class=\"hljs-type\">_</span><br><span class=\"hljs-type\">_</span>        <span class=\"hljs-string\">&quot;Mountpoint&quot;</span>: <span class=\"hljs-string\">&quot;/var/lib/docker/volumes/html/_data&quot;</span>,<span class=\"hljs-type\">_</span><br><span class=\"hljs-type\">_</span>        <span class=\"hljs-string\">&quot;Name&quot;</span>: <span class=\"hljs-string\">&quot;html&quot;</span>,<span class=\"hljs-type\">_</span><br><span class=\"hljs-type\">_</span>        <span class=\"hljs-string\">&quot;Options&quot;</span>: <span class=\"hljs-type\">null</span>,<span class=\"hljs-type\">_</span><br><span class=\"hljs-type\">_</span>        <span class=\"hljs-string\">&quot;Scope&quot;</span>: <span class=\"hljs-string\">&quot;local&quot;</span><span class=\"hljs-type\">_</span><br><span class=\"hljs-type\">_</span>    &#125;<span class=\"hljs-type\">_</span><br><span class=\"hljs-type\">_</span>]_<br><br><span class=\"hljs-comment\"># 4.查看/var/lib/docker/volumes/html/_data目录</span><br>ll /var/lib/docker/volumes/html/_data<br><span class=\"hljs-comment\"># 可以看到与nginx的html目录内容一样，结果如下：</span><br>_总用量 __8_<br>_<span class=\"hljs-literal\">-rw-r--r--</span>. <span class=\"hljs-number\">1</span> root root <span class=\"hljs-number\">497</span> <span class=\"hljs-number\">12</span>月 <span class=\"hljs-number\">28</span> <span class=\"hljs-number\">2021</span> <span class=\"hljs-number\">50</span>x.html_<br>_<span class=\"hljs-literal\">-rw-r--r--</span>. <span class=\"hljs-number\">1</span> root root <span class=\"hljs-number\">615</span> <span class=\"hljs-number\">12</span>月 <span class=\"hljs-number\">28</span> <span class=\"hljs-number\">2021</span> index.html_<br><br><span class=\"hljs-comment\"># 5.进入该目录，并随意修改index.html内容</span><br><span class=\"hljs-built_in\">cd</span> /var/lib/docker/volumes/html/_data<br>vi index.html<br><br><span class=\"hljs-comment\"># 6.打开页面，查看效果</span><br><br><span class=\"hljs-comment\"># 7.进入容器内部，查看/usr/share/nginx/html目录内的文件是否变化</span><br>docker exec <span class=\"hljs-literal\">-it</span> nginx bash<br></code></pre></td></tr></table></figure>\n<p>教学<strong>演示环节</strong>：演示一下 MySQL 的匿名数据卷</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-comment\"># 1.查看MySQL容器详细信息</span><br>docker inspect mysql<br><span class=\"hljs-comment\"># 关注其中.Config.Volumes部分和.Mounts部分</span><br></code></pre></td></tr></table></figure>\n<p>我们关注两部分内容，第一是 <code>.Config.Volumes</code> 部分：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>  <span class=\"hljs-attr\">&quot;Config&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-comment\">// ... 略</span><br>    <span class=\"hljs-attr\">&quot;Volumes&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>      <span class=\"hljs-attr\">&quot;/var/lib/mysql&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><span class=\"hljs-punctuation\">&#125;</span><br>    <span class=\"hljs-punctuation\">&#125;</span><br>    <span class=\"hljs-comment\">// ... 略</span><br>  <span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n<p>可以发现这个容器声明了一个本地目录，需要挂载数据卷，但是<strong>数据卷未定义</strong>。这就是匿名卷。</p>\n<p>然后，我们再看结果中的 <code>.Mounts</code> 部分：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>  <span class=\"hljs-attr\">&quot;Mounts&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><br>    <span class=\"hljs-punctuation\">&#123;</span><br>      <span class=\"hljs-attr\">&quot;Type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;volume&quot;</span><span class=\"hljs-punctuation\">,</span><br>      <span class=\"hljs-attr\">&quot;Name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f&quot;</span><span class=\"hljs-punctuation\">,</span><br>      <span class=\"hljs-attr\">&quot;Source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;/var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data&quot;</span><span class=\"hljs-punctuation\">,</span><br>      <span class=\"hljs-attr\">&quot;Destination&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;/var/lib/mysql&quot;</span><span class=\"hljs-punctuation\">,</span><br>      <span class=\"hljs-attr\">&quot;Driver&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;local&quot;</span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-punctuation\">&#125;</span><br>  <span class=\"hljs-punctuation\">]</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n<p>可以发现，其中有几个关键属性：</p>\n<ul>\n<li>Name：数据卷名称。由于定义容器未设置容器名，这里的就是匿名卷自动生成的名字，一串 hash 值。</li>\n<li>Source：宿主机目录</li>\n<li>Destination : 容器内的目录</li>\n</ul>\n<p>上述配置是将容器内的 <code>/var/lib/mysql</code> 这个目录，与数据卷 <code>29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f</code> 挂载。于是在宿主机中就有了 <code>/var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data</code> 这个目录。这就是匿名数据卷对应的目录，其使用方式与普通数据卷没有差别。</p>\n<p>接下来，可以查看该目录下的 MySQL 的 data 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">ls</span> -l /var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data<br></code></pre></td></tr></table></figure>\n<p>注意：每一个不同的镜像，将来创建容器后内部有哪些目录可以挂载，可以参考 DockerHub 对应的页面</p>\n<h4 id=\"2.2.3.挂载本地目录或文件\">2.2.3.挂载本地目录或文件<a title=\"#2.2.3.挂载本地目录或文件\" href=\"#2.2.3.挂载本地目录或文件\"></a></h4>\n<p>可以发现，数据卷的目录结构较深，如果我们去操作数据卷目录会不太方便。在很多情况下，我们会直接将容器目录与宿主机指定目录挂载。挂载语法与数据卷类似：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 挂载本地目录</span><br>-v 本地目录:容器内目录<br><span class=\"hljs-comment\"># 挂载本地文件</span><br>-v 本地文件:容器内文件<br></code></pre></td></tr></table></figure>\n<p><strong>注意</strong>：本地目录或文件必须以 <code>/</code> 或 <code>./</code> 开头，如果直接以名字开头，会被识别为数据卷名而非本地目录名。</p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">-v mysql:/var/lib/mysql <span class=\"hljs-comment\"># 会被识别为一个数据卷叫mysql，运行时会自动创建这个数据卷</span><br>-v ./mysql:/var/lib/mysql <span class=\"hljs-comment\"># 会被识别为当前目录下的mysql目录，运行时如果不存在会创建目录</span><br></code></pre></td></tr></table></figure>\n<p><strong>教学演示</strong>，删除并重新创建 mysql 容器，并完成本地目录挂载：</p>\n<ul>\n<li>挂载 <code>/root/mysql/data</code> 到容器内的 <code>/var/lib/mysql</code> 目录</li>\n<li>挂载 <code>/root/mysql/init</code> 到容器内的 <code>/docker-entrypoint-initdb.d</code> 目录（初始化的 SQL 脚本目录）</li>\n<li>挂载 <code>/root/mysql/conf</code> 到容器内的 <code>/etc/mysql/conf.d</code> 目录（这个是 MySQL 配置文件目录）</li>\n</ul>\n<p>在课前资料中已经准备好了 mysql 的 <code>init</code> 目录和 <code>conf</code> 目录：</p>\n<p><img src=\"https://cdn.xf233.io/static/docker/static/KPD5btJQ1oYNJ0x4Dqnc7AjCn7g.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>以及对应的初始化 SQL 脚本和配置文件：</p>\n<p><img src=\"https://cdn.xf233.io/static/docker/static/MC3Xb7gcYo3IAix5wHMcfdImnKd.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://cdn.xf233.io/static/docker/static/TWpQbXl6wod9pVxc0iRctpCinUh.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>其中，hm.cnf 主要是配置了 MySQL 的默认编码，改为 utf8mb4；而 hmall.sql 则是后面我们要用到的黑马商城项目的初始化 SQL 脚本。</p>\n<p>我们直接将整个 mysql 目录上传至虚拟机的 <code>/root</code> 目录下：</p>\n<p><img src=\"https://cdn.xf233.io/static/docker/static/PZNBbbpDEoK1fCxI0ygcXbUfnGb.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>接下来，我们演示本地目录挂载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 1.删除原来的MySQL容器</span><br>docker <span class=\"hljs-built_in\">rm</span> -f mysql<br><br><span class=\"hljs-comment\"># 2.进入root目录</span><br><span class=\"hljs-built_in\">cd</span> ~<br><br><span class=\"hljs-comment\"># 3.创建并运行新mysql容器，挂载本地目录</span><br>docker run -d \\<br>  --name mysql \\<br>  -p 3306:3306 \\<br>  -e TZ=Asia/Shanghai \\<br>  -e MYSQL_ROOT_PASSWORD=123 \\<br>  -v ./mysql/data:/var/lib/mysql \\<br>  -v ./mysql/conf:/etc/mysql/conf.d \\<br>  -v ./mysql/init:/docker-entrypoint-initdb.d \\<br>  mysql<br><br><span class=\"hljs-comment\"># 4.查看root目录，可以发现~/mysql/data目录已经自动创建好了</span><br><span class=\"hljs-built_in\">ls</span> -l mysql<br><span class=\"hljs-comment\"># 结果：</span><br>_总用量 4_<br>_drwxr-xr-x. 2 root    root   20 5月  19 15:11 conf_<br>_drwxr-xr-x. 7 polkitd root 4096 5月  19 15:11 data_<br>_drwxr-xr-x. 2 root    root   23 5月  19 15:11 init_<br><br><span class=\"hljs-comment\"># 查看data目录，会发现里面有大量数据库数据，说明数据库完成了初始化</span><br><span class=\"hljs-built_in\">ls</span> -l data<br><br><span class=\"hljs-comment\"># 5.查看MySQL容器内数据</span><br><span class=\"hljs-comment\"># 5.1.进入MySQL</span><br>docker <span class=\"hljs-built_in\">exec</span> -it mysql mysql -uroot -p123<br><span class=\"hljs-comment\"># 5.2.查看编码表</span><br>show variables like <span class=\"hljs-string\">&quot;%char%&quot;</span>;<br><span class=\"hljs-comment\"># 5.3.结果，发现编码是utf8mb4没有问题</span><br>_+--------------------------+--------------------------------+_<br>_| Variable_name            | Value                          |_<br>_+--------------------------+--------------------------------+_<br>_| character_set_client     | utf8mb4                        |_<br>_| character_set_connection | utf8mb4                        |_<br>_| character_set_database   | utf8mb4                        |_<br>_| character_set_filesystem | binary                         |_<br>_| character_set_results    | utf8mb4                        |_<br>_| character_set_server     | utf8mb4                        |_<br>_| character_set_system     | utf8mb3                        |_<br>_| character_sets_dir       | /usr/share/mysql-8.0/charsets/ |_<br>+--------------------------+--------------------------------+<br><br><span class=\"hljs-comment\"># 6.查看数据</span><br><span class=\"hljs-comment\"># 6.1.查看数据库</span><br>show databases;<br><span class=\"hljs-comment\"># 结果，hmall是黑马商城数据库</span><br>_+--------------------+_<br>_| Database           |_<br>_+--------------------+_<br>_| hmall              |_<br>_| information_schema |_<br>_| mysql              |_<br>_| performance_schema |_<br>_| sys                |_<br>_+--------------------+_<br>5 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><span class=\"hljs-comment\"># 6.2.切换到hmall数据库</span><br>use hmall;<br><span class=\"hljs-comment\"># 6.3.查看表</span><br>show tables;<br><span class=\"hljs-comment\"># 结果：</span><br>_+-----------------+_<br>_| Tables_in_hmall |_<br>_+-----------------+_<br>_| address         |_<br>_| cart            |_<br>_| item            |_<br>_| order           |_<br>_| order_detail    |_<br>_| order_logistics |_<br>_| pay_order       |_<br>_| user            |_<br>_+-----------------+_<br><span class=\"hljs-comment\"># 6.4.查看address表数据</span><br>_+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+_<br>_| <span class=\"hljs-built_in\">id</span> | user_id | province | city   | town     | mobile      | street        | contact   | is_default | notes |_<br>_+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+_<br>_| 59 |       1 | 北京     | 北京   | 朝阳区    | 13900112222 | 金燕龙办公楼   | 李佳诚    | 0          | NULL  |_<br>_| 60 |       1 | 北京     | 北京   | 朝阳区    | 13700221122 | 修正大厦       | 李佳红    | 0          | NULL  |_<br>_| 61 |       1 | 上海     | 上海   | 浦东新区  | 13301212233 | 航头镇航头路   | 李佳星    | 1          | NULL  |_<br>_| 63 |       1 | 广东     | 佛山   | 永春      | 13301212233 | 永春武馆       | 李晓龙    | 0          | NULL  |_<br>_+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+_<br>_4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)_<br></code></pre></td></tr></table></figure>\n<h3 id=\"2.3.镜像\">2.3.镜像<a title=\"#2.3.镜像\" href=\"#2.3.镜像\"></a></h3>\n<p>前面我们一直在使用别人准备好的镜像，那如果我要部署一个 Java 项目，把它打包为一个镜像该怎么做呢？</p>\n<h4 id=\"2.3.1.镜像结构\">2.3.1.镜像结构<a title=\"#2.3.1.镜像结构\" href=\"#2.3.1.镜像结构\"></a></h4>\n<p>要想自己构建镜像，必须先了解镜像的结构。</p>\n<p>之前我们说过，镜像之所以能让我们快速跨操作系统部署应用而忽略其运行环境、配置，就是因为镜像中包含了程序运行需要的系统函数库、环境、配置、依赖。</p>\n<p>因此，自定义镜像本质就是依次准备好程序运行的基础环境、依赖、应用本身、运行配置等文件，并且打包而成。</p>\n<p>举个例子，我们要从 0 部署一个 Java 应用，大概流程是这样：</p>\n<ul>\n<li>准备一个 linux 服务（CentOS 或者 Ubuntu 均可）</li>\n<li>安装并配置 JDK</li>\n<li>上传 Jar 包</li>\n<li>运行 jar 包</li>\n</ul>\n<p>那因此，我们打包镜像也是分成这么几步：</p>\n<ul>\n<li>准备 Linux 运行环境（java 项目并不需要完整的操作系统，仅仅是基础运行环境即可）</li>\n<li>安装并配置 JDK</li>\n<li>拷贝 jar 包</li>\n<li>配置启动脚本</li>\n</ul>\n<p>上述步骤中的每一次操作其实都是在生产一些文件（系统运行环境、函数库、配置最终都是磁盘文件），所以<strong>镜像就是一堆文件的集合</strong>。</p>\n<p>但需要注意的是，镜像文件不是随意堆放的，而是按照操作的步骤分层叠加而成，每一层形成的文件都会单独打包并标记一个唯一 id，称为 <strong>Layer</strong>（<strong>层</strong>）。这样，如果我们构建时用到的某些层其他人已经制作过，就可以直接拷贝使用这些层，而不用重复制作。</p>\n<p>例如，第一步中需要的 Linux 运行环境，通用性就很强，所以 Docker 官方就制作了这样的只包含 Linux 运行环境的镜像。我们在制作 java 镜像时，就无需重复制作，直接使用 Docker 官方提供的 CentOS 或 Ubuntu 镜像作为基础镜像。然后再搭建其它层即可，这样逐层搭建，最终整个 Java 项目的镜像结构如图所示：</p>\n<p><img src=\"https://cdn.xf233.io/static/docker/static/HMEkbXMRyoVCY9xk7Kec3QqunOd.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h4 id=\"2.3.2.dockerfile\">2.3.2.Dockerfile<a title=\"#2.3.2.dockerfile\" href=\"#2.3.2.dockerfile\"></a></h4>\n<p>由于制作镜像的过程中，需要逐层处理和打包，比较复杂，所以 Docker 就提供了自动打包镜像的功能。我们只需要将打包的过程，每一层要做的事情用固定的语法写下来，交给 Docker 去执行即可。</p>\n<p>而这种记录镜像结构的文件就称为 <strong>Dockerfile</strong>，其对应的语法可以参考官方文档：</p>\n<p><a href=\"https://docs.docker.com/engine/reference/builder/\" target=\"_blank\">https://docs.docker.com/engine/reference/builder/</a></p>\n<p>其中的语法比较多，比较常用的有：</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th><strong>指令</strong></th>\n<th><strong>说明</strong></th>\n<th><strong>示例</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>MAINTAINER</strong></td>\n<td>镜像维护者的姓名和邮箱地址（非必须）</td>\n<td><code>MAINTAINER sufeng admin@xf233.io</code></td>\n</tr>\n<tr>\n<td><strong>FROM</strong></td>\n<td>指定基础镜像</td>\n<td><code>FROM centos:6</code></td>\n</tr>\n<tr>\n<td><strong>WORKDIR</strong></td>\n<td>指定在创建容器后， 终端默认登录进来的工作目录</td>\n<td><code>WORKDIR $CATALINA_HOME</code> <code>ENV CATALINA_HOME /usr/local/tomcat </code></td>\n</tr>\n<tr>\n<td><strong>ENV</strong></td>\n<td>设置环境变量，可在后面指令使用</td>\n<td><code>ENV key value</code></td>\n</tr>\n<tr>\n<td><strong>COPY</strong></td>\n<td>拷贝本地文件到镜像的指定目录</td>\n<td><code>COPY ./xx.jar /tmp/app.jar</code></td>\n</tr>\n<tr>\n<td><strong>ADD</strong></td>\n<td>将宿主机目录下（或远程文件）的文件拷贝进镜像，且会自动处理URL和解压tar压缩包。</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>RUN</strong></td>\n<td>执行 Linux 的 shell 命令，一般是安装过程的命令</td>\n<td><code>RUN yum install gcc</code></td>\n</tr>\n<tr>\n<td><strong>EXPOSE</strong></td>\n<td>指定容器运行时监听的端口，是给镜像使用者看的</td>\n<td><code>EXPOSE 8080</code></td>\n</tr>\n<tr>\n<td><strong>USER</strong></td>\n<td>指定该镜像以用户去执行，如果不指定，默认是<code>root</code></td>\n<td>（一般不修改该配置）</td>\n</tr>\n<tr>\n<td><strong>ENTRYPOINT</strong></td>\n<td>镜像中应用的启动命令，容器运行时调用</td>\n<td><code>ENTRYPOINT java -jar xx.ja</code></td>\n</tr>\n<tr>\n<td><strong>CMD</strong></td>\n<td>指定容器启动后要干的事情</td>\n<td><code>CMD echo &quot;hello world&quot;</code></td>\n</tr>\n</tbody>\n</table></div></div><p>例如，要基于 Ubuntu 镜像来构建一个 Java 应用，其 Dockerfile 内容如下：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-comment\"># 指定基础镜像</span><br><span class=\"hljs-keyword\">FROM</span> ubuntu:<span class=\"hljs-number\">16.04</span><br><span class=\"hljs-comment\"># 配置环境变量，JDK的安装目录、容器内时区</span><br><span class=\"hljs-keyword\">ENV</span> JAVA_DIR=/usr/local<br><span class=\"hljs-keyword\">ENV</span> TZ=Asia/Shanghai<br><span class=\"hljs-comment\"># 拷贝jdk和java项目的包</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> ./jdk8.tar.gz <span class=\"hljs-variable\">$JAVA_DIR</span>/</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> ./docker-demo.jar /tmp/app.jar</span><br><span class=\"hljs-comment\"># 设定时区</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">ln</span> -snf /usr/share/zoneinfo/<span class=\"hljs-variable\">$TZ</span> /etc/localtime &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$TZ</span> &gt; /etc/timezone</span><br><span class=\"hljs-comment\"># 安装JDK</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$JAVA_DIR</span> \\</span><br><span class=\"language-bash\"> &amp;&amp; tar -xf ./jdk8.tar.gz \\</span><br><span class=\"language-bash\"> &amp;&amp; <span class=\"hljs-built_in\">mv</span> ./jdk1.8.0_144 ./java8</span><br><span class=\"hljs-comment\"># 配置环境变量</span><br><span class=\"hljs-keyword\">ENV</span> JAVA_HOME=$JAVA_DIR/java8<br><span class=\"hljs-keyword\">ENV</span> PATH=$PATH:$JAVA_HOME/bin<br><span class=\"hljs-comment\"># 指定项目监听的端口</span><br><span class=\"hljs-keyword\">EXPOSE</span> <span class=\"hljs-number\">8080</span><br><span class=\"hljs-comment\"># 入口，java项目的启动命令</span><br><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;java&quot;</span>, <span class=\"hljs-string\">&quot;-jar&quot;</span>, <span class=\"hljs-string\">&quot;/app.jar&quot;</span>]</span><br></code></pre></td></tr></table></figure>\n<p>同学们思考一下：以后我们会有很多很多 java 项目需要打包为镜像，他们都需要 Linux 系统环境、JDK 环境这两层，只有上面的 3 层不同（因为 jar 包不同）。如果每次制作 java 镜像都重复制作前两层镜像，是不是很麻烦。</p>\n<p>所以，就有人提供了基础的系统加 JDK 环境，我们在此基础上制作 java 镜像，就可以省去 JDK 的配置了：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-comment\"># 基础镜像</span><br><span class=\"hljs-keyword\">FROM</span> openjdk:<span class=\"hljs-number\">11.0</span>-jre-buster<br><span class=\"hljs-comment\"># 设定时区</span><br><span class=\"hljs-keyword\">ENV</span> TZ=Asia/Shanghai<br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">ln</span> -snf /usr/share/zoneinfo/<span class=\"hljs-variable\">$TZ</span> /etc/localtime &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$TZ</span> &gt; /etc/timezone</span><br><span class=\"hljs-comment\"># 拷贝jar包</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> docker-demo.jar /app.jar</span><br><span class=\"hljs-comment\"># 入口</span><br><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;java&quot;</span>, <span class=\"hljs-string\">&quot;-jar&quot;</span>, <span class=\"hljs-string\">&quot;/app.jar&quot;</span>]</span><br></code></pre></td></tr></table></figure>\n<p>是不是简单多了。</p>\n<h4 id=\"2.3.3.构建镜像\">2.3.3.构建镜像<a title=\"#2.3.3.构建镜像\" href=\"#2.3.3.构建镜像\"></a></h4>\n<p>当 Dockerfile 文件写好以后，就可以利用命令来构建镜像了。</p>\n<p>在课前资料中，我们准备好了一个 demo 项目及对应的 Dockerfile：</p>\n<p><img src=\"https://cdn.xf233.io/static/docker/static/IaXXbRyruofsyqxkXy3cuJBinuf.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>首先，我们将课前资料提供的 <code>docker-demo.jar</code> 包以及 <code>Dockerfile</code> 拷贝到虚拟机的 <code>/root/demo</code> 目录：</p>\n<p><img src=\"https://cdn.xf233.io/static/docker/static/DaNxbwN84o7mElx7p48cQSSSnre.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>然后，执行命令，构建镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 进入镜像目录</span><br><span class=\"hljs-built_in\">cd</span> /root/demo<br><span class=\"hljs-comment\"># 开始构建</span><br>docker build -t docker-demo:1.0 .<br></code></pre></td></tr></table></figure>\n<p>命令说明：</p>\n<ul>\n<li><code>docker build </code>: 就是构建一个 docker 镜像</li>\n<li><code>-t docker-demo:1.0</code> ：<code>-t</code> 参数是指定镜像的名称（<code>repository</code> 和 <code>tag</code>）</li>\n<li><code>.</code> : 最后的点是指构建时 Dockerfile 所在路径，由于我们进入了 demo 目录，所以指定的是 <code>.</code> 代表当前目录，也可以直接指定 Dockerfile 目录：</li>\n</ul>\n<h4 id=\"2.3.4.直接指定-dockerfile-目录\">2.3.4.直接指定 Dockerfile 目录<a title=\"#2.3.4.直接指定-dockerfile-目录\" href=\"#2.3.4.直接指定-dockerfile-目录\"></a></h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\"><br>docker build -t docker-demo:1.0 /root/demo<br><br></code></pre></td></tr></table></figure>\n<p>结果：</p>\n<p><img src=\"https://cdn.xf233.io/static/docker/static/GDj2bsx1soD4yux7xKZcWpz1nhe.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>查看镜像列表：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 查看镜像列表：</span><br>docker images<br><span class=\"hljs-comment\">## 结果</span><br>_REPOSITORY    TAG       IMAGE ID       CREATED          SIZE_<br>_docker-demo   1.0       d6ab0b9e64b9   27 minutes ago   327MB_<br>_nginx         latest    605c77e624dd   16 months ago    141MB_<br>_mysql         latest    3218b38490ce   17 months ago    516MB_<br></code></pre></td></tr></table></figure>\n<p>然后尝试运行该镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 1.创建并运行容器</span><br>docker run -d --name <span class=\"hljs-built_in\">dd</span> -p 8090:8090 docker-demo:1.0<br><span class=\"hljs-comment\">## 2.查看容器</span><br>dps<br>_<span class=\"hljs-comment\"># 结果_</span><br>_CONTAINER ID   IMAGE             PORTS                                                  STATUS         NAMES_<br>_78a000447b49   docker-demo:1.0   0.0.0.0:8080-&gt;8080/tcp, :::8090-&gt;8090/tcp              Up 2 seconds   dd_<br>_f63cfead8502   mysql             0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   Up 2 hours     mysql_<br><br><span class=\"hljs-comment\">## 3.访问</span><br>curl localhost:8080/hello/count<br>_<span class=\"hljs-comment\"># 结果：_</span><br>_&lt;h5&gt;欢迎访问黑马商城, 这是您第1次访问&lt;h5&gt;_<br></code></pre></td></tr></table></figure>\n<h3 id=\"2.4.网络\">2.4.网络<a title=\"#2.4.网络\" href=\"#2.4.网络\"></a></h3>\n<p>上节课我们创建了一个 Java 项目的容器，而 Java 项目往往需要访问其它各种中间件，例如 MySQL、Redis 等。现在，我们的容器之间能否互相访问呢？我们来测试一下</p>\n<p>首先，我们查看下 MySQL 容器的详细信息，重点关注其中的网络 IP 地址：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 1.用基本命令，寻找Networks.bridge.IPAddress属性</span><br>docker inspect mysql<br><span class=\"hljs-comment\"># 也可以使用format过滤结果</span><br>docker inspect --format=<span class=\"hljs-string\">&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;println .IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> mysql<br><span class=\"hljs-comment\"># 得到IP地址如下：</span><br>172.17.0.2<br><br><span class=\"hljs-comment\"># 2.然后通过命令进入dd容器</span><br>docker <span class=\"hljs-built_in\">exec</span> -it <span class=\"hljs-built_in\">dd</span> bash<br><br><span class=\"hljs-comment\"># 3.在容器内，通过ping命令测试网络</span><br>ping 172.17.0.2<br>_<span class=\"hljs-comment\"># 结果_</span><br>_PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data._<br>_64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.053 ms_<br>_64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.059 ms_<br>_64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.058 ms_<br></code></pre></td></tr></table></figure>\n<p>发现可以互联，没有问题。</p>\n<p>但是，容器的网络 IP 其实是一个虚拟的 IP，其值并不固定与某一个容器绑定，如果我们在开发时写死某个 IP，而在部署时很可能 MySQL 容器的 IP 会发生变化，连接会失败。</p>\n<p>所以，我们必须借助于 docker 的网络功能来解决这个问题，官方文档：</p>\n<p><a href=\"https://docs.docker.com/engine/reference/commandline/network/\" target=\"_blank\">https://docs.docker.com/engine/reference/commandline/network/</a></p>\n<h4 id=\"2.4.1.常见命令\">2.4.1.常见命令<a title=\"#2.4.1.常见命令\" href=\"#2.4.1.常见命令\"></a></h4>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th><strong>命令</strong></th>\n<th><strong>说明</strong></th>\n<th><strong>文档地址</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>docker network create</td>\n<td>创建一个网络</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/network_create/\" target=\"_blank\">docker network create</a></td>\n</tr>\n<tr>\n<td>docker network ls</td>\n<td>查看所有网络</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/network_ls/\" target=\"_blank\">docs.docker.com</a></td>\n</tr>\n<tr>\n<td>docker network rm</td>\n<td>删除指定网络</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/network_rm/\" target=\"_blank\">docs.docker.com</a></td>\n</tr>\n<tr>\n<td>docker network prune</td>\n<td>清除未使用的网络</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/network_prune/\" target=\"_blank\">docs.docker.com</a></td>\n</tr>\n<tr>\n<td>docker network connect</td>\n<td>使指定容器连接加入某网络</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/network_connect/\" target=\"_blank\">docs.docker.com</a></td>\n</tr>\n<tr>\n<td>docker network disconnect</td>\n<td>使指定容器连接离开某网络</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/network_disconnect/\" target=\"_blank\">docker network disconnect</a></td>\n</tr>\n<tr>\n<td>docker network inspect</td>\n<td>查看网络详细信息</td>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/network_inspect/\" target=\"_blank\">docker network inspect</a></td>\n</tr>\n</tbody>\n</table></div></div><h4 id=\"2.4.2.教学演示：自定义网络\">2.4.2.教学演示：自定义网络<a title=\"#2.4.2.教学演示：自定义网络\" href=\"#2.4.2.教学演示：自定义网络\"></a></h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 1.首先通过命令创建一个网络</span><br>docker network create hmall<br><br><span class=\"hljs-comment\">## 2.然后查看网络</span><br>docker network <span class=\"hljs-built_in\">ls</span><br><span class=\"hljs-comment\">## 结果：</span><br>_NETWORK ID     NAME      DRIVER    SCOPE_<br>_639bc44d0a87   bridge    bridge    local_<br>_403f16ec62a2   hmall     bridge    local_<br>_0dc0f72a0fbb   host      host      local_<br>_cd8d3e8df47b   none      null      local_<br><span class=\"hljs-comment\">## 其中，除了hmall以外，其它都是默认的网络</span><br><br><span class=\"hljs-comment\">## 3.让dd和mysql都加入该网络，注意，在加入网络时可以通过--alias给容器起别名</span><br><span class=\"hljs-comment\">## 这样该网络内的其它容器可以用别名互相访问！</span><br><span class=\"hljs-comment\">## 3.1.mysql容器，指定别名为db，另外每一个容器都有一个别名是容器名</span><br>docker network connect hmall mysql --<span class=\"hljs-built_in\">alias</span> db<br><span class=\"hljs-comment\">## 3.2.db容器，也就是我们的java项目</span><br>docker network connect hmall <span class=\"hljs-built_in\">dd</span><br><br><span class=\"hljs-comment\">## 4.进入dd容器，尝试利用别名访问db</span><br><span class=\"hljs-comment\">## 4.1.进入容器</span><br>docker <span class=\"hljs-built_in\">exec</span> -it <span class=\"hljs-built_in\">dd</span> bash<br><span class=\"hljs-comment\">## 4.2.用db别名访问</span><br>ping db<br><span class=\"hljs-comment\">## 结果</span><br>_PING db (172.18.0.2) 56(84) bytes of data._<br>_64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 time=0.070 ms_<br>_64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 time=0.056 ms_<br><span class=\"hljs-comment\">## 4.3.用容器名访问</span><br>ping mysql<br><span class=\"hljs-comment\">## 结果：</span><br>_PING mysql (172.18.0.2) 56(84) bytes of data._<br>_64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 time=0.044 ms_<br>_64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 time=0.054 ms_<br></code></pre></td></tr></table></figure>\n<p>OK，现在无需记住 IP 地址也可以实现容器互联了。</p>\n<h4 id=\"2.4.3.总结：\">2.4.3.总结：<a title=\"#2.4.3.总结：\" href=\"#2.4.3.总结：\"></a></h4>\n<ul>\n<li>在自定义网络中，可以给容器起多个别名，默认的别名是容器名本身</li>\n<li>在同一个自定义网络中的容器，可以通过别名互相访问</li>\n</ul>\n<h2 id=\"3.dockercompose\">3.DockerCompose<a title=\"#3.dockercompose\" href=\"#3.dockercompose\"></a></h2>\n<p>大家可以看到，我们部署一个简单的 java 项目，其中包含 3 个容器：</p>\n<ul>\n<li>MySQL</li>\n<li>Nginx</li>\n<li>Java 项目</li>\n</ul>\n<p>而稍微复杂的项目，其中还会有各种各样的其它中间件，需要部署的东西远不止 3 个。如果还像之前那样手动的逐一部署，就太麻烦了。</p>\n<p>而 Docker Compose 就可以帮助我们实现<strong>多个相互关联的 Docker 容器的快速部署</strong>。它允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器。</p>\n<h3 id=\"3.1.基本语法\">3.1.基本语法<a title=\"#3.1.基本语法\" href=\"#3.1.基本语法\"></a></h3>\n<p>docker-compose.yml 文件的基本语法可以参考官方文档：</p>\n<p>docker-compose 文件中可以定义多个相互关联的应用容器，每一个应用容器被称为一个服务（service）。由于 service 就是在定义某个应用的运行时参数，因此与 <code>docker run</code> 参数非常相似。</p>\n<p>举例来说，用 docker run 部署 MySQL 的命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker run -d \\<br>  --name mysql \\<br>  -p 3306:3306 \\<br>  -e TZ=Asia/Shanghai \\<br>  -e MYSQL_ROOT_PASSWORD=123 \\<br>  -v ./mysql/data:/var/lib/mysql \\<br>  -v ./mysql/conf:/etc/mysql/conf.d \\<br>  -v ./mysql/init:/docker-entrypoint-initdb.d \\<br>  --network hmall<br>  mysql<br></code></pre></td></tr></table></figure>\n<p>如果用 <code>docker-compose.yml</code> 文件来定义，就是这样：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&quot;3.8&quot;</span><br><br><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-attr\">mysql:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">mysql</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">mysql</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;3306:3306&quot;</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-attr\">TZ:</span> <span class=\"hljs-string\">Asia/Shanghai</span><br>      <span class=\"hljs-attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"hljs-number\">123</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;./mysql/data:/var/lib/mysql&quot;</span><br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">new</span><br><span class=\"hljs-attr\">networks:</span><br>  <span class=\"hljs-attr\">new:</span><br>    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">hmall</span><br></code></pre></td></tr></table></figure>\n<p>对比如下：</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th><strong>docker run 参数</strong></th>\n<th><strong>docker compose 指令</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>–name</td>\n<td>container_name</td>\n<td>容器名称</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>ports</td>\n<td>端口映射</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>environment</td>\n<td>环境变量</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>volumes</td>\n<td>数据卷配置</td>\n</tr>\n<tr>\n<td>–network</td>\n<td>networks</td>\n<td>网络</td>\n</tr>\n</tbody>\n</table></div></div><p>明白了其中的对应关系，相信编写 <code>docker-compose</code> 文件应该难不倒大家。</p>\n<p>黑马商城部署文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&quot;3.8&quot;</span><br><br><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-attr\">mysql:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">mysql</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">mysql</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;3306:3306&quot;</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-attr\">TZ:</span> <span class=\"hljs-string\">Asia/Shanghai</span><br>      <span class=\"hljs-attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"hljs-number\">123</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;./mysql/data:/var/lib/mysql&quot;</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;./mysql/init:/docker-entrypoint-initdb.d&quot;</span><br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">hm-net</span><br>  <span class=\"hljs-attr\">hmall:</span><br>    <span class=\"hljs-attr\">build:</span> <br>      <span class=\"hljs-attr\">context:</span> <span class=\"hljs-string\">.</span><br>      <span class=\"hljs-attr\">dockerfile:</span> <span class=\"hljs-string\">Dockerfile</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">hmall</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;8080:8080&quot;</span><br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">hm-net</span><br>    <span class=\"hljs-attr\">depends_on:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">mysql</span><br>  <span class=\"hljs-attr\">nginx:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">nginx</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">nginx</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;18080:18080&quot;</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;18081:18081&quot;</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;./nginx/nginx.conf:/etc/nginx/nginx.conf&quot;</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;./nginx/html:/usr/share/nginx/html&quot;</span><br>    <span class=\"hljs-attr\">depends_on:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">hmall</span><br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">hm-net</span><br><span class=\"hljs-attr\">networks:</span><br>  <span class=\"hljs-attr\">hm-net:</span><br>    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">hmall</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"3.2.基础命令\">3.2.基础命令<a title=\"#3.2.基础命令\" href=\"#3.2.基础命令\"></a></h3>\n<p>编写好 docker-compose.yml 文件，就可以部署项目了。常见的命令：</p>\n<p>基本语法如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker compose [OPTIONS] [COMMAND]<br></code></pre></td></tr></table></figure>\n<p>其中，OPTIONS 和 COMMAND 都是可选参数，比较常见的有：</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th><strong>类型</strong></th>\n<th><strong>参数或指令</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Options</td>\n<td>-f</td>\n<td>指定 compose 文件的路径和名称</td>\n</tr>\n<tr>\n<td></td>\n<td>-p</td>\n<td>指定 project 名称。project 就是当前 compose 文件中设置的多个 service 的集合，是逻辑概念</td>\n</tr>\n<tr>\n<td>Commands</td>\n<td>up</td>\n<td>创建并启动所有 service 容器</td>\n</tr>\n<tr>\n<td></td>\n<td>down</td>\n<td>停止并移除所有容器、网络</td>\n</tr>\n<tr>\n<td></td>\n<td>ps</td>\n<td>列出所有启动的容器</td>\n</tr>\n<tr>\n<td></td>\n<td>logs</td>\n<td>查看指定容器的日志</td>\n</tr>\n<tr>\n<td></td>\n<td>stop</td>\n<td>停止容器</td>\n</tr>\n<tr>\n<td></td>\n<td>start</td>\n<td>启动容器</td>\n</tr>\n<tr>\n<td></td>\n<td>restart</td>\n<td>重启容器</td>\n</tr>\n<tr>\n<td></td>\n<td>top</td>\n<td>查看运行的进程</td>\n</tr>\n<tr>\n<td></td>\n<td>exec</td>\n<td>在指定的运行中容器中执行命令</td>\n</tr>\n</tbody>\n</table></div></div><p>教学演示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 1.进入root目录</span><br><span class=\"hljs-built_in\">cd</span> /root<br><br><span class=\"hljs-comment\">## 2.删除旧容器</span><br>docker <span class=\"hljs-built_in\">rm</span> -f $(docker ps -qa)<br><br><span class=\"hljs-comment\">## 3.删除hmall镜像</span><br>docker rmi hmall<br><br><span class=\"hljs-comment\">## 4.清空MySQL数据</span><br><span class=\"hljs-built_in\">rm</span> -rf mysql/data<br><br><span class=\"hljs-comment\">## 5.启动所有, -d 参数是后台启动</span><br>docker compose up -d<br><span class=\"hljs-comment\">## 结果：</span><br>_[+] Building 15.5s (8/8) FINISHED_<br>_ =&gt; [internal] load build definition from Dockerfile                                    0.0s_<br>_ =&gt; =&gt; transferring dockerfile: 358B                                                    0.0s_<br>_ =&gt; [internal] load .dockerignore                                                       0.0s_<br>_ =&gt; =&gt; transferring context: 2B                                                         0.0s_<br>_ =&gt; [internal] load metadata <span class=\"hljs-keyword\">for</span> docker.io/library/openjdk:11.0-jre-buster             15.4s_<br>_ =&gt; [1/3] FROM docker.io/library/openjdk:11.0-jre-buster@sha256:3546a17e6fb4ff4fa681c3  0.0s_<br>_ =&gt; [internal] load build context                                                       0.0s_<br>_ =&gt; =&gt; transferring context: 98B                                                        0.0s_<br>_ =&gt; CACHED [2/3] RUN <span class=\"hljs-built_in\">ln</span> -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; <span class=\"hljs-built_in\">echo</span>   0.0s_<br>_ =&gt; CACHED [3/3] COPY hm-service.jar /app.jar                                           0.0s_<br>_ =&gt; exporting to image                                                                  0.0s_<br>_ =&gt; =&gt; exporting layers                                                                 0.0s_<br>_ =&gt; =&gt; writing image sha256:32eebee16acde22550232f2eb80c69d2ce813ed099640e4cfed2193f71  0.0s_<br>_ =&gt; =&gt; naming to docker.io/library/root-hmall                                           0.0s_<br>_[+] Running 4/4_<br>_ ✔ Network hmall    Created                                                             0.2s_<br>_ ✔ Container mysql  Started                                                             0.5s_<br>_ ✔ Container hmall  Started                                                             0.9s_<br>_ ✔ Container nginx  Started     _                                                        1.5s<br><br><span class=\"hljs-comment\">## 6.查看镜像</span><br>docker compose images<br><span class=\"hljs-comment\">## 结果</span><br>_CONTAINER           REPOSITORY          TAG                 IMAGE ID            SIZE_<br>_hmall               root-hmall          latest              32eebee16acd        362MB_<br>_mysql               mysql               latest              3218b38490ce        516MB_<br>_nginx               nginx               latest              605c77e624dd        141MB_<br><br><span class=\"hljs-comment\">## 7.查看容器</span><br>docker compose ps<br><span class=\"hljs-comment\">## 结果</span><br>_NAME                IMAGE               COMMAND                  SERVICE             CREATED             STATUS              PORTS_<br>_hmall               root-hmall          <span class=\"hljs-string\">&quot;java -jar /app.jar&quot;</span>     hmall               54 seconds ago      Up 52 seconds       0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp_<br>_mysql               mysql               <span class=\"hljs-string\">&quot;docker-entrypoint.s…&quot;</span>   mysql               54 seconds ago      Up 53 seconds       0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp_<br>_nginx               nginx               <span class=\"hljs-string\">&quot;/docker-entrypoint.…&quot;</span>   nginx               54 seconds ago      Up 52 seconds       80/tcp, 0.0.0.0:18080-18081-&gt;18080-18081/tcp, :::18080-18081-&gt;18080-18081/tcp_<br></code></pre></td></tr></table></figure>\n<p>打开浏览器，访问：<a href=\"http://yourIp:8080\" target=\"_blank\">http://yourIp:8080</a></p>\n","prev":{"title":"【Java 基础】类与对象","link":"2024/03/04/Java/Java 基础/面向对象/02-【Java 基础】类与对象"},"next":{"title":"『Echarts』完结","link":"2024/02/02/Web/ECharts/07-『Echarts』完结"},"plink":"http://example.com/2024/02/23/Docker/第三方分享笔记/Docker笔记/","toc":[{"id":"docker笔记","title":"Docker笔记","index":"1","children":[{"id":"1.快速入门","title":"1.快速入门","index":"1.1","children":[{"id":"1.1.部署-mysql","title":"1.1.部署 MySQL","index":"1.1.1"},{"id":"1.2.命令解读","title":"1.2.命令解读","index":"1.1.2"}]},{"id":"2.docker-基础","title":"2.Docker 基础","index":"1.2","children":[{"id":"2.1.常见命令","title":"2.1.常见命令","index":"1.2.1"},{"id":"2.2.数据卷","title":"2.2.数据卷","index":"1.2.2"},{"id":"2.3.镜像","title":"2.3.镜像","index":"1.2.3"},{"id":"2.4.网络","title":"2.4.网络","index":"1.2.4"}]},{"id":"3.dockercompose","title":"3.DockerCompose","index":"1.3","children":[{"id":"3.1.基本语法","title":"3.1.基本语法","index":"1.3.1"},{"id":"3.2.基础命令","title":"3.2.基础命令","index":"1.3.2"}]}]}],"reading_time":"8767 words in 58 min"}