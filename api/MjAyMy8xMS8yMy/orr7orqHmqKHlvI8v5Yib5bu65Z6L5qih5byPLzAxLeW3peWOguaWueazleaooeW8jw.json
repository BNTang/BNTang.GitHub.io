{"title":"工厂方法模式","date":"2023-11-23T14:42:37.000Z","date_formatted":{"ll":"Nov 23, 2023","L":"11/23/2023","MM-DD":"11-23"},"link":"2023/11/23/设计模式/创建型模式/01-工厂方法模式","tags":["创建型模式","设计模式"],"updated":"2023-11-25T17:26:36.750Z","content":"<h1 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h1>\n<h2 id=\"什么是工厂方法\">什么是工厂方法<a title=\"#什么是工厂方法\" href=\"#什么是工厂方法\"></a></h2>\n<p><strong>工厂方法</strong> 是一种 <code>创建型</code> 设计模式</p>\n<p>什么是 <code>创建型</code> 设计模式？</p>\n<blockquote>\n<p>创建型设计模式专注于处理对象创建机制，以合适的方式来创建对象。该模式通过控制对象的创建方式来解决问题。</p>\n</blockquote>\n<h2 id=\"工厂方法的作用\">工厂方法的作用<a title=\"#工厂方法的作用\" href=\"#工厂方法的作用\"></a></h2>\n<p>解决了在 <code>不指定具体类</code> 的情况下创建产品对象的问题，这句话要怎么理解呢？</p>\n<blockquote>\n<p>工厂方法模式通过让子类决定该创建的对象是什么，来达到将对象创建的过程封装的目的。</p>\n</blockquote>\n<p>工厂方法定义了一个方法，且必须使用该方法代替通过直接调用构造函数来创建对象（<code>new</code> 操作符）的方式。</p>\n<p>这个怎么理解呢？</p>\n<blockquote>\n<p>工厂方法模式将对象的创建委托给子类，子类实现工厂方法来创建对象。</p>\n</blockquote>\n<p>子类可重写该方法来更改将被创建的对象所属类。</p>\n<h1 id=\"示例\">示例<a title=\"#示例\" href=\"#示例\"></a></h1>\n<p>这里就以生成跨平台的 GUI 元素为例子，来说明工厂方法模式的使用。</p>\n<p>在本例中，按钮担任产品的角色，对话框担任创建者的角色。</p>\n<p>不同类型的对话框需要其各自类型的元素。因此我们可为每个对话框类型创建子类并重写其工厂方法。</p>\n<p>现在，每种对话框类型都将对合适的按钮类进行初始化。对话框基类使用其通用接口与对象进行交互，因此代码更改后仍能正常工作。</p>\n<h1 id=\"buttons\">buttons<a title=\"#buttons\" href=\"#buttons\"></a></h1>\n<p>buttons/Button.java: 通用产品接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@version</span> 1.0</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@description</span> 通用产品接口</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@since</span> 2023-11-23 23:10:54</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Button</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 渲染</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">render</span><span class=\"hljs-params\">()</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 点击</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onClick</span><span class=\"hljs-params\">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"html-button-产品\">Html Button 产品<a title=\"#html-button-产品\" href=\"#html-button-产品\"></a></h2>\n<p>buttons/HtmlButton.java: 具体产品</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@version</span> 1.0</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@description</span> HTML按钮</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@since</span> 2023-11-23 23:10:54</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HtmlButton</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Button</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">render</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;&lt;button&gt;Test Button&lt;/button&gt;&quot;</span>);<br>        onClick();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onClick</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Click! Button says - &#x27;Hello World!&#x27;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"windows-button-产品\">Windows Button 产品<a title=\"#windows-button-产品\" href=\"#windows-button-产品\"></a></h2>\n<p>buttons/WindowsButton.java: windows 按钮产品</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@version</span> 1.0</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@description</span> windows按钮</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@since</span> 2023-11-23 23:10:54</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WindowsButton</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Button</span> &#123;<br>    <span class=\"hljs-type\">JPanel</span> <span class=\"hljs-variable\">panel</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JPanel</span>();<br>    <span class=\"hljs-type\">JFrame</span> <span class=\"hljs-variable\">frame</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JFrame</span>();<br>    JButton button;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">render</span><span class=\"hljs-params\">()</span> &#123;<br>        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br>        <span class=\"hljs-type\">JLabel</span> <span class=\"hljs-variable\">label</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JLabel</span>(<span class=\"hljs-string\">&quot;Hello World!&quot;</span>);<br>        label.setOpaque(<span class=\"hljs-literal\">true</span>);<br>        label.setBackground(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Color</span>(<span class=\"hljs-number\">235</span>, <span class=\"hljs-number\">233</span>, <span class=\"hljs-number\">126</span>));<br>        label.setFont(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Font</span>(<span class=\"hljs-string\">&quot;Dialog&quot;</span>, Font.BOLD, <span class=\"hljs-number\">44</span>));<br>        label.setHorizontalAlignment(SwingConstants.CENTER);<br>        panel.setLayout(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FlowLayout</span>(FlowLayout.CENTER));<br>        frame.getContentPane().add(panel);<br>        panel.add(label);<br><br>        onClick();<br>        panel.add(button);<br><br>        frame.setSize(<span class=\"hljs-number\">320</span>, <span class=\"hljs-number\">200</span>);<br>        frame.setVisible(<span class=\"hljs-literal\">true</span>);<br>        onClick();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onClick</span><span class=\"hljs-params\">()</span> &#123;<br>        button = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JButton</span>(<span class=\"hljs-string\">&quot;Exit&quot;</span>);<br>        button.addActionListener(e -&gt; &#123;<br>            frame.setVisible(<span class=\"hljs-literal\">false</span>);<br>            System.exit(<span class=\"hljs-number\">0</span>);<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"factory\">factory<a title=\"#factory\" href=\"#factory\"></a></h1>\n<p>factory/Dialog.java: 创建者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@version</span> 1.0</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@description</span> 基本工厂类。请注意，&quot;工厂 &quot;只是该类的一个角色。它</span><br><span class=\"hljs-comment\"> * 应该有一些需要创建不同产品的核心业务逻辑。</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@since</span> 2023-11-23 23:14:36</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dialog</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">renderWindow</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// ... other code ...</span><br><br>        <span class=\"hljs-type\">Button</span> <span class=\"hljs-variable\">okButton</span> <span class=\"hljs-operator\">=</span> createButton();<br>        okButton.render();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * Subclasses will override this method in order to create specific button</span><br><span class=\"hljs-comment\">     * objects.</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> Button <span class=\"hljs-title function_\">createButton</span><span class=\"hljs-params\">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"html-dialog-创建者\">Html Dialog 创建者<a title=\"#html-dialog-创建者\" href=\"#html-dialog-创建者\"></a></h2>\n<p>factory/HtmlDialog.java: Html Dialog 具体创建者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@version</span> 1.0</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@description</span> HTML 对话框将生成 HTML 按钮。</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@since</span> 2023-11-23 23:14:36</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HtmlDialog</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Dialog</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Button <span class=\"hljs-title function_\">createButton</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HtmlButton</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"windows-dialog-创建者\">Windows Dialog 创建者<a title=\"#windows-dialog-创建者\" href=\"#windows-dialog-创建者\"></a></h2>\n<p>factory/WindowsDialog.java: Windows Dialog 具体创建者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@version</span> 1.0</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@description</span> Windows 对话框将生成 Windows 按钮。</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@since</span> 2023-11-23 23:16:45</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WindowsDialog</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Dialog</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Button <span class=\"hljs-title function_\">createButton</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WindowsButton</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"客户端代码\">客户端代码<a title=\"#客户端代码\" href=\"#客户端代码\"></a></h1>\n<p>Demo.java: 客户端代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@version</span> 1.0</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@description</span></span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@since</span> 2023-11-23 23:17:38</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Dialog dialog;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        configure();<br>        runBusinessLogic();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * The concrete factory is usually chosen depending on configuration or</span><br><span class=\"hljs-comment\">     * environment options.</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">configure</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (System.getProperty(<span class=\"hljs-string\">&quot;os.name&quot;</span>).equals(<span class=\"hljs-string\">&quot;Windows 10&quot;</span>)) &#123;<br>            dialog = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WindowsDialog</span>();<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            dialog = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HtmlDialog</span>();<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * All of the client code should work with factories and products through</span><br><span class=\"hljs-comment\">     * abstract interfaces. This way it does not care which factory it works</span><br><span class=\"hljs-comment\">     * with and what kind of product it returns.</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">runBusinessLogic</span><span class=\"hljs-params\">()</span> &#123;<br>        dialog.renderWindow();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"测试\">测试<a title=\"#测试\" href=\"#测试\"></a></h1>\n<p>因为我目前电脑是 windows 所以通过 configure() 方法选择了 WindowsDialog，然后运行 runBusinessLogic() 方法，最终输出了 windows 的按钮。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231125205747257-2069019753.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>如上的过程就是工厂方法模式的使用过程。我们再来进一步更加深刻的理解一下工厂方法模式。</p>\n<h1 id=\"意图\">意图<a title=\"#意图\" href=\"#意图\"></a></h1>\n<p>工厂方法模式是一种创建型设计模式，其在父类中提供一个创建对象的方法，允许子类决定实例化对象的类型。</p>\n<p>例如在我们现实生活当中，有物流公司，有很多种物流公司，那么通过如上介绍的工厂方法模式，我们可以将物流公司抽象成一个父类，然后子类继承父类，然后子类实现父类的抽象方法，这样就可以实现不同的物流公司，来实现不同的物流方式。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231125210138632-1306307860.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"问题\">问题<a title=\"#问题\" href=\"#问题\"></a></h1>\n<p>假设你正在开发一款物流管理应用。最初版本只能处理卡车运输，因此大部分代码都在位于名为 <code>卡车</code> 的类中。</p>\n<p>一段时间后，这款应用变得极受欢迎。你每天都能收到十几次来自海运公司的请求，希望应用能够支持海上物流功能。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231125210458015-2075750363.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<blockquote>\n<p>如果代码其余部分与现有类已经存在耦合关系，那么向程序中添加新类其实并没有那么容易。</p>\n</blockquote>\n<p>这可是个好消息。但是代码问题该如何处理呢？目前，大部分代码都与 <code>卡车</code> 类相关。在程序中添加 <code>轮船</code> 类需要修改全部代码。</p>\n<p>更糟糕的是，如果你以后需要在程序中支持另外一种运输方式，很可能需要再次对这些代码进行大幅修改。</p>\n<p>最后，你将不得不编写繁复的代码，根据不同的运输对象类，在应用中进行不同的处理。</p>\n<h1 id=\"解决方案\">解决方案<a title=\"#解决方案\" href=\"#解决方案\"></a></h1>\n<p>工厂方法模式建议使用特殊的工厂方法代替对于对象构造函数的直接调用（即使用 <code>new</code> 运算符）。</p>\n<p>不用担心，对象仍将通过 <code>new</code> 运算符创建，只是该运算符改在工厂方法中调用罢了。工厂方法返回的对象通常被称作 “产品”。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231125211019330-1271937069.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>子类可以修改工厂方法返回的对象类型。</p>\n<p>乍看之下，这种更改可能毫无意义： 我们只是改变了程序中调用构造函数的位置而已。但是，仔细想一下，现在你可以在子类中重写工厂方法，从而改变其创建产品的类型。</p>\n<p>但有一点需要注意: 仅当这些产品具有共同的基类或者接口时，子类才能返回不同类型的产品，同时基类中的工厂方法还应将其返回类型声明为这一共有接口。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231125211518531-194977362.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<blockquote>\n<p>所有产品都必须使用同一接口。</p>\n</blockquote>\n<p>举例来说， <code>卡车</code>Truck和 <code>轮船</code>Ship类都必须实现 <code>运输</code>Transport接口， 该接口声明了一个名为 <code>deliver</code>交付的方法。每个类都将以不同的方式实现该方法：卡车走陆路交付货物， 轮船走海路交付货物。  <code>陆路运输</code>Road­Logistics类中的工厂方法返回卡车对象，而 <code>海路运输</code>Sea­Logistics类则返回轮船对象。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231125211853824-1695295438.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<blockquote>\n<p>只要产品类实现一个共同的接口， 你就可以将其对象传递给客户代码， 而无需提供额外数据。</p>\n</blockquote>\n<p>调用工厂方法的代码 （通常被称为客户端代码） 无需了解不同子类返回实际对象之间的差别。 客户端将所有产品视为抽象的 <code>运输</code> 。 客户端知道所有运输对象都提供 <code>交付</code>方法， 但是并不关心其具体实现方式。</p>\n<h1 id=\"重点\">重点<a title=\"#重点\" href=\"#重点\"></a></h1>\n<h2 id=\"工厂方法模式结构\">工厂方法模式结构<a title=\"#工厂方法模式结构\" href=\"#工厂方法模式结构\"></a></h2>\n<h3 id=\"产品\">产品<a title=\"#产品\" href=\"#产品\"></a></h3>\n<p>产品 （Product） 将会对接口进行声明。 对于所有由创建者及其子类构建的对象， 这些接口都是通用的。</p>\n<h3 id=\"具体产品\">具体产品<a title=\"#具体产品\" href=\"#具体产品\"></a></h3>\n<p>具体产品 （Concrete Products） 是产品接口的不同实现。</p>\n<h3 id=\"创建者\">创建者<a title=\"#创建者\" href=\"#创建者\"></a></h3>\n<p>创建者 （Creator） 类声明返回产品对象的工厂方法。 该方法的返回对象类型必须与产品接口相匹配。</p>\n<p>你可以将工厂方法声明为抽象方法， 强制要求每个子类以不同方式实现该方法。 或者， 你也可以在基础工厂方法中返回默认产品类型。</p>\n<p>注意， 尽管它的名字是创建者， 但它最主要的职责并不是创建产品。 一般来说， 创建者类包含一些与产品相关的核心业务逻辑。 工厂方法将这些逻辑处理从具体产品类中分离出来。 打个比方， 大型软件开发公司拥有程序员培训部门。 但是， 这些公司的主要工作还是编写代码， 而非生产程序员。</p>\n<h3 id=\"具体创建者\">具体创建者<a title=\"#具体创建者\" href=\"#具体创建者\"></a></h3>\n<p>具体创建者 （Concrete Creators） 将会重写基础工厂方法， 使其返回不同类型的产品。</p>\n<p>注意， 并不一定每次调用工厂方法都会创建新的实例。 工厂方法也可以返回缓存、 对象池或其他来源的已有对象。</p>\n<h1 id=\"工厂方法模式适合应用场景\">工厂方法模式适合应用场景<a title=\"#工厂方法模式适合应用场景\" href=\"#工厂方法模式适合应用场景\"></a></h1>\n<p>当你在编写代码的过程中， 如果无法预知对象确切类别及其依赖关系时， 可使用工厂方法。</p>\n<p>工厂方法将创建产品的代码与实际使用产品的代码分离， 从而能在不影响其他代码的情况下扩展产品创建部分代码。</p>\n<blockquote>\n<p>例如， 如果需要向应用中添加一种新产品， 你只需要开发新的创建者子类， 然后重写其工厂方法即可。</p>\n</blockquote>\n<h2 id=\"代码示例\">代码示例<a title=\"#代码示例\" href=\"#代码示例\"></a></h2>\n<p>如果你希望用户能扩展你软件库或框架的内部组件， 可使用工厂方法。</p>\n<p>继承可能是扩展软件库或框架默认行为的最简单方法。 但是当你使用子类替代标准组件时， 框架如何辨识出该子类？</p>\n<p>解决方案是将各框架中构造组件的代码集中到单个工厂方法中， 并在继承该组件之外允许任何人对该方法进行重写。</p>\n<p>让我们看看具体是如何实现的。 假设你使用开源 UI 框架编写自己的应用。 你希望在应用中使用圆形按钮， 但是原框架仅支持矩形按钮。 你可以使用 圆形按钮RoundButton子类来继承标准的 按钮Button类。 但是， 你需要告诉 UI框架UIFramework类使用新的子类按钮代替默认按钮。</p>\n<p>为了实现这个功能， 你可以根据基础框架类开发子类 圆形按钮 UIUIWithRoundButtons ， 并且重写其 createButton创建按钮方法。 基类中的该方法返回 按钮对象， 而你开发的子类返回 圆形按钮对象。 现在， 你就可以使用 圆形按钮 UI类代替 UI框架类。 就是这么简单！</p>\n<p>如果你希望复用现有对象来节省系统资源， 而不是每次都重新创建对象， 可使用工厂方法。</p>\n<p>在处理大型资源密集型对象 （比如数据库连接、 文件系统和网络资源） 时， 你会经常碰到这种资源需求。</p>\n<p>让我们思考复用现有对象的方法：</p>\n<ol>\n<li>首先， 你需要创建存储空间来存放所有已经创建的对象。</li>\n<li>当他人请求一个对象时， 程序将在对象池中搜索可用对象。</li>\n<li>然后将其返回给客户端代码。</li>\n<li>如果没有可用对象， 程序则创建一个新对象 （并将其添加到对象池中）。</li>\n</ol>\n<p>这些代码可不少！ 而且它们必须位于同一处， 这样才能确保重复代码不会污染程序。</p>\n<p>可能最显而易见， 也是最方便的方式， 就是将这些代码放置在我们试图重用的对象类的构造函数中。 但是从定义上来讲， 构造函数始终返回的是新对象， 其无法返回现有实例。</p>\n<p>因此， 你需要有一个既能够创建新对象， 又可以重用现有对象的普通方法。 这听上去和工厂方法非常相像。</p>\n<h1 id=\"实现方式\">实现方式<a title=\"#实现方式\" href=\"#实现方式\"></a></h1>\n<ol>\n<li>让所有产品都遵循同一接口。 该接口必须声明对所有产品都有意义的方法。</li>\n<li>在创建类中添加一个空的工厂方法。 该方法的返回类型必须遵循通用的产品接口。</li>\n<li>在创建者代码中找到对于产品构造函数的所有引用。 将它们依次替换为对于工厂方法的调用， 同时将创建产品的代码移入工厂方法。</li>\n</ol>\n<p>你可能需要在工厂方法中添加临时参数来控制返回的产品类型。</p>\n<p>工厂方法的代码看上去可能非常糟糕。 其中可能会有复杂的 switch分支运算符， 用于选择各种需要实例化的产品类。 但是不要担心， 我们很快就会修复这个问题。</p>\n<ol start=\"4\">\n<li>现在， 为工厂方法中的每种产品编写一个创建者子类， 然后在子类中重写工厂方法， 并将基本方法中的相关创建代码移动到工厂方法中。</li>\n<li>如果应用中的产品类型太多， 那么为每个产品创建子类并无太大必要， 这时你也可以在子类中复用基类中的控制参数。</li>\n</ol>\n<p>例如， 设想你有以下一些层次结构的类。 基类 邮件及其子类 航空邮件和 陆路邮件 ； 运输及其子类 飞机, 卡车和 火车 。  航空邮件仅使用 飞机对象， 而 陆路邮件则会同时使用 卡车和 火车对象。 你可以编写一个新的子类 （例如 火车邮件 ） 来处理这两种情况， 但是还有其他可选的方案。 客户端代码可以给 陆路邮件类传递一个参数， 用于控制其希望获得的产品。</p>\n<ol start=\"6\">\n<li>如果代码经过上述移动后， 基础工厂方法中已经没有任何代码， 你可以将其转变为抽象类。 如果基础工厂方法中还有其他语句， 你可以将其设置为该方法的默认行为。</li>\n</ol>\n<h1 id=\"工厂方法模式优缺点\">工厂方法模式优缺点<a title=\"#工厂方法模式优缺点\" href=\"#工厂方法模式优缺点\"></a></h1>\n<h2 id=\"优点\">优点<a title=\"#优点\" href=\"#优点\"></a></h2>\n<ul>\n<li>你可以避免创建者和具体产品之间的紧密耦合。</li>\n<li>单一职责原则。 你可以将产品创建代码放在程序的单一位置， 从而使得代码更容易维护。</li>\n<li>开闭原则。 无需更改现有客户端代码， 你就可以在程序中引入新的产品类型。</li>\n</ul>\n<h2 id=\"缺点\">缺点<a title=\"#缺点\" href=\"#缺点\"></a></h2>\n<p>应用工厂方法模式需要引入许多新的子类， 代码可能会因此变得更复杂。 最好的情况是将该模式引入创建者类的现有层次结构中。</p>\n<h1 id=\"最后\">最后<a title=\"#最后\" href=\"#最后\"></a></h1>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231122231128423-999760020.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"Git 日常常用操作","link":"2023/11/23/Git/01-Git 日常常用操作"},"next":{"title":"文章模板","link":"2023/11/22/模板/01-文章模板"},"plink":"http://example.com/2023/11/23/设计模式/创建型模式/01-工厂方法模式/","toc":[{"id":"前言","title":"前言","index":"1","children":[{"id":"什么是工厂方法","title":"什么是工厂方法","index":"1.1"},{"id":"工厂方法的作用","title":"工厂方法的作用","index":"1.2"}]},{"id":"示例","title":"示例","index":"2"},{"id":"buttons","title":"buttons","index":"3","children":[{"id":"html-button-产品","title":"Html Button 产品","index":"3.1"},{"id":"windows-button-产品","title":"Windows Button 产品","index":"3.2"}]},{"id":"factory","title":"factory","index":"4","children":[{"id":"html-dialog-创建者","title":"Html Dialog 创建者","index":"4.1"},{"id":"windows-dialog-创建者","title":"Windows Dialog 创建者","index":"4.2"}]},{"id":"客户端代码","title":"客户端代码","index":"5"},{"id":"测试","title":"测试","index":"6"},{"id":"意图","title":"意图","index":"7"},{"id":"问题","title":"问题","index":"8"},{"id":"解决方案","title":"解决方案","index":"9"},{"id":"重点","title":"重点","index":"10","children":[{"id":"工厂方法模式结构","title":"工厂方法模式结构","index":"10.1","children":[{"id":"产品","title":"产品","index":"10.1.1"},{"id":"具体产品","title":"具体产品","index":"10.1.2"},{"id":"创建者","title":"创建者","index":"10.1.3"},{"id":"具体创建者","title":"具体创建者","index":"10.1.4"}]}]},{"id":"工厂方法模式适合应用场景","title":"工厂方法模式适合应用场景","index":"11","children":[{"id":"代码示例","title":"代码示例","index":"11.1"}]},{"id":"实现方式","title":"实现方式","index":"12"},{"id":"工厂方法模式优缺点","title":"工厂方法模式优缺点","index":"13","children":[{"id":"优点","title":"优点","index":"13.1"},{"id":"缺点","title":"缺点","index":"13.2"}]},{"id":"最后","title":"最后","index":"14"}],"reading_time":"3982 words in 27 min"}