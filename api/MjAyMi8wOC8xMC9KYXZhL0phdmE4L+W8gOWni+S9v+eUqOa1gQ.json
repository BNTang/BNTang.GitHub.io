{"title":"开始使用流","date":"2022-08-10T10:52:22.000Z","date_formatted":{"ll":"Aug 10, 2022","L":"08/10/2022","MM-DD":"08-10"},"link":"2022/08/10/Java/Java8/开始使用流","tags":["Java","Java8"],"updated":"2022-08-10T13:55:47.573Z","content":"<blockquote>\n<ul>\n<li>Java 8 中的 Stream 俗称为流，它与 <a href=\"http://java.io\">java.io</a> 包里的 InputStream 和 OutputStream 是完全不同的概念</li>\n<li>Stream 用于对集合对象进行各种非常便利、高效的聚合操作，或者大批量数据操作</li>\n<li>Stream API 借助于 Lambda 表达式，极大的提高编程效率和程序可读性</li>\n<li>同时它提供串行和并行两种模式进行汇聚操作，并发模式能够充分利用多核处理器的优势</li>\n<li>通过下面的例子我们可以初步体会到使用 Stream 处理集合的便利性</li>\n</ul>\n</blockquote>\n<h1 id=\"初探stream\">初探Stream<a title=\"#初探stream\" href=\"#初探stream\"></a></h1>\n<blockquote>\n<ul>\n<li>有如下一个 List 集合，现要从中筛选出以 <code>J</code> 开头的元素，然后转换为大写，最后输出结果</li>\n<li>Java 8之前我们是这样做的：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = Arrays.asList(<span class=\"hljs-string\">&quot;Java&quot;</span>, <span class=\"hljs-string\">&quot;JavaScript&quot;</span>, <span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;PHP&quot;</span>, <span class=\"hljs-string\">&quot;C#&quot;</span>, <span class=\"hljs-string\">&quot;Golang&quot;</span>, <span class=\"hljs-string\">&quot;Swift&quot;</span>);<br>        List&lt;String&gt; filterList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-keyword\">for</span> (String str : list) &#123;<br>            <span class=\"hljs-keyword\">if</span> (str.startsWith(<span class=\"hljs-string\">&quot;J&quot;</span>)) &#123;<br>                filterList.add(str.toUpperCase());<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (String str : filterList) &#123;<br>            System.out.println(str);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>为了筛选集合我们进行了两次外部迭代，并且还创建了一个用来临时存放筛选元素的集合对象</li>\n<li>借助Java 8中的Stream我们可以极大的简化这个处理过程：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = Arrays.asList(<span class=\"hljs-string\">&quot;Java&quot;</span>, <span class=\"hljs-string\">&quot;JavaScript&quot;</span>, <span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;PHP&quot;</span>, <span class=\"hljs-string\">&quot;C#&quot;</span>, <span class=\"hljs-string\">&quot;Golang&quot;</span>, <span class=\"hljs-string\">&quot;Swift&quot;</span>);<br>        list.stream()<br>                .filter(s -&gt; s.startsWith(<span class=\"hljs-string\">&quot;J&quot;</span>))<br>                .map(String::toUpperCase)<br>                .forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>是不是很方便？上面的例子中，集合使用 <code>stream</code> 方法创建了一个流，然后使用 <code>filter</code> 和 <code>map</code> 方法来处理这个集合，它们统称为 <strong>中间操作</strong>。中间操作都会返回另一个流，以便于将各种对集合的操作连接起来形成一条流水线。最后我们使用了 <code>forEach</code> 方法迭代筛选结果，这种位于流的末端，对流进行处理并且生成结果的方法称为 <strong>终端操作</strong>。</p>\n<p>总而言之，流的使用一般包括三件事情：</p>\n<blockquote>\n<ul>\n<li>一个 <strong>数据源</strong>（如集合）来执行一个查询</li>\n<li>一个 <strong>中间操作</strong> 链，形成一条流的流水线</li>\n<li>一个 <strong>终端操作</strong>，执行流水线，并能生成结果</li>\n</ul>\n</blockquote>\n<p>下表列出了流中常见的中间操作和终端操作：</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th><strong>操作</strong></th>\n<th><strong>类型</strong></th>\n<th>返回类型</th>\n<th><strong>使用的类型 / 函数式接口</strong></th>\n<th>函数描述符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>filter</td>\n<td>中间</td>\n<td>Stream&lt;T&gt;</td>\n<td>Predicate&lt;T&gt;</td>\n<td>T -&gt; boolean</td>\n</tr>\n<tr>\n<td>distinct</td>\n<td>中间</td>\n<td>Stream&lt;T&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>skip</td>\n<td>中间</td>\n<td>Stream&lt;T&gt;</td>\n<td>long</td>\n<td></td>\n</tr>\n<tr>\n<td>limit</td>\n<td>中间</td>\n<td>Stream&lt;T&gt;</td>\n<td>long</td>\n<td></td>\n</tr>\n<tr>\n<td>map</td>\n<td>中间</td>\n<td>Stream&lt;R&gt;</td>\n<td>Function&lt;T, R&gt;</td>\n<td>T -&gt; R</td>\n</tr>\n<tr>\n<td>flatMap</td>\n<td>中间</td>\n<td>Stream&lt;R&gt;</td>\n<td>Function&lt;T, Stream&lt;R&gt;&gt;</td>\n<td>T -&gt; Stream&lt;R&gt;</td>\n</tr>\n<tr>\n<td>sorted</td>\n<td>中间</td>\n<td>Stream&lt;T&gt;</td>\n<td>Comparator&lt;T&gt;</td>\n<td>(T, T) -&gt; int</td>\n</tr>\n<tr>\n<td>anyMatch</td>\n<td>终端</td>\n<td>boolean</td>\n<td>Predicate&lt;T&gt;</td>\n<td>T -&gt; boolean</td>\n</tr>\n<tr>\n<td>noneMatch</td>\n<td>终端</td>\n<td>boolean</td>\n<td>Predicate&lt;T&gt;</td>\n<td>T -&gt; boolean</td>\n</tr>\n<tr>\n<td>allMatch</td>\n<td>终端</td>\n<td>boolean</td>\n<td>Predicate&lt;T&gt;</td>\n<td>T -&gt; boolean</td>\n</tr>\n<tr>\n<td>findAny</td>\n<td>终端</td>\n<td>Optional&lt;T&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>findFirst</td>\n<td>终端</td>\n<td>Optional&lt;T&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>forEach</td>\n<td>终端</td>\n<td>void</td>\n<td>Consumer&lt;T&gt;</td>\n<td>T -&gt; void</td>\n</tr>\n<tr>\n<td>collect</td>\n<td>终端</td>\n<td>R</td>\n<td>Collector&lt;T, A, R&gt;</td>\n<td></td>\n</tr>\n<tr>\n<td>reduce</td>\n<td>终端</td>\n<td>Optional&lt;T&gt;</td>\n<td>BinaryOperator&lt;T&gt;</td>\n<td>(T, T) -&gt; T</td>\n</tr>\n<tr>\n<td>count</td>\n<td>终端</td>\n<td>long</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table></div></div><blockquote>\n<ul>\n<li>下面详细介绍这些操作的使用</li>\n<li>除了特殊说明，使用下面这个集合作为演示：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">List&lt;String&gt; list = Arrays.asList(<span class=\"hljs-string\">&quot;Java&quot;</span>, <span class=\"hljs-string\">&quot;JavaScript&quot;</span>, <span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;PHP&quot;</span>, <span class=\"hljs-string\">&quot;C#&quot;</span>, <span class=\"hljs-string\">&quot;Golang&quot;</span>, <span class=\"hljs-string\">&quot;Swift&quot;</span>, <span class=\"hljs-string\">&quot;C++&quot;</span>, <span class=\"hljs-string\">&quot;Ruby&quot;</span>);<br></code></pre></td></tr></table></figure>\n<h1 id=\"中间操作\">中间操作<a title=\"#中间操作\" href=\"#中间操作\"></a></h1>\n<h2 id=\"filter\">filter<a title=\"#filter\" href=\"#filter\"></a></h2>\n<blockquote>\n<ul>\n<li>Streams 接口支持 <code>filter</code> 方法，该方法接收一个 <code>Predicate&lt;T&gt;</code>，函数描述符为 <code>T -&gt; boolean</code>，用于对集合进行筛选，返回所有满足的元素：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = Arrays.asList(<span class=\"hljs-string\">&quot;Java&quot;</span>, <span class=\"hljs-string\">&quot;JavaScript&quot;</span>, <span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;PHP&quot;</span>, <span class=\"hljs-string\">&quot;C#&quot;</span>, <span class=\"hljs-string\">&quot;Golang&quot;</span>, <span class=\"hljs-string\">&quot;Swift&quot;</span>, <span class=\"hljs-string\">&quot;C++&quot;</span>, <span class=\"hljs-string\">&quot;Ruby&quot;</span>);<br><br>        list.stream()<br>                .filter(s -&gt; s.contains(<span class=\"hljs-string\">&quot;#&quot;</span>))<br>                .forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>结果输出 <code>C#</code></li>\n</ul>\n</blockquote>\n<h2 id=\"distinct\">distinct<a title=\"#distinct\" href=\"#distinct\"></a></h2>\n<blockquote>\n<ul>\n<li><code>distinct</code> 方法用于 <code>排除</code> 流中重复的元素，类似于 SQL 中的 distinct 操作</li>\n<li>比如筛选中集合中所有的偶数，并排除重复的结果：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        List&lt;Integer&gt; numbers = Arrays.asList(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>);<br>        numbers.stream()<br>                .filter(i -&gt; i % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>)<br>                .distinct()<br>                .forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>结果输出 <code>2 4</code></li>\n</ul>\n</blockquote>\n<h2 id=\"skip\">skip<a title=\"#skip\" href=\"#skip\"></a></h2>\n<blockquote>\n<ul>\n<li><code>skip(n)</code> 方法用于跳过流中的 <code>前n个元素</code>，如果集合元素小于n，则返回空流</li>\n<li>比如筛选出以 <code>J</code> 开头的元素，并排除第一个：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = Arrays.asList(<span class=\"hljs-string\">&quot;Java&quot;</span>, <span class=\"hljs-string\">&quot;JavaScript&quot;</span>, <span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;PHP&quot;</span>, <span class=\"hljs-string\">&quot;C#&quot;</span>, <span class=\"hljs-string\">&quot;Golang&quot;</span>, <span class=\"hljs-string\">&quot;Swift&quot;</span>, <span class=\"hljs-string\">&quot;C++&quot;</span>, <span class=\"hljs-string\">&quot;Ruby&quot;</span>);<br>        list.stream()<br>                .filter(s -&gt; s.startsWith(<span class=\"hljs-string\">&quot;J&quot;</span>))<br>                .skip(<span class=\"hljs-number\">1</span>)<br>                .forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>结果输出 <code>JavaScript</code></li>\n</ul>\n</blockquote>\n<h2 id=\"limit\">limit<a title=\"#limit\" href=\"#limit\"></a></h2>\n<blockquote>\n<ul>\n<li><code>limit(n)</code> 方法返回一个长度不超过 <code>n</code> 的流，比如下面的例子将输出 <code>Java JavaScript python</code>：</li>\n<li>例如你输入的 3，返回的就是3，不会超过3</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = Arrays.asList(<span class=\"hljs-string\">&quot;Java&quot;</span>, <span class=\"hljs-string\">&quot;JavaScript&quot;</span>, <span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;PHP&quot;</span>, <span class=\"hljs-string\">&quot;C#&quot;</span>, <span class=\"hljs-string\">&quot;Golang&quot;</span>, <span class=\"hljs-string\">&quot;Swift&quot;</span>, <span class=\"hljs-string\">&quot;C++&quot;</span>, <span class=\"hljs-string\">&quot;Ruby&quot;</span>);<br>        list.stream()<br>                .limit(<span class=\"hljs-number\">3</span>)<br>                .forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"map\">map<a title=\"#map\" href=\"#map\"></a></h2>\n<blockquote>\n<ul>\n<li><code>map</code> 方法接收一个函数作为参数</li>\n<li>这个函数会被应用到每个元素上，并将其映射成一个新的元素</li>\n<li>如：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = Arrays.asList(<span class=\"hljs-string\">&quot;Java&quot;</span>, <span class=\"hljs-string\">&quot;JavaScript&quot;</span>, <span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;PHP&quot;</span>, <span class=\"hljs-string\">&quot;C#&quot;</span>, <span class=\"hljs-string\">&quot;Golang&quot;</span>, <span class=\"hljs-string\">&quot;Swift&quot;</span>, <span class=\"hljs-string\">&quot;C++&quot;</span>, <span class=\"hljs-string\">&quot;Ruby&quot;</span>);<br>        list.stream()<br>                .map(String::length)<br>                .forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>结果输出 <code>4 10 6 3 2 6 5 3 4</code></li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li><code>map</code> 还支持将流特化为指定的原始类型的流，如通过 <code>mapToInt</code>，<code>mapToDouble</code> 和 <code>mapToLong</code> 方法，可以将流转换为 <code>IntStream</code>，<code>DoubleStream</code> 和 <code>LongStream</code></li>\n<li>特化后的流支持 <code>sum</code>，<code>min</code> 和 <code>max</code> 方法来对流中的元素进行计算</li>\n<li>比如：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        List&lt;Integer&gt; numbers = Arrays.asList(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>);<br>        <span class=\"hljs-type\">IntStream</span> <span class=\"hljs-variable\">intStream</span> <span class=\"hljs-operator\">=</span> numbers.stream().mapToInt(a -&gt; a);<br>        System.out.println(intStream.sum());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>也可以通过下面的方法，将 <code>IntStream</code> 转换为 <code>Stream</code>：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        List&lt;Integer&gt; numbers = Arrays.asList(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>);<br>        <span class=\"hljs-type\">IntStream</span> <span class=\"hljs-variable\">intStream</span> <span class=\"hljs-operator\">=</span> numbers.stream().mapToInt(a -&gt; a);<br>        Stream&lt;Integer&gt; s = intStream.boxed();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"flatmap\">flatMap<a title=\"#flatmap\" href=\"#flatmap\"></a></h2>\n<blockquote>\n<ul>\n<li><code>flatMap</code> 用于将多个流合并成一个流，俗称流的扁平化</li>\n<li>这么说有点抽象，举个例子，比如现在需要将 list 中的各个元素拆分为一个个字母，并过滤掉重复的结果，你可能会这样做：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = Arrays.asList(<span class=\"hljs-string\">&quot;Java&quot;</span>, <span class=\"hljs-string\">&quot;JavaScript&quot;</span>, <span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;PHP&quot;</span>, <span class=\"hljs-string\">&quot;C#&quot;</span>, <span class=\"hljs-string\">&quot;Golang&quot;</span>, <span class=\"hljs-string\">&quot;Swift&quot;</span>, <span class=\"hljs-string\">&quot;C++&quot;</span>, <span class=\"hljs-string\">&quot;Ruby&quot;</span>);<br>        list.stream()<br>                .map(s -&gt; s.split(<span class=\"hljs-string\">&quot;&quot;</span>))<br>                .distinct()<br>                .forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>输出结果如下：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">[Ljava.lang.String;@58372a00<br>[Ljava.lang.String;@4dd8dc3<br>[Ljava.lang.String;@6d03e736<br>[Ljava.lang.String;@568db2f2<br>[Ljava.lang.String;@378bf509<br>[Ljava.lang.String;@5fd0d5ae<br>[Ljava.lang.String;@2d98a335<br>[Ljava.lang.String;@16b98e56<br>[Ljava.lang.String;@7ef20235<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>这明显不符合我们的预期</li>\n<li>实际上在 <code>map(s -&gt; s.split(&quot;&quot;))</code> 操作后，返回了一个 <code>Stream&lt;String[]&gt;</code> 类型的流，所以输出结果为每个数组对象的句柄，而我们真正想要的结果是 <code>Stream&lt;String&gt;</code>！</li>\n<li>在 Stream 中，可以使用 <code>Arrays.stream()</code> 方法来将数组转换为流，改造上面的方法：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = Arrays.asList(<span class=\"hljs-string\">&quot;Java&quot;</span>, <span class=\"hljs-string\">&quot;JavaScript&quot;</span>, <span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;PHP&quot;</span>, <span class=\"hljs-string\">&quot;C#&quot;</span>, <span class=\"hljs-string\">&quot;Golang&quot;</span>, <span class=\"hljs-string\">&quot;Swift&quot;</span>, <span class=\"hljs-string\">&quot;C++&quot;</span>, <span class=\"hljs-string\">&quot;Ruby&quot;</span>);<br>        list.stream()<br>                .map(s -&gt; s.split(<span class=\"hljs-string\">&quot;&quot;</span>))<br>                .map(Arrays::stream)<br>                .distinct()<br>                .forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>输出结果如下：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">java.util.stream.ReferencePipeline$Head@568db2f2<br>java.util.stream.ReferencePipeline$Head@378bf509<br>java.util.stream.ReferencePipeline$Head@5fd0d5ae<br>java.util.stream.ReferencePipeline$Head@2d98a335<br>java.util.stream.ReferencePipeline$Head@16b98e56<br>java.util.stream.ReferencePipeline$Head@7ef20235<br>java.util.stream.ReferencePipeline$Head@27d6c5e0<br>java.util.stream.ReferencePipeline$Head@4f3f5b24<br>java.util.stream.ReferencePipeline$Head@15aeb7ab<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>因为上面的流经过 <code>map(Arrays::stream)</code> 处理后，将每个数组变成了一个新的流，返回结果为流的数组 <code>Stream&lt;String&gt;[]</code>，所以输出是各个流的句柄</li>\n<li>我们还需将这些新的流连接成一个流，使用 <code>flatMap</code> 来改写上面的例子：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = Arrays.asList(<span class=\"hljs-string\">&quot;Java&quot;</span>, <span class=\"hljs-string\">&quot;JavaScript&quot;</span>, <span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;PHP&quot;</span>, <span class=\"hljs-string\">&quot;C#&quot;</span>, <span class=\"hljs-string\">&quot;Golang&quot;</span>, <span class=\"hljs-string\">&quot;Swift&quot;</span>, <span class=\"hljs-string\">&quot;C++&quot;</span>, <span class=\"hljs-string\">&quot;Ruby&quot;</span>);<br>        list.stream()<br>                .map(s -&gt; s.split(<span class=\"hljs-string\">&quot;&quot;</span>))<br>                .flatMap(Arrays::stream)<br>                .distinct()<br>                .forEach(s -&gt; System.out.print(s + <span class=\"hljs-string\">&quot; &quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>输出结果如下：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">J a v S c r i p t y h o n P H C # G l g w f + R u b<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>和 <code>map</code> 类似，<code>flatMap</code> 方法也有相应的原始类型特化方法，如 <code>flatMapToInt</code> 等</li>\n</ul>\n</blockquote>\n<h1 id=\"终端操作\">终端操作<a title=\"#终端操作\" href=\"#终端操作\"></a></h1>\n<h2 id=\"anymatch\">anyMatch<a title=\"#anymatch\" href=\"#anymatch\"></a></h2>\n<blockquote>\n<ul>\n<li><code>anyMatch</code> 方法用于判断流中是否有符合判断条件的元素，返回值为 <code>boolean类型</code></li>\n<li>比如判断 list 中是否含有 <code>SQL</code> 元素：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = Arrays.asList(<span class=\"hljs-string\">&quot;Java&quot;</span>, <span class=\"hljs-string\">&quot;JavaScript&quot;</span>, <span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;PHP&quot;</span>, <span class=\"hljs-string\">&quot;C#&quot;</span>, <span class=\"hljs-string\">&quot;Golang&quot;</span>, <span class=\"hljs-string\">&quot;Swift&quot;</span>, <span class=\"hljs-string\">&quot;C++&quot;</span>, <span class=\"hljs-string\">&quot;Ruby&quot;</span>);<br>        System.out.println(list.stream()<br>                .anyMatch(s -&gt; <span class=\"hljs-string\">&quot;SQL&quot;</span>.equals(s)));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"allmatch\">allMatch<a title=\"#allmatch\" href=\"#allmatch\"></a></h2>\n<blockquote>\n<ul>\n<li><code>allMatch</code> 方法用于判断流中是否所有元素都满足给定的判断条件，返回值为 <code>boolean类型</code></li>\n<li>比如判断 list 中是否所有元素长度都不大于10：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = Arrays.asList(<span class=\"hljs-string\">&quot;Java&quot;</span>, <span class=\"hljs-string\">&quot;JavaScript&quot;</span>, <span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;PHP&quot;</span>, <span class=\"hljs-string\">&quot;C#&quot;</span>, <span class=\"hljs-string\">&quot;Golang&quot;</span>, <span class=\"hljs-string\">&quot;Swift&quot;</span>, <span class=\"hljs-string\">&quot;C++&quot;</span>, <span class=\"hljs-string\">&quot;Ruby&quot;</span>);<br>        System.out.println(list.stream()<br>                .allMatch(s -&gt; s.length() &lt;= <span class=\"hljs-number\">10</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>注意点：<a href=\"https://blog.csdn.net/qq_28410283/article/details/110533469\" target=\"_blank\">java8 stream接口终端操作allMatch 当list为空集合的一些思考</a></p>\n<h2 id=\"nonematch\">noneMatch<a title=\"#nonematch\" href=\"#nonematch\"></a></h2>\n<blockquote>\n<ul>\n<li><code>noneMatch</code> 方法用于判断流中是否所有元素都不满足给定的判断条件，返回值为 <code>boolean类型</code></li>\n<li>比如判断 list 中不存在长度大于10的元素：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = Arrays.asList(<span class=\"hljs-string\">&quot;Java&quot;</span>, <span class=\"hljs-string\">&quot;JavaScript&quot;</span>, <span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;PHP&quot;</span>, <span class=\"hljs-string\">&quot;C#&quot;</span>, <span class=\"hljs-string\">&quot;Golang&quot;</span>, <span class=\"hljs-string\">&quot;Swift&quot;</span>, <span class=\"hljs-string\">&quot;C++&quot;</span>, <span class=\"hljs-string\">&quot;Ruby&quot;</span>);<br>        System.out.println(list.stream()<br>                .noneMatch(s -&gt; s.length() &gt; <span class=\"hljs-number\">10</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"findany\">findAny<a title=\"#findany\" href=\"#findany\"></a></h2>\n<blockquote>\n<ul>\n<li><code>findAny</code> 方法用于返回流中的任意元素的 Optional 类型</li>\n<li>例如筛选出 list 中任意一个以 <code>J</code> 开头的元素，如果存在，则输出它：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = Arrays.asList(<span class=\"hljs-string\">&quot;Java&quot;</span>, <span class=\"hljs-string\">&quot;JavaScript&quot;</span>, <span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;PHP&quot;</span>, <span class=\"hljs-string\">&quot;C#&quot;</span>, <span class=\"hljs-string\">&quot;Golang&quot;</span>, <span class=\"hljs-string\">&quot;Swift&quot;</span>, <span class=\"hljs-string\">&quot;C++&quot;</span>, <span class=\"hljs-string\">&quot;Ruby&quot;</span>);<br>        list.stream()<br>                .filter(s -&gt; s.startsWith(<span class=\"hljs-string\">&quot;J&quot;</span>))<br>                .findAny()<br>                .ifPresent(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"findfirst\">findFirst<a title=\"#findfirst\" href=\"#findfirst\"></a></h2>\n<blockquote>\n<ul>\n<li><code>findFirst</code> 方法用于返回流中的第一个元素的 Optional 类型</li>\n<li>例如筛选出 list 中长度大于 5 的元素，如果存在，则输出第一个：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = Arrays.asList(<span class=\"hljs-string\">&quot;Java&quot;</span>, <span class=\"hljs-string\">&quot;JavaScript&quot;</span>, <span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;PHP&quot;</span>, <span class=\"hljs-string\">&quot;C#&quot;</span>, <span class=\"hljs-string\">&quot;Golang&quot;</span>, <span class=\"hljs-string\">&quot;Swift&quot;</span>, <span class=\"hljs-string\">&quot;C++&quot;</span>, <span class=\"hljs-string\">&quot;Ruby&quot;</span>);<br>        list.stream()<br>                .filter(s -&gt; s.length() &gt; <span class=\"hljs-number\">5</span>)<br>                .findFirst()<br>                .ifPresent(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"reduce\">reduce<a title=\"#reduce\" href=\"#reduce\"></a></h2>\n<blockquote>\n<ul>\n<li><code>reduce</code>函数从字面上来看就是压缩，缩减的意思，它可以用于数字类型的流的求和，求最大值和最小值。如对numbers中的元素求和：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        List&lt;Integer&gt; numbers = Arrays.asList(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>);<br>        System.out.println(numbers.stream().reduce(<span class=\"hljs-number\">0</span>, Integer::sum));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><code>reduce</code> 函数也可以不指定初始值，但这时候将返回一个 <code>Optional</code> 对象，比如求最大值和最小值：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        List&lt;Integer&gt; numbers = Arrays.asList(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>);<br>        numbers.stream()<br>                .reduce(Integer::max)<br>                .ifPresent(System.out::println);<br><br>        numbers.stream()<br>                .reduce(Integer::min)<br>                .ifPresent(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"foreach\">forEach<a title=\"#foreach\" href=\"#foreach\"></a></h2>\n<blockquote>\n<ul>\n<li><code>forEach</code> 用于迭代流中的每个元素，最为常见的就是迭代输出，如：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = Arrays.asList(<span class=\"hljs-string\">&quot;Java&quot;</span>, <span class=\"hljs-string\">&quot;JavaScript&quot;</span>, <span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;PHP&quot;</span>, <span class=\"hljs-string\">&quot;C#&quot;</span>, <span class=\"hljs-string\">&quot;Golang&quot;</span>, <span class=\"hljs-string\">&quot;Swift&quot;</span>, <span class=\"hljs-string\">&quot;C++&quot;</span>, <span class=\"hljs-string\">&quot;Ruby&quot;</span>);<br>        list.stream().forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"count\">count<a title=\"#count\" href=\"#count\"></a></h2>\n<blockquote>\n<ul>\n<li><code>count</code> 方法用于统计流中的元素的个数，比如：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = Arrays.asList(<span class=\"hljs-string\">&quot;Java&quot;</span>, <span class=\"hljs-string\">&quot;JavaScript&quot;</span>, <span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;PHP&quot;</span>, <span class=\"hljs-string\">&quot;C#&quot;</span>, <span class=\"hljs-string\">&quot;Golang&quot;</span>, <span class=\"hljs-string\">&quot;Swift&quot;</span>, <span class=\"hljs-string\">&quot;C++&quot;</span>, <span class=\"hljs-string\">&quot;Ruby&quot;</span>);<br>        System.out.println(list.stream().count());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"collect\">collect<a title=\"#collect\" href=\"#collect\"></a></h2>\n<blockquote>\n<ul>\n<li><code>collect</code> 方法用于收集流中的元素，并放到不同类型的结果中，比如 <code>List</code>、<code>Set</code> 或者 <code>Map</code></li>\n<li>举个例子：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = Arrays.asList(<span class=\"hljs-string\">&quot;Java&quot;</span>, <span class=\"hljs-string\">&quot;JavaScript&quot;</span>, <span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;PHP&quot;</span>, <span class=\"hljs-string\">&quot;C#&quot;</span>, <span class=\"hljs-string\">&quot;Golang&quot;</span>, <span class=\"hljs-string\">&quot;Swift&quot;</span>, <span class=\"hljs-string\">&quot;C++&quot;</span>, <span class=\"hljs-string\">&quot;Ruby&quot;</span>);<br>        List&lt;String&gt; filterList = list.stream().filter(s -&gt; s.startsWith(<span class=\"hljs-string\">&quot;J&quot;</span>)).collect(Collectors.toList());<br>        System.out.println(filterList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>如果需要以 <code>Set</code> 来替代 <code>List</code>，只需要使用 <code>Collectors.toSet()</code> 就好了</li>\n</ul>\n</blockquote>\n<h1 id=\"流的构建\">流的构建<a title=\"#流的构建\" href=\"#流的构建\"></a></h1>\n<blockquote>\n<ul>\n<li>除了使用集合对象的 <code>stream</code> 方法构建流之外，我们可以手动构建一些流</li>\n</ul>\n</blockquote>\n<h2 id=\"数值范围构建\">数值范围构建<a title=\"#数值范围构建\" href=\"#数值范围构建\"></a></h2>\n<blockquote>\n<ul>\n<li><code>IntStream</code> 和 <code>LongStream</code> 对象支持 <code>range</code> 和 <code>rangeClosed</code> 方法来构建数值流</li>\n<li>这两个方法都是第一个参数接受起始值，第二个参数接受结束值</li>\n<li>但 <code>range</code> 是不包含结束值的，而 <code>rangeClosed</code> 则包含结束值</li>\n<li>比如对 1 到 100 的整数求和：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        System.out.println(IntStream.rangeClosed(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">100</span>).sum());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"由值构建\">由值构建<a title=\"#由值构建\" href=\"#由值构建\"></a></h2>\n<blockquote>\n<ul>\n<li>静态方法 <code>Stream.of</code> 可以显式值创建一个流</li>\n<li>它可以接受任意数量的参数</li>\n<li>例如，以下代码直接使用 <code>Stream.of</code> 创建了一个字符串流:</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        Stream&lt;String&gt; s = Stream.of(<span class=\"hljs-string\">&quot;Java&quot;</span>, <span class=\"hljs-string\">&quot;JavaScript&quot;</span>, <span class=\"hljs-string\">&quot;C++&quot;</span>, <span class=\"hljs-string\">&quot;Ruby&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>也可以使用 <code>Stream.empty()</code> 构建一个空流：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Stream&lt;Object&gt; emptyStream = Stream.empty();<br></code></pre></td></tr></table></figure>\n<h2 id=\"由数组构建\">由数组构建<a title=\"#由数组构建\" href=\"#由数组构建\"></a></h2>\n<blockquote>\n<ul>\n<li>静态方法 <code>Arrays.stream</code> 可以通过数组创建一个流</li>\n<li>它接受一个数组作为参数</li>\n<li>例如：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">int</span>[] arr = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>&#125;;<br>        <span class=\"hljs-type\">IntStream</span> <span class=\"hljs-variable\">intStream</span> <span class=\"hljs-operator\">=</span> Arrays.stream(arr);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"由文件生成流\">由文件生成流<a title=\"#由文件生成流\" href=\"#由文件生成流\"></a></h2>\n<blockquote>\n<ul>\n<li><code>java.nio.file.Files</code> 中的很多静态方法都会返回一个流</li>\n<li>例如 <code>Files.lines</code> 方法会返回一个由指定文件中的各行构成的字符串流</li>\n<li>比如统计一个文件中共有多少个字：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">wordCout</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0L</span>;<br>        <span class=\"hljs-keyword\">try</span> (Stream&lt;String&gt; lines = Files.lines(Paths.get(<span class=\"hljs-string\">&quot;file.txt&quot;</span>), Charset.defaultCharset())) &#123;<br>            wordCout = lines.map(l -&gt; l.split(<span class=\"hljs-string\">&quot;&quot;</span>))<br>                    .flatMap(Arrays::stream)<br>                    .count();<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception ignore) &#123;<br>        &#125;<br>        System.out.println(wordCout);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"由函数构造\">由函数构造<a title=\"#由函数构造\" href=\"#由函数构造\"></a></h2>\n<blockquote>\n<ul>\n<li>Stream API 提供了两个静态方法来从函数生成流：<code>Stream.iterate</code> 和 <code>Stream.generate</code></li>\n<li>这两个操作可以创建所谓的无限流</li>\n<li>比如下面的例子构建了 10 个偶数：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        Stream.iterate(<span class=\"hljs-number\">0</span>, n -&gt; n + <span class=\"hljs-number\">2</span>)<br>                .limit(<span class=\"hljs-number\">10</span>).forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><code>iterate</code> 方法接受一个初始值（在这里是0）还有一个依次应用在每个产生的新值上的 Lambda（UnaryOperator类型）</li>\n<li>这里，我们使用 Lambda <code>n -&gt; n + 2</code>，返回的是前一个元素加上 2</li>\n<li>因此，<code>iterate</code> 方法生成了一个所有正偶数的流：流的第一个元素是初始值0</li>\n<li>然后加上 2 来生成新的值 2，再加上 2 来得到新的值 4，以此类推</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>与 <code>iterate</code> 方法类似，<code>generate</code> 方法也可让你按需生成一个无限流</li>\n<li>但 <code>generate</code> 不是依次对每个新生成的值应用函数，比如下面的例子生成了 5 个 0 到 1 之间的随机双精度数：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> BNTang</span><br><span class=\"hljs-comment\"> **/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        Stream.generate(Math::random)<br>                .limit(<span class=\"hljs-number\">5</span>)<br>                .forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>输出结果如下：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">0.4477477019693912<br>0.8866972547736678<br>0.6893219838296453<br>0.3768607796229386<br>0.9647978867306028<br></code></pre></td></tr></table></figure>\n","prev":{"title":"开发经验","link":"2022/08/10/经验/01-经验"},"next":{"title":"Linux 权限","link":"2022/08/09/面试题/Linux/02-权限"},"plink":"http://example.com/2022/08/10/Java/Java8/开始使用流/","toc":[{"id":"初探stream","title":"初探Stream","index":"1"},{"id":"中间操作","title":"中间操作","index":"2","children":[{"id":"filter","title":"filter","index":"2.1"},{"id":"distinct","title":"distinct","index":"2.2"},{"id":"skip","title":"skip","index":"2.3"},{"id":"limit","title":"limit","index":"2.4"},{"id":"map","title":"map","index":"2.5"},{"id":"flatmap","title":"flatMap","index":"2.6"}]},{"id":"终端操作","title":"终端操作","index":"3","children":[{"id":"anymatch","title":"anyMatch","index":"3.1"},{"id":"allmatch","title":"allMatch","index":"3.2"},{"id":"nonematch","title":"noneMatch","index":"3.3"},{"id":"findany","title":"findAny","index":"3.4"},{"id":"findfirst","title":"findFirst","index":"3.5"},{"id":"reduce","title":"reduce","index":"3.6"},{"id":"foreach","title":"forEach","index":"3.7"},{"id":"count","title":"count","index":"3.8"},{"id":"collect","title":"collect","index":"3.9"}]},{"id":"流的构建","title":"流的构建","index":"4","children":[{"id":"数值范围构建","title":"数值范围构建","index":"4.1"},{"id":"由值构建","title":"由值构建","index":"4.2"},{"id":"由数组构建","title":"由数组构建","index":"4.3"},{"id":"由文件生成流","title":"由文件生成流","index":"4.4"},{"id":"由函数构造","title":"由函数构造","index":"4.5"}]}],"reading_time":"3659 words in 24 min"}