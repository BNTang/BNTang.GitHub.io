{"title":"手撕Vue-Router-知识储备","date":"2023-11-18T05:35:41.000Z","date_formatted":{"ll":"Nov 18, 2023","L":"11/18/2023","MM-DD":"11-18"},"link":"2023/11/18/手写VueRouter/01-手撕Vue-Router-知识储备","tags":["手写VueRouter"],"updated":"2023-11-18T13:03:06.388Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231118134236274-1734021494.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h1>\n<p>本文是手写Vue-Router的第一篇，主要是对Vue-Router的知识储备，为后面的手写做准备。</p>\n<p>那么 VueRouter 怎么实现呢？要想实现 VueRouter，首先要知道 VueRouter 它的本质是什么。</p>\n<h1 id=\"vuerouter-的本质\">VueRouter 的本质<a title=\"#vuerouter-的本质\" href=\"#vuerouter-的本质\"></a></h1>\n<p>VueRoute 的本质是什么？VueRouter 的本质就是根据 <code>&quot;不同的 hash 值&quot;</code> 或者 <code>&quot;不同的路径地址&quot;</code>, 将不同的内容渲染到 <code>router-view</code> 中。</p>\n<p>再过去，我学习 VueRouter 的时候，知道 VueRouter 有两种模式，一种是 <code>hash</code> 模式，一种是 <code>history</code> 模式。那么这两种模式有什么区别呢？</p>\n<h1 id=\"hash-模式和-history-模式的区别\">hash 模式和 history 模式的区别<a title=\"#hash-模式和-history-模式的区别\" href=\"#hash-模式和-history-模式的区别\"></a></h1>\n<p>如果是 history 模式，那么我们的路径就是这样的：<code>http://localhost:8080/home</code>，如果是 hash 模式，那么我们的路径就是这样的：<code>http://localhost:8080/#/home</code>。</p>\n<p>了解了这些知识之后，所以实现 VueRouter 的核心关键点就在于如何监听 <code>'hash'</code> 或 <code>'路径'</code> 的变化, 再将不同的内容写到 <code>router-view</code> 中。</p>\n<p>那么在实现 VueRouter 之前呢，我在给大家补充一下，如何监听 <code>'hash'</code> 或 <code>'路径'</code> 的变化。</p>\n<h1 id=\"如何监听-hash-或-路径-的变化\">如何监听 hash 或 路径 的变化<a title=\"#如何监听-hash-或-路径-的变化\" href=\"#如何监听-hash-或-路径-的变化\"></a></h1>\n<h2 id=\"hash\">hash<a title=\"#hash\" href=\"#hash\"></a></h2>\n<p>首先我新建了一个 test.html 文件，然后在里面写了一个 <code>div</code>，然后给这个 <code>div</code> 设置了一个 <code>id</code>，<code>id</code> 的值为 <code>html</code>。</p>\n<p>并且在页面当中添加了两个 a 标签，两个 a 标签的 href 分别跳转地址为，一个是 <code>#/home</code>，一个是 <code>#/about</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;#/home&quot;</span>&gt;</span>首页<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;#/about&quot;</span>&gt;</span>关于<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;html&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>基本的结构我们搭建完毕，好了接下来我们怎么监听 hash 的变化呢？也非常的简单，其实在我们原生的 JS 当中，有一个 <code>hashchange</code> 事件，这个事件就是用来监听 hash 变化的（专门用于监听 hash 变化的）。</p>\n<p>那么知道了监听 hash 变化的事件之后，我们怎么使用呢？我们可以给 <code>window</code> 绑定一个 <code>hashchange</code> 事件，然后在这个事件当中，有一个回调函数，主要 hash 变化之后，我们就可以在这个回调函数当中，获取到当前的 hash 值。</p>\n<p>那么怎么验证它会执行这个回调函数呢，我们可以在这个回调函数当中，打印一下当前的 hash 值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&lt;script&gt;<br>    <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;hashchange&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;当前的hash值发生了变化&#x27;</span>);<br>    &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<p>好了，我们打开浏览器，然后点击首页，我们可以看到控制台打印了一句话，说明我们的 hash 值发生了变化，看到这一点就可以验证我的一个说法。</p>\n<p>接下来我们要做的就是将内容渲染到 <code>div</code> 中，我们先简单的来将 hash 值写入到 <code>div</code> 中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;hashchange&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> currentHash = location.<span class=\"hljs-property\">hash</span>.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>);<br><br>    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#html&#x27;</span>).<span class=\"hljs-property\">innerHTML</span> = currentHash;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<p>我们打开浏览器，点击首页，我们可以看到 <code>div</code> 中的内容变成了 <code>home</code>，点击关于，我们可以看到 <code>div</code> 中的内容变成了 <code>about</code>。</p>\n<p>将来我们是不是根据这个获取到对应的组件，然后将组件渲染到 <code>div</code>（某一个容器当中）中就可以了。</p>\n<p>好了到这里我们的监听 hash 就可以，可以了之后还没完，可以了之后有没有这么一种情况，就是我们第一次打开页面的时候我们地址上面是没有 hash 值的，还有可能就是我们地址栏是有 hash 值的这种情况，是不是有可能，对吧，我们先来看看我们第一次打开页面的时候，有 hash 值我们的容器显示的是什么。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231118155638422-862137609.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>我们可以看到我们的容器显示的是空的，那么我们怎么解决这个问题呢？我们可以在页面加载的时候，手动的触发一次 <code>hashchange</code> 事件，这样我们就可以在页面加载的时候，将内容渲染到 <code>div</code> 中。</p>\n<p>首先我们在 <code>window</code> 上面绑定一个 <code>load</code> 事件，然后在这个事件当中，我们手动的触发一次 <code>hashchange</code> 事件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;load&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> currentHash = location.<span class=\"hljs-property\">hash</span>.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#html&#x27;</span>).<span class=\"hljs-property\">innerHTML</span> = currentHash;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<p>我们打开浏览器，我们可以看到我们的容器当中显示的是 <code>home</code>，这样我们就解决了第一次打开页面的时候，我们的容器显示的是空的这个问题。</p>\n<h2 id=\"路径\">路径<a title=\"#路径\" href=\"#路径\"></a></h2>\n<p>到此为止，我们就可以监听 hash 的变化了，那么我们怎么监听路径的变化呢？我们可以使用 <code>history</code> 的 <code>pushState</code> 方法，这个方法可以改变路径，然后我们就可以监听路径的变化了。</p>\n<p>在看路径地址之前，我们先将基本的代码页面结构搭建一下，路径与之前的 hash 是不一样的，所以我们这里的 a 标签就不能使用 href 属性了，路径我们可以给 a 标签绑定一个事件，绑定一个方法然后在这个方法当中来改变路径。</p>\n<p>页面样式的基本结构代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">&quot;go(&#x27;/home&#x27;)&quot;</span>&gt;</span>首页<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">&quot;go(&#x27;/about&#x27;)&quot;</span>&gt;</span>关于<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;html&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">go</span>(<span class=\"hljs-params\">path</span>) &#123;</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>定义了一个 go 方法，接收一个参数 path，接下来要做的事情就是根据这个 path 来改变路径，这个我们要怎么实现呢？这里我们可以借助一个 <code>history</code> 对象，在 history 对象当中有一个 <code>pushState</code> 方法，这个方法接收三个参数，第一个参数是 <code>state</code>，第二个参数是 <code>title</code>，第三个参数是 <code>url</code>。</p>\n<p>pushState 方法参数：</p>\n<ul>\n<li>state：一个与指定网址相关的状态对象，popstate 事件触发时，该对象会传入回调函数。如果不需要这个对象，此处可以填 null。</li>\n<li>title：新页面的标题，但是所有浏览器目前都忽略这个值，因此这里可以填 null。</li>\n<li>url：新的网址，必须与当前页面处在同一个域。浏览器的地址栏将显示这个网址。</li>\n</ul>\n<p>那么我们怎么使用呢？我们可以在 go 方法当中，调用 <code>pushState</code> 方法，然后将 path 传入到 <code>pushState</code> 方法当中，这样我们就可以改变路径了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">history.<span class=\"hljs-title function_\">pushState</span>(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>, path);<br></code></pre></td></tr></table></figure>\n<p>好了，我们打开浏览器，点击首页，我们可以看到我们的路径变成了 <code>http://localhost:8080/home</code>，点击关于，我们可以看到我们的路径变成了 <code>http://localhost:8080/about</code>。</p>\n<p>没问题之后，我们再将内容渲染到 <code>div</code> 中，我们可以在 <code>go</code> 方法当中，获取到当前的路径，然后将路径写入到 <code>div</code> 中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#html&#x27;</span>).<span class=\"hljs-property\">innerHTML</span> = path;<br></code></pre></td></tr></table></figure>\n<p>我们打开浏览器，点击首页，我们可以看到我们的容器当中显示的是 <code>home</code>，点击关于，我们可以看到我们的容器当中显示的是 <code>about</code>。</p>\n<p>到此为止，我们就可以监听路径的变化了，好了知道这些内容之后，还有一个注意点需要给大家说一下：</p>\n<h2 id=\"注意点\">注意点<a title=\"#注意点\" href=\"#注意点\"></a></h2>\n<p>我们先基于 IDEA 运行我们的项目，然后，点击一下首页这个时候我们的路径与容器内容都是 <code>/home</code>， 好，我们这个时候将地址复制一下，例如现在路径已经变为了 <code>http://localhost:63342/home</code> ，我们在点击一下关于，我们可以看到我们的路径变为了 <code>http://localhost:63342/about</code>, 好，这个时候我们的关键点就要来了：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231118161740578-1725012578.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>正如上图所示，我们的路径变为了 <code>http://localhost:63342/home</code>, 但是容器的内容还是 <code>about</code>，这是为什么呢？所以说这个东西我们也需要进行同步一下，那么我们手动添加了路径那么它怎么知道我们有没有前进与后退呢？非常简单，其实在我们的原生 JS 当中，又有一个事件，这个事件就是 <code>popstate</code> 事件，通过这个事件，我们就可以监听到前进与后退的点击，通过这个事件监听了前进与后退的点击之后，它会执行一个回调函数，我们在这个回调函数当中，就可以处理之前的问题了。</p>\n<p>更改我们的代码，我们可以在 <code>window</code> 上面绑定一个 <code>popstate</code> 事件，然后在这个事件当中，我们可以获取到当前的路径，然后将路径写入到 <code>div</code> 中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;popstate&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#html&#x27;</span>).<span class=\"hljs-property\">innerHTML</span> = location.<span class=\"hljs-property\">pathname</span>;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<h2 id=\"测试注意点\">测试注意点<a title=\"#测试注意点\" href=\"#测试注意点\"></a></h2>\n<p>我们打开浏览器，点击首页，我们可以看到我们的容器当中显示的是 <code>home</code>，点击关于，我们可以看到我们的容器当中显示的是 <code>about</code>，好，这个时候我们的关键点就要来了，我们点击一下浏览器的前进与后退，我们可以看到我们的容器当中显示的是 <code>home</code> 与 <code>about</code>，这样我们就解决了这个问题。</p>\n<h1 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h1>\n<p>到此为止，我们了解了如何监听 hash 与路径的变化，并且了解到了如何监听前进与后退的点击，hash 与路径的变化。</p>\n<p>本篇文章就到这里，感谢大家的阅读，如果有什么不足的地方，欢迎大家指出，我会及时的进行修改。</p>\n","prev":{"title":"手撕Vue-Router-提取路由信息","link":"2023/11/20/手写VueRouter/02-手撕Vue-Router-提取路由信息"},"next":{"title":"腾讯混元大模型初体验反馈情况","link":"2023/11/15/AI/02-腾讯混元大模型初体验，VS Bard 与 ChatGPT反馈情况"},"plink":"http://example.com/2023/11/18/手写VueRouter/01-手撕Vue-Router-知识储备/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"vuerouter-的本质","title":"VueRouter 的本质","index":"2"},{"id":"hash-模式和-history-模式的区别","title":"hash 模式和 history 模式的区别","index":"3"},{"id":"如何监听-hash-或-路径-的变化","title":"如何监听 hash 或 路径 的变化","index":"4","children":[{"id":"hash","title":"hash","index":"4.1"},{"id":"路径","title":"路径","index":"4.2"},{"id":"注意点","title":"注意点","index":"4.3"},{"id":"测试注意点","title":"测试注意点","index":"4.4"}]},{"id":"总结","title":"总结","index":"5"}],"reading_time":"2420 words in 16 min"}