{"title":"手撕Vue-Router-提取路由信息","date":"2023-11-20T13:37:34.000Z","date_formatted":{"ll":"Nov 20, 2023","L":"11/20/2023","MM-DD":"11-20"},"link":"2023/11/20/手写VueRouter/02-手撕Vue-Router-提取路由信息","tags":["手写VueRouter"],"updated":"2023-11-20T15:40:31.103Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231120214044396-1894197530.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h1>\n<p>好了经过上一篇的学习，我们已经知道了如何监听 Hash 的变化，如何监听路径的一个变化，本篇我们就可以来实现我们自己的 VueRouter 了, 那么怎么实现呢，在实现之前我们先来回顾一下官方的 VueRouter 是怎么使用的。</p>\n<h1 id=\"vuerouter-的使用\">VueRouter 的使用<a title=\"#vuerouter-的使用\" href=\"#vuerouter-的使用\"></a></h1>\n<p>首先需要去下载官方的 VueRouter，如果是通过 npm 的方式就可以通过 npm install vue-router 来进行安装，如果是通过 script 的方式引入的话，可以通过 cdn 的方式来进行引入，然后我们就可以在 Vue 的实例中进行使用了。</p>\n<p>如上这是第一步，第二呢就是注册我们的 VueRouter，通过 Vue.use(VueRouter) 来进行注册，然后我们就可以在 Vue 的实例中进行使用了。</p>\n<p>通过观察 VueRouter 是通过，Vue.use 进行注册的，所以 VueRouter 是一个插件，所以说编写 VueRouter 就是在编写一个插件。</p>\n<p>好，那么我现在就新建一个 Nue-Router.js 文件，然后我们就可以开始编写我们的 VueRouter 了。</p>\n<p>紧接着我在文件内部搭建了一个插件的基本结构，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NueRouter</span> &#123;<br>&#125;<br><br><span class=\"hljs-title class_\">NueRouter</span>.<span class=\"hljs-property\">install</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">Vue, options</span>) =&gt;</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">NueRouter</span>;<br></code></pre></td></tr></table></figure>\n<p>搭建好了之后我们来看看怎么使用的，我通过观察官方的 VueRouter 的使用发现，是通过 new VueRouter({}) 的方式来进行使用的，在创建的时候给他传递了参数，所以说我们需要在 NueRouter 的构造函数中接收这个参数,  那么外界传递了什么参数给我们呢，通过观察官方的示例，可以得知传递了一个 mode 的参数，这个参数是用来指定路由的模式的，是 hash 还是 history，所以说我们需要在 NueRouter 的构造函数中接收这个参数，还传递了一个用户配置了路由的 routes 参数，所以说我们也需要在 NueRouter 的构造函数中接收这个参数，那么我们就可以在 NueRouter 的构造函数中接收这两个参数了，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NueRouter</span> &#123;<br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">options</span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">mode</span> = options.<span class=\"hljs-property\">mode</span> || <span class=\"hljs-string\">&#x27;hash&#x27;</span>;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">routes</span> = options.<span class=\"hljs-property\">routes</span> || [];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>保存好了这些信息之后还没完，为了后续我们方便去处理 routes 的信息，我需要改造一下，改造成什么样子呢，就是将之前的路由地址改造为 key, 组件是我们的一个 value，那么这样子的话我们将来就可以通过 key(路由地址) 去获取到我们的组件了，然后直接将我们获取到的组件渲染到 router-view 中就可以了。</p>\n<p>所以最终我要改造的数据结构如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">&#123;<br>    &#x27;/home&#x27;: Home,<br>    &#x27;/about&#x27;: About<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>那么我们怎么去改造呢，我们可以通过遍历 routes，然后将每一项的 path 作为 key，component 作为 value，组装一个全新的对象将全新的对象数组进行存储到 NueRouter 的 routes 中，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title function_\">createRoutesMap</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">routes</span>.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">map, route</span>) =&gt;</span> &#123;<br>        map[route.<span class=\"hljs-property\">path</span>] = route.<span class=\"hljs-property\">component</span>;<br>        <span class=\"hljs-keyword\">return</span> map;<br>    &#125;, &#123;&#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231120233743884-436537347.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"测试\">测试<a title=\"#测试\" href=\"#测试\"></a></h1>\n<p>好了，我们现在已经将我们的路由信息提取出来了，那么我们就可以进行测试了，我们将官方的 VueRouter 替换成我们自己的 NueRouter，然后运行项目，打开控制台，我们可以看到我们的路由信息已经被提取出来了。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231120233926866-1157693566.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"最后\">最后<a title=\"#最后\" href=\"#最后\"></a></h1>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231120214412151-115292144.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"手撕Vue-Router-初始化路由信息","link":"2023/11/21/手写VueRouter/03-手撕Vue-Router-初始化路由信息"},"next":{"title":"手撕Vue-Router-知识储备","link":"2023/11/18/手写VueRouter/01-手撕Vue-Router-知识储备"},"plink":"http://example.com/2023/11/20/手写VueRouter/02-手撕Vue-Router-提取路由信息/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"vuerouter-的使用","title":"VueRouter 的使用","index":"2"},{"id":"测试","title":"测试","index":"3"},{"id":"最后","title":"最后","index":"4"}],"reading_time":"920 words in 6 min"}