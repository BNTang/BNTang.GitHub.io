{"title":"「Dart」库","date":"2023-12-27T15:55:27.000Z","date_formatted":{"ll":"Dec 27, 2023","L":"12/27/2023","MM-DD":"12-27"},"link":"2023/12/27/Flutter/12-「Dart」库","tags":["Dart"],"updated":"2024-01-09T05:51:10.857Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231227235739312-1245918589.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h1>\n<ul>\n<li>在 Dart 中，库（Library）是一种组织 Dart 代码的方式</li>\n<li>库可以帮助你管理代码，实现代码的模块化，并控制哪些部分是公开的，哪些是私有的</li>\n<li>Dart 的库系统包括 <code>内置库</code>、<code>第三方库</code> 和 <code>自定义库</code></li>\n</ul>\n<h1 id=\"使用-dart-库\">使用 Dart 库<a title=\"#使用-dart-库\" href=\"#使用-dart-库\"></a></h1>\n<h2 id=\"导入库\">导入库<a title=\"#导入库\" href=\"#导入库\"></a></h2>\n<p>使用 import 关键字导入库。你可以导入 Dart 的内置库，如 <code>dart:math</code>，也可以导入外部的库或自定义的库:</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;dart:math&#x27;</span>;<br><br><span class=\"hljs-keyword\">void</span> main() &#123;<br>  <span class=\"hljs-built_in\">print</span>(sqrt(<span class=\"hljs-number\">4</span>));  <span class=\"hljs-comment\">// 使用 dart:math 库中的 sqrt 函数</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"创建自定义库\">创建自定义库<a title=\"#创建自定义库\" href=\"#创建自定义库\"></a></h2>\n<p>你可以创建自己的 Dart 文件，并将其作为库使用。使用 <code>part</code> 和 <code>part of</code> 指令可以拆分和组织大型库:</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-comment\">// my_library.dart</span><br><span class=\"hljs-keyword\">library</span> my_library;<br><br><span class=\"hljs-keyword\">part</span> <span class=\"hljs-string\">&#x27;src/part1.dart&#x27;</span>;<br><span class=\"hljs-keyword\">part</span> <span class=\"hljs-string\">&#x27;src/part2.dart&#x27;</span>;<br><br><span class=\"hljs-keyword\">void</span> myFunction() &#123;<br>  <span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-comment\">// src/part1.dart</span><br><span class=\"hljs-keyword\">part</span> of my_library;<br><br><span class=\"hljs-keyword\">void</span> part1Function() &#123;<br>  <span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"公共和私有作用域\">公共和私有作用域<a title=\"#公共和私有作用域\" href=\"#公共和私有作用域\"></a></h2>\n<p>Dart 通过下划线<code>（_）</code>前缀来标识私有成员。如果你在名称前加上下划线，那么该成员就只能在其所在的库内部访问:</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-comment\">// A private function inside a library</span><br><span class=\"hljs-keyword\">void</span> _privateFunction() &#123;<br>  <span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"使用第三方库\">使用第三方库<a title=\"#使用第三方库\" href=\"#使用第三方库\"></a></h2>\n<p>Dart 的包管理系统称为 <code>Pub</code>。你可以通过在项目的 <code>pubspec.yaml</code> 文件中声明依赖，来使用第三方库，后续等待我写完 <code>Dart</code> 系列后，出一篇 <code>Flutter</code> 系列的文章，详细介绍：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">dependencies:</span><br>  <span class=\"hljs-attr\">http:</span> <span class=\"hljs-string\">^0.13.3</span><br></code></pre></td></tr></table></figure>\n<h1 id=\"主要特点\">主要特点<a title=\"#主要特点\" href=\"#主要特点\"></a></h1>\n<ul>\n<li><strong>模块化和封装</strong>：库提供了一种将相关功能组织在一起的方式，有助于创建模块化和可维护的代码。</li>\n<li><strong>重用性</strong>：通过库，你可以轻松地在不同的项目之间共享和重用代码。</li>\n<li><strong>隔离</strong>：通过控制哪些部分是公开的，哪些是私有的，库有助于限制代码的作用域和访问级别。</li>\n</ul>\n<blockquote>\n<p>Dart 的库系统是其语言设计的一个重要部分，提供了强大的代码组织和重用机制。</p>\n</blockquote>\n<h1 id=\"end\">End<a title=\"#end\" href=\"#end\"></a></h1>\n<ul>\n<li>如果你有任何问题或建议，欢迎在下方留言，我会尽快回复</li>\n<li>如果你觉得本文对你有帮助，欢迎点赞、收藏，你的支持是我写作的最大动力</li>\n</ul>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231211215004818-977875224.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"「Dart」异步编程","link":"2023/12/29/Flutter/13-「Dart」异步编程"},"next":{"title":"Dart-类(下)","link":"2023/12/27/Flutter/11-Dart-类(下)"},"plink":"http://example.com/2023/12/27/Flutter/12-「Dart」库/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"使用-dart-库","title":"使用 Dart 库","index":"2","children":[{"id":"导入库","title":"导入库","index":"2.1"},{"id":"创建自定义库","title":"创建自定义库","index":"2.2"},{"id":"公共和私有作用域","title":"公共和私有作用域","index":"2.3"},{"id":"使用第三方库","title":"使用第三方库","index":"2.4"}]},{"id":"主要特点","title":"主要特点","index":"3"},{"id":"end","title":"End","index":"4"}]}