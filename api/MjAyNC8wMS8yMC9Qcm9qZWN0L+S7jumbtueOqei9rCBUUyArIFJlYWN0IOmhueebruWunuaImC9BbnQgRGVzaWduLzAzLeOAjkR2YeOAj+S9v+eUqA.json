{"title":"『Dva』使用","date":"2024-01-20T11:32:01.000Z","date_formatted":{"ll":"Jan 20, 2024","L":"01/20/2024","MM-DD":"01-20"},"link":"2024/01/20/Project/从零玩转 TS + React 项目实战/Ant Design/03-『Dva』使用","tags":["Dva"],"updated":"2024-01-22T01:13:56.973Z","content":"<p>[toc]</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240121111657582-1273377238.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"一、前言\">一、前言<a title=\"#一、前言\" href=\"#一、前言\"></a></h1>\n<blockquote>\n<ul>\n<li>🐤本篇文章是『从零玩转 TypeScript + React 项目实战』系列文章的第 3 篇，主要介绍『Dva』的使用</li>\n</ul>\n</blockquote>\n<p>在上一篇文章中，我们介绍了『Ant Design』的主题定制，到此为止 Ant Design 的内容就介绍到这，在企业开发当中我们只需要安装 Ant Design 导入 Ant Design，找到你自己需要使用的组件，把需要使用的组件拷贝到项目中，然后看一下组件提供了什么样的属性与方法，根据提供的属性和方法来进行使用即可。</p>\n<p>Ant Design 除了封了了 PC 端一些常用的组件以外，还封装了移动端的组件，如果您想看一下他封装了那些移动端组件，你可以搜索『Ant Design Mobile』，然后进入官网查看。</p>\n<p>Ant Design Mobile 官网：<a href=\"https://antd-mobile-v2.surge.sh/index-cn\" target=\"_blank\">https://antd-mobile-v2.surge.sh/index-cn</a> 打开官方网站后，找到 <code>Web 组件</code>：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240121112543690-1305837790.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>在这个里面就可以看到他封装了那些组件，使用方式和之前讲解的 Ant Design 的使用方式是一样的，只不过这里的组件是移动端的组件，如果您想要使用移动端的组件，那么就可以使用这里的组件，所以我就不再介绍了。</p>\n<p>这篇文章我们就来介绍『Dva』的使用，那么什么是『Dva』呢？</p>\n<h1 id=\"二、dva\">二、Dva<a title=\"#二、dva\" href=\"#二、dva\"></a></h1>\n<h2 id=\"1.什么是『dva』\">1.什么是『Dva』<a title=\"#1.什么是『dva』\" href=\"#1.什么是『dva』\"></a></h2>\n<p>dva 是一个轻量级的应用框架，是一个基于 <code>redux</code> 和 <code>redux-saga</code> 的数据流解决方案，也就是说使用它能让我们更轻松的，更简单的去保存数据，并且呢这个 dva 的这个框架，内部内置了 <code>react-router、redux、redux-saga</code>，所以我们在使用 dva 的时候，就不需要再去安装这些依赖了，直接安装 dva 就可以了。</p>\n<p>了解完了什么是 dva 之后，我们就来看一下 dva 的使用。</p>\n<h2 id=\"2.使用\">2.使用<a title=\"#2.使用\" href=\"#2.使用\"></a></h2>\n<p>首先来到官方网站：<a href=\"https://dvajs.com\" target=\"_blank\">https://dvajs.com</a>：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240121113126973-1673086548.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>官方网站的介绍我们就不用看了，我们先使用 create-react-app 创建一个项目，create-react-app 是什么这里不赘述，如果您不知道的话，可以去看一下我之前写的文章，这里我创建了一个叫做 dva-demo 的项目：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">create-react-app dva-demo<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240121113748008-1609163467.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>项目创建完毕了，接下来就通过这个项目加上 dva 来编写一个 React 项目，这里我们就来简单点，我就渲染一个 App 组件即可。</p>\n<p>要想使用 dva，那肯定不用多说，我们需要先安装 dva，安装 dva 的命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install dva --save<br></code></pre></td></tr></table></figure>\n<p><code>--save</code> 是什么意思呢？就是把 dva 安装到我们的项目当中，然后在 package.json 文件中的 dependencies 中添加 dva 的依赖，这样的话，我们在项目中就可以使用 dva 了。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240121114621123-892429465.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>然后找到 index.js 文件，在顶部导入 dva：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> dva <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;dva&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<p>要想要使用 dva，我们需要先创建一个 dva 的实例，创建 dva 实例的方式如下：</p>\n<ol>\n<li>创建 dva 实例，<code>import dva from 'dva'</code> 导入的其实是一个方法，我们需要调用这个方法，然后把调用的结果赋值给一个变量，这个变量就是 dva 的实例，代码如下：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">dva</span>();<br></code></pre></td></tr></table></figure>\n<p>创建 dva 实例之后，就可以利用这个实例来渲染我们的组件了，那怎么使用这个实例来渲染组件呢？首先我们得要定义自己的组件然后再渲染，所以我们先定义一个根组件，叫做 App 组件，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">            App</span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    );<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后我们需要把这个 App 组件渲染到页面当中，那么怎么渲染呢？我们需要调用 dva 实例的 <code>app.router()</code> 方法，这个方法接收一个函数，这个函数的返回值就是我们要渲染的组件，这个叫做注册路由表，意思是告诉 dva 需要渲染哪个组件，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">app.<span class=\"hljs-title function_\">router</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span></span>);<br></code></pre></td></tr></table></figure>\n<p>告诉 dva 渲染哪个组件之后，我们还需要真正的去渲染一下，就是启动 dva，启动 dva 的方式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">app.<span class=\"hljs-title function_\">start</span>(<span class=\"hljs-string\">&#x27;#root&#x27;</span>);<br></code></pre></td></tr></table></figure>\n<p>start 方法接收一个参数，这个参数是一个选择器，这个选择器是用来告诉 dva 渲染到哪个元素上，这里我们渲染到 id 为 root 的元素上，所以我们需要在 index.html 文件中添加一个 id 为 root 的元素，这个元素脚手架已经帮我们添加好了，我们不需要再添加了。</p>\n<p>到这里我们就完成了 dva 的使用，我们来看一下效果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240121115624454-946659574.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>我们可以看到页面上渲染出了 App。</p>\n<p>好了到此为止这个就是如何去使用 dva 来渲染我们的组件，和过去的方式是有一点点的不同的，过去我们怎么渲染的，是不是直接调用 render 方法，现在呢，现在不是调用 render 方法了，而是调用 dva 实例的 router 方法，然后把渲染的组件传递给这个方法，然后再调用 dva 实例的 start 方法，把渲染的元素传递给这个方法，这样就可以渲染我们的组件了。</p>\n<p>dva start 就是设置渲染到什么地方，好了这样就可以渲染我们的组件了，这就是 dva 的使用。</p>\n<h1 id=\"三、总结\">三、总结<a title=\"#三、总结\" href=\"#三、总结\"></a></h1>\n<p>通过本文的学习，您可以掌握以下知识点：</p>\n<ul>\n<li>\n<ol>\n<li>了解『Dva』</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>了解『Dva』的使用方式</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>了解『Dva』的使用方式和过去的方式的区别</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li>🐤如果您觉得本文对您有所帮助，欢迎点赞、收藏或分享，您的支持是我创作的最大动力！</li>\n</ul>\n</blockquote>\n<p>这篇文章的内容就介绍到这里，期待我们下次的相遇。感谢您花时间阅读，如果有任何问题或想法，欢迎在评论区留言。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231211215004818-977875224.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"『Dva』管理数据","link":"2024/01/21/Project/从零玩转 TS + React 项目实战/Ant Design/04-『Dva』管理数据"},"next":{"title":"『Ant Design』主题定制","link":"2024/01/20/Project/从零玩转 TS + React 项目实战/Ant Design/02-『Ant Design』主题定制"},"plink":"http://example.com/2024/01/20/Project/从零玩转 TS + React 项目实战/Ant Design/03-『Dva』使用/","toc":[{"id":"一、前言","title":"一、前言","index":"1"},{"id":"二、dva","title":"二、Dva","index":"2","children":[{"id":"1.什么是『dva』","title":"1.什么是『Dva』","index":"2.1"},{"id":"2.使用","title":"2.使用","index":"2.2"}]},{"id":"三、总结","title":"三、总结","index":"3"}]}