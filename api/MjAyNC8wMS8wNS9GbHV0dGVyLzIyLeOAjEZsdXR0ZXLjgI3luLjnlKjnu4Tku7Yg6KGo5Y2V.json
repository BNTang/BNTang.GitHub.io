{"title":"『Flutter』常用组件 表单","date":"2024-01-04T16:14:28.000Z","date_formatted":{"ll":"Jan 5, 2024","L":"01/05/2024","MM-DD":"01-05"},"link":"2024/01/05/Flutter/22-「Flutter」常用组件 表单","tags":["Flutter"],"updated":"2024-01-09T05:51:10.858Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240101130244534-303737892.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"1.前言\">1.前言<a title=\"#1.前言\" href=\"#1.前言\"></a></h1>\n<p>在上一篇文章中，介绍完毕了常用组件中的 TextField 组件，本篇文章将继续介绍常用组件中的表单组件。</p>\n<h1 id=\"2.表单\">2.表单<a title=\"#2.表单\" href=\"#2.表单\"></a></h1>\n<h2 id=\"2.1.介绍\">2.1.介绍<a title=\"#2.1.介绍\" href=\"#2.1.介绍\"></a></h2>\n<p>在Flutter中，表单（Form）是一个用于数据收集和验证的容器组件。它通常与 <code>TextField</code> 和 <code>FormField</code> 等输入组件结合使用，以创建一个完整的用户输入表单。表单组件的主要作用是对输入数据进行验证和管理。</p>\n<h2 id=\"2.2.常用属性\">2.2.常用属性<a title=\"#2.2.常用属性\" href=\"#2.2.常用属性\"></a></h2>\n<ol>\n<li><code>key</code>：<code>GlobalKey&lt;FormState&gt;</code> 类型，用于控制和访问表单的状态，如验证表单和保存表单数据。</li>\n<li><code>autovalidateMode</code>：控制表单字段的自动验证模式。例如，可以设置为 <code>AutovalidateMode.always</code> 让表单字段总是自动验证。</li>\n<li><code>onWillPop</code>：当用户尝试离开表单页时触发的回调，可以用于提示保存更改。</li>\n<li><code>onChanged</code>：当表单内任意一个表单字段的内容发生变化时调用的回调函数。</li>\n</ol>\n<h2 id=\"2.3.示例代码\">2.3.示例代码<a title=\"#2.3.示例代码\" href=\"#2.3.示例代码\"></a></h2>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class=\"hljs-keyword\">void</span> main() =&gt; runApp(MyApp());<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>&#123;<br>  <span class=\"hljs-meta\">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class=\"hljs-keyword\">return</span> MaterialApp(<br>      home: Scaffold(<br>        appBar: AppBar(<br>          title: Text(<span class=\"hljs-string\">&#x27;Form Example&#x27;</span>),<br>        ),<br>        body: MyCustomForm(),<br>      ),<br>    );<br>  &#125;<br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyCustomForm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>&#123;<br>  <span class=\"hljs-meta\">@override</span><br>  _MyCustomFormState createState() =&gt; _MyCustomFormState();<br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_MyCustomFormState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State</span>&lt;<span class=\"hljs-title\">MyCustomForm</span>&gt; </span>&#123;<br>  <span class=\"hljs-keyword\">final</span> _formKey = GlobalKey&lt;FormState&gt;();<br><br>  <span class=\"hljs-meta\">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class=\"hljs-keyword\">return</span> Form(<br>      key: _formKey,<br>      child: Column(<br>        crossAxisAlignment: CrossAxisAlignment.start,<br>        children: &lt;Widget&gt;[<br>          TextFormField(<br>            decoration: InputDecoration(<br>              hintText: <span class=\"hljs-string\">&#x27;Enter your email&#x27;</span>,<br>            ),<br>            validator: (value) &#123;<br>              <span class=\"hljs-keyword\">if</span> (value == <span class=\"hljs-keyword\">null</span> || value.isEmpty) &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;Please enter some text&#x27;</span>;<br>              &#125;<br>              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>            &#125;,<br>          ),<br>          Padding(<br>            padding: <span class=\"hljs-keyword\">const</span> EdgeInsets.symmetric(vertical: <span class=\"hljs-number\">16.0</span>),<br>            child: ElevatedButton(<br>              onPressed: () &#123;<br>                <span class=\"hljs-keyword\">if</span> (_formKey.currentState!.validate()) &#123;<br>                  ScaffoldMessenger.of(context)<br>                      .showSnackBar(SnackBar(content: Text(<span class=\"hljs-string\">&#x27;Processing Data&#x27;</span>)));<br>                &#125;<br>              &#125;,<br>              child: Text(<span class=\"hljs-string\">&#x27;Submit&#x27;</span>),<br>            ),<br>          ),<br>        ],<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>在这个例子中，创建了一个带有 <code>GlobalKey</code> 的表单，它包含一个 <code>TextFormField</code> 用于输入和验证邮箱地址，并有一个提交按钮，当表单验证通过时会显示一个提示。</p>\n<h2 id=\"2.4.运行效果\">2.4.运行效果<a title=\"#2.4.运行效果\" href=\"#2.4.运行效果\"></a></h2>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240106014650380-201916023.gif\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"3._formkey\">3._formKey<a title=\"#3._formkey\" href=\"#3._formkey\"></a></h1>\n<h2 id=\"3.1.介绍\">3.1.介绍<a title=\"#3.1.介绍\" href=\"#3.1.介绍\"></a></h2>\n<p><code>_formKey</code> 在 Flutter 中通常是作为一个 <code>GlobalKey&lt;FormState&gt;</code> 实例来使用，主要用于管理 <code>Form</code> 组件。它提供了对表单的控制，使得开发者可以在表单外部执行一些操作，如验证表单、保存表单数据、重置表单等。</p>\n<h2 id=\"3.2._formkey-的主要用法\">3.2._formKey 的主要用法<a title=\"#3.2._formkey-的主要用法\" href=\"#3.2._formkey-的主要用法\"></a></h2>\n<ol>\n<li>**验证表单（Validating the Form）：**通过 <code>_formKey.currentState.validate()</code> 可以触发表单中每个 <code>FormField</code> 的验证逻辑。</li>\n<li>**保存表单数据（Saving Form Data）：**通过 <code>_formKey.currentState.save()</code> 可以调用表单中每个 <code>FormField</code> 的 <code>onSaved</code> 方法。</li>\n<li><strong>重置表单（Resetting the Form）</strong>：使用 <code>_formKey.currentState.reset()</code> 可以重置表单到初始状态，清除所有 <code>FormField</code> 的内容。</li>\n</ol>\n<h1 id=\"4.参考资料\">4.参考资料<a title=\"#4.参考资料\" href=\"#4.参考资料\"></a></h1>\n<ul>\n<li><a href=\"https://api.flutter.dev/flutter/widgets/Form-class.html\" target=\"_blank\">https://api.flutter.dev/flutter/widgets/Form-class.html</a></li>\n</ul>\n<h1 id=\"end\">End<a title=\"#end\" href=\"#end\"></a></h1>\n<ul>\n<li>🐤如果您对本文有任何疑问或想法，请在评论区留言，我将很乐意与您交流。</li>\n<li>🐰您的每一条评论对我都至关重要，我会尽快给予回复。</li>\n<li>🎈如果您觉得这篇文章对您有所启发或帮助，请不吝赞赏、收藏或分享。</li>\n<li>🎁您的每一个动作都是对我创作的最大鼓励和支持。</li>\n<li>👍谢谢您的阅读和陪伴！</li>\n</ul>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231211215004818-977875224.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"『Flutter』命名路由","link":"2024/01/06/Flutter/24-『Flutter』命名路由"},"next":{"title":"『Flutter』常用组件 TextField","link":"2024/01/04/Flutter/21-「Flutter」常用组件 TextField"},"plink":"http://example.com/2024/01/05/Flutter/22-「Flutter」常用组件 表单/","toc":[{"id":"1.前言","title":"1.前言","index":"1"},{"id":"2.表单","title":"2.表单","index":"2","children":[{"id":"2.1.介绍","title":"2.1.介绍","index":"2.1"},{"id":"2.2.常用属性","title":"2.2.常用属性","index":"2.2"},{"id":"2.3.示例代码","title":"2.3.示例代码","index":"2.3"},{"id":"2.4.运行效果","title":"2.4.运行效果","index":"2.4"}]},{"id":"3._formkey","title":"3._formKey","index":"3","children":[{"id":"3.1.介绍","title":"3.1.介绍","index":"3.1"},{"id":"3.2._formkey-的主要用法","title":"3.2._formKey 的主要用法","index":"3.2"}]},{"id":"4.参考资料","title":"4.参考资料","index":"4"},{"id":"end","title":"End","index":"5"}]}