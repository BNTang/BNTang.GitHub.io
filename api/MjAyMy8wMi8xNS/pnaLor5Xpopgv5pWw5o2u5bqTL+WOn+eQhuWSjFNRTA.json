{"title":"原理和SQL","date":"2023-02-15T04:20:28.000Z","date_formatted":{"ll":"Feb 15, 2023","L":"02/15/2023","MM-DD":"02-15"},"link":"2023/02/15/面试题/数据库/原理和SQL","tags":["数据库"],"updated":"2023-02-15T04:32:41.972Z","content":"<h1 id=\"什么是事务？事务基本特性acid？\">什么是事务？事务基本特性ACID？<a title=\"#什么是事务？事务基本特性acid？\" href=\"#什么是事务？事务基本特性acid？\"></a></h1>\n<p>事务指的是满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202302/2105804-20230212211821299-1436760381.png\" alt=\"image-20230212211820906\" loading=\"lazy\" class=\"φbp\"></p>\n<p><strong>事务基本特性ACID</strong>?：</p>\n<ul>\n<li><strong>A原子性(atomicity)</strong> 指的是一个事务中的操作要么全部成功，要么全部失败。</li>\n<li><strong>C一致性(consistency)</strong> 指的是数据库总是从一个一致性的状态转换到另外一个一致性的状态。比如A转账给B100块钱，假设中间sql执行过程中系统崩溃A也不会损失100块，因为事务没有提交，修改也就不会保存到数据库。</li>\n<li><strong>I隔离性(isolation)</strong> 指的是一个事务的修改在最终提交前，对其他事务是不可见的。</li>\n<li><strong>D持久性(durability)</strong> 指的是一旦事务提交，所做的修改就会永久保存到数据库中。</li>\n</ul>\n<h1 id=\"数据库中并发一致性问题？\">数据库中并发一致性问题？<a title=\"#数据库中并发一致性问题？\" href=\"#数据库中并发一致性问题？\"></a></h1>\n<p>在并发环境下，事务的隔离性很难保证，因此会出现很多并发一致性问题。</p>\n<ul>\n<li>丢失修改</li>\n</ul>\n<p>T1 和 T2 两个事务都对一个数据进行修改，T1 先修改，T2 随后修改，T2 的修改覆盖了 T1 的修改。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202302/2105804-20230212215554418-1532512108.png\" alt=\"image-20230212215553928\" loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li>读脏数据</li>\n</ul>\n<p>T1 修改一个数据，T2 随后读取这个数据。如果 T1 撤销了这次修改，那么 T2 读取的数据是脏数据。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202302/2105804-20230214120833893-931774296.png\" alt=\"image-20230214120833413\" loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li><strong>不可重复读</strong></li>\n</ul>\n<p>T2 读取一个数据，T1 对该数据做了修改。如果 T2 再次读取这个数据，此时读取的结果和第一次读取的结果不同。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202302/2105804-20230214121220065-455434124.png\" alt=\"image-20230214121219761\" loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li>幻影读</li>\n</ul>\n<p>T1 读取某个范围的数据，T2 在这个范围内插入新的数据，T1 再次读取这个范围的数据，此时读取的结果和第一次读取的结果不同。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202302/2105804-20230214121418624-1726365472.png\" alt=\"image-20230214121418451\" loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"事务的隔离等级？\">事务的隔离等级？<a title=\"#事务的隔离等级？\" href=\"#事务的隔离等级？\"></a></h1>\n<ul>\n<li>未提交读(READ UNCOMMITTED) 事务中的修改，即使没有提交，对其它事务也是可见的。</li>\n<li>提交读(READ COMMITTED) 一个事务只能读取已经提交的事务所做的修改。换句话说，一个事务所做的修改在提交之前对其它事务是不可见的。</li>\n<li>可重复读(REPEATABLE READ) 保证在同一个事务中多次读取同样数据的结果是一样的。</li>\n<li>可串行化(SERIALIZABLE) 强制事务串行执行。</li>\n</ul>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻影读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>未提交读</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>提交读</td>\n<td>×</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>可重复读</td>\n<td>×</td>\n<td>×</td>\n<td>√</td>\n</tr>\n<tr>\n<td>可串行化</td>\n<td>×</td>\n<td>×</td>\n<td>×</td>\n</tr>\n</tbody>\n</table></div></div><h1 id=\"acid靠什么保证的呢\">ACID靠什么保证的呢<a title=\"#acid靠什么保证的呢\" href=\"#acid靠什么保证的呢\"></a></h1>\n<ul>\n<li><strong>A原子性(atomicity)</strong> 由undo log日志保证，它记录了需要回滚的日志信息，事务回滚时撤销已经执行成功的sql</li>\n<li><strong>C一致性(consistency)</strong> 一般由代码层面来保证</li>\n<li><strong>I隔离性(isolation)</strong> 由MVCC来保证</li>\n<li><strong>D持久性(durability)</strong> 由内存+redo log来保证，mysql修改数据同时在内存和redo log记录这次操作，事务提交的时候通过redo log刷盘，宕机的时候可以从redo log恢复</li>\n</ul>\n<h1 id=\"sql-优化的实践经验？\">SQL 优化的实践经验？<a title=\"#sql-优化的实践经验？\" href=\"#sql-优化的实践经验？\"></a></h1>\n<ol>\n<li>对查询进行优化，要尽量避免 <code>全表扫描</code>，首先应考虑在 where 及 order by 涉及的列上建立索引。</li>\n<li>应尽量避免在 where 子句中对字段进行 <code>null</code> 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> id <span class=\"hljs-keyword\">from</span> t <span class=\"hljs-keyword\">where</span> num <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">null</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>最好不要给数据库留NULL，尽可能的使用 NOT NULL填充数据库;</li>\n<li><code>备注</code>、<code>描述</code>、<code>评论之类</code>的可以设置为 NULL，其他的，最好不要使用NULL。</li>\n<li>不要以为 NULL 不需要空间，比如：char(100) 型，在字段建立时，空间就固定了， 不管是否插入值（NULL也包含在内），都是占用 100个字符的空间的，如果是varchar这样的变长字段， null 不占用空间。</li>\n<li>可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> id <span class=\"hljs-keyword\">from</span> t <span class=\"hljs-keyword\">where</span> num <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>应尽量避免在 where 子句中使用 <code>!=</code> 或 <code>&lt;&gt;</code> 操作符，否则将导致引擎放弃使用索引而进行全表扫描。</li>\n<li>应尽量避免在 where 子句中使用 <code>or</code> 来连接条件，如果一个字段有索引，一个字段没有索引，将导致引擎放弃使用索引而进行全表扫描，如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> id <span class=\"hljs-keyword\">from</span> t <span class=\"hljs-keyword\">where</span> num <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-keyword\">or</span> Name <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;admin&#x27;</span><br></code></pre></td></tr></table></figure>\n<p>可以这样查询：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> id <span class=\"hljs-keyword\">from</span> t <span class=\"hljs-keyword\">where</span> num <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span><br><span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">all</span><br><span class=\"hljs-keyword\">select</span> id <span class=\"hljs-keyword\">from</span> t <span class=\"hljs-keyword\">where</span> Name <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;admin&#x27;</span><br></code></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>in 和 not in 也要<code>慎用</code>，否则会导致全表扫描，如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> id <span class=\"hljs-keyword\">from</span> t <span class=\"hljs-keyword\">where</span> num <span class=\"hljs-keyword\">in</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>)<br></code></pre></td></tr></table></figure>\n<p>对于连续的数值，能用 <code>between</code> 就不要用 <code>in</code> 了：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> id <span class=\"hljs-keyword\">from</span> t <span class=\"hljs-keyword\">where</span> num <span class=\"hljs-keyword\">between</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">3</span><br></code></pre></td></tr></table></figure>\n<p>很多时候用 exists 代替 in 是一个好的选择：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> num <span class=\"hljs-keyword\">from</span> a <span class=\"hljs-keyword\">where</span> num <span class=\"hljs-keyword\">in</span>(<span class=\"hljs-keyword\">select</span> num <span class=\"hljs-keyword\">from</span> b)<br></code></pre></td></tr></table></figure>\n<p>用下面的语句替换：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> num <span class=\"hljs-keyword\">from</span> a <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">exists</span>(<span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">from</span> b <span class=\"hljs-keyword\">where</span> num<span class=\"hljs-operator\">=</span>a.num)<br></code></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>下面的查询也将导致全表扫描：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> id <span class=\"hljs-keyword\">from</span> t <span class=\"hljs-keyword\">where</span> name <span class=\"hljs-keyword\">like</span> ‘<span class=\"hljs-operator\">%</span>abc<span class=\"hljs-operator\">%</span>’<br></code></pre></td></tr></table></figure>\n<p>若要提高效率，可以考虑全文检索。</p>\n<ol start=\"7\">\n<li>如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> id <span class=\"hljs-keyword\">from</span> t <span class=\"hljs-keyword\">where</span> num <span class=\"hljs-operator\">=</span> <span class=\"hljs-variable\">@num</span><br></code></pre></td></tr></table></figure>\n<p>可以改为强制查询使用索引：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> id <span class=\"hljs-keyword\">from</span> t <span class=\"hljs-keyword\">with</span>(index(索引名)) <span class=\"hljs-keyword\">where</span> num <span class=\"hljs-operator\">=</span> <span class=\"hljs-variable\">@num</span><br></code></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> id <span class=\"hljs-keyword\">from</span> t <span class=\"hljs-keyword\">where</span> num<span class=\"hljs-operator\">/</span><span class=\"hljs-number\">2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100</span><br></code></pre></td></tr></table></figure>\n<p>应改为:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> id <span class=\"hljs-keyword\">from</span> t <span class=\"hljs-keyword\">where</span> num <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100</span><span class=\"hljs-operator\">*</span><span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> id <span class=\"hljs-keyword\">from</span> t <span class=\"hljs-keyword\">where</span> <span class=\"hljs-built_in\">substring</span>(name,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>) <span class=\"hljs-operator\">=</span> ’abc’;       <span class=\"hljs-operator\">-</span>–name以abc开头的id<br><span class=\"hljs-keyword\">select</span> id <span class=\"hljs-keyword\">from</span> t <span class=\"hljs-keyword\">where</span> datediff(<span class=\"hljs-keyword\">day</span>,createdate,’<span class=\"hljs-number\">2005</span><span class=\"hljs-number\">-11</span><span class=\"hljs-number\">-30</span>′) <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>    <span class=\"hljs-operator\">-</span>–‘<span class=\"hljs-number\">2005</span><span class=\"hljs-number\">-11</span><span class=\"hljs-number\">-30</span>’    <span class=\"hljs-comment\">--生成的id</span><br></code></pre></td></tr></table></figure>\n<p>应改为:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> id <span class=\"hljs-keyword\">from</span> t <span class=\"hljs-keyword\">where</span> name <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">&#x27;abc%&#x27;</span><br><span class=\"hljs-keyword\">select</span> id <span class=\"hljs-keyword\">from</span> t <span class=\"hljs-keyword\">where</span> createdate <span class=\"hljs-operator\">&gt;=</span> <span class=\"hljs-string\">&#x27;2005-11-30&#x27;</span> <span class=\"hljs-keyword\">and</span> createdate <span class=\"hljs-operator\">&lt;</span> <span class=\"hljs-string\">&#x27;2005-12-1&#x27;</span><br></code></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</li>\n<li>在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</li>\n<li>不要写一些没有意义的查询，如需要生成一个空表结构：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> col1,col2 <span class=\"hljs-keyword\">into</span> new_t <span class=\"hljs-keyword\">from</span> t <span class=\"hljs-keyword\">where</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://blog.csdn.net/wangluo605/article/details/82289209\" target=\"_blank\">select into …from… 提示 Undeclared variable…错误的解决办法</a></li>\n</ul>\n<p>这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> t(…)<br></code></pre></td></tr></table></figure>\n<ol start=\"13\">\n<li>Update 语句，如果只更改1、2个字段，不要Update全部字段，否则频繁调用会引起明显的性能消耗，同时带来大量日志。</li>\n<li>对于多张大数据量（这里几百条就算大了）的表JOIN，要先分页再JOIN，否则逻辑读会很高，性能很差。</li>\n<li>select count(*) from table；这样不带任何条件的count会引起全表扫描，并且没有任何业务意义，是一定要杜绝的。</li>\n<li>索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。</li>\n<li>应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。</li>\n</ol>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202302/2105804-20230214132708108-227773441.png\" alt=\"image-20230214132707844\" loading=\"lazy\" class=\"φbp\"></p>\n<ol start=\"18\">\n<li>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连 接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</li>\n<li>尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先可变长度字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</li>\n<li>任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。</li>\n<li>尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。</li>\n</ol>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202302/2105804-20230214133437504-1809844132.png\" alt=\"image-20230214133434481\" loading=\"lazy\" class=\"φbp\"></p>\n<ol start=\"22\">\n<li>避免频繁创建和删除临时表，以减少系统表资源的消耗。临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件， 最好使用导出表。</li>\n<li>在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</li>\n<li>如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</li>\n<li>尽量避免使用 <code>游标</code>，因为 <code>游标</code> 的效率较差，如果游标操作的数据超过 <code>1万行</code>，那么就应该考虑改写。</li>\n<li>使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</li>\n<li>与临时表一样，游标并不是不可使用。对小型数据集使用 <code>FAST_FORWARD</code> 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时 间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</li>\n<li>在所有的存储过程和触发器的开始处设置 <code>SET NOCOUNT ON</code> ，在结束时设置 <code>SET NOCOUNT OFF</code> 。无需在执行存储过程和触发器的每个语句后向客户端发送 <code>DONE_IN_PROC</code> 消息。</li>\n<li>尽量避免大事务操作，提高系统并发能力。</li>\n<li>尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</li>\n</ol>\n<h1 id=\"buffer-pool、redo-log-buffer-和undo-log、redo-log、bin-log-概念以及关系？\">Buffer Pool、Redo Log Buffer 和undo log、redo log、bin log 概念以及关系？<a title=\"#buffer-pool、redo-log-buffer-和undo-log、redo-log、bin-log-概念以及关系？\" href=\"#buffer-pool、redo-log-buffer-和undo-log、redo-log、bin-log-概念以及关系？\"></a></h1>\n<ul>\n<li>Buffer Pool 是 MySQL 的一个非常重要的组件，因为针对数据库的增删改操作都是在 Buffer Pool 中完成的</li>\n<li>Undo log 记录的是数据操作前的样子</li>\n<li>redo log 记录的是数据被操作后的样子（redo log 是 Innodb 存储引擎特有）</li>\n<li>bin log 记录的是整个操作记录（这个对于主从复制具有非常重要的意义）</li>\n</ul>\n<h1 id=\"从准备更新一条数据到事务的提交的流程描述？\">从准备更新一条数据到事务的提交的流程描述？<a title=\"#从准备更新一条数据到事务的提交的流程描述？\" href=\"#从准备更新一条数据到事务的提交的流程描述？\"></a></h1>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202302/2105804-20230215121249944-1432496790.png\" alt=\"image-20230215121249049\" loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li>首先执行器根据 MySQL 的执行计划来查询数据，先是从缓存池中查询数据，如果没有就会去数据库中查询，如果查询到了就将其放到缓存池中</li>\n<li>在数据被缓存到缓存池的同时，会写入 undo log 日志文件</li>\n<li>更新的动作是在 BufferPool 中完成的，同时会将更新后的数据添加到 redo log buffer 中</li>\n<li>完成以后就可以提交事务，在提交的同时会做以下三件事\n<ul>\n<li>将redo log buffer中的数据刷入到 redo log 文件中</li>\n<li>将本次操作记录写入到 bin log文件中</li>\n<li>将 bin log 文件名字和更新内容在 bin log 中的位置记录到redo log中，同时在 redo log 最后添加 commit 标记</li>\n</ul>\n</li>\n</ul>\n","prev":{"title":"MySQL","link":"2023/02/15/面试题/数据库/MySQL"},"next":{"title":"JVM当中有哪些类加载器, 他们分别加载哪些内容","link":"2023/01/31/面试题/JVM/02-JVM当中有哪些类加载器, 他们分别加载哪些内容"},"plink":"http://example.com/2023/02/15/面试题/数据库/原理和SQL/","toc":[{"id":"什么是事务？事务基本特性acid？","title":"什么是事务？事务基本特性ACID？","index":"1"},{"id":"数据库中并发一致性问题？","title":"数据库中并发一致性问题？","index":"2"},{"id":"事务的隔离等级？","title":"事务的隔离等级？","index":"3"},{"id":"acid靠什么保证的呢","title":"ACID靠什么保证的呢","index":"4"},{"id":"sql-优化的实践经验？","title":"SQL 优化的实践经验？","index":"5"},{"id":"buffer-pool、redo-log-buffer-和undo-log、redo-log、bin-log-概念以及关系？","title":"Buffer Pool、Redo Log Buffer 和undo log、redo log、bin log 概念以及关系？","index":"6"},{"id":"从准备更新一条数据到事务的提交的流程描述？","title":"从准备更新一条数据到事务的提交的流程描述？","index":"7"}],"reading_time":"3362 words in 22 min"}