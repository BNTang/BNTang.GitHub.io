{"title":"Dart-类(上)","date":"2023-12-25T16:39:44.000Z","date_formatted":{"ll":"Dec 26, 2023","L":"12/26/2023","MM-DD":"12-26"},"link":"2023/12/26/Flutter/10-Dart-类(上)","tags":["Dart"],"updated":"2024-01-09T05:51:10.857Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231226003958947-1374490798.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h1>\n<ul>\n<li>在 Dart 中，类（Class）是一种用于创建对象的模板</li>\n<li>它可以封装数据和方法</li>\n<li>JavaScript 也有类的概念，虽然它在 ES6（ECMAScript 2015）之前是以不同的方式实现的</li>\n</ul>\n<h1 id=\"类的定义与使用\">类的定义与使用<a title=\"#类的定义与使用\" href=\"#类的定义与使用\"></a></h1>\n<h2 id=\"dart-中的类\">Dart 中的类<a title=\"#dart-中的类\" href=\"#dart-中的类\"></a></h2>\n<ul>\n<li>在 Dart 中，你可以这样定义一个类：</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span> </span>&#123;<br>  <span class=\"hljs-built_in\">String</span> name;<br>  <span class=\"hljs-built_in\">int</span> age;<br><br>  Person(<span class=\"hljs-keyword\">this</span>.name, <span class=\"hljs-keyword\">this</span>.age);<br><br>  <span class=\"hljs-keyword\">void</span> introduce() &#123;<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Hello, my name is <span class=\"hljs-subst\">$name</span> and I am <span class=\"hljs-subst\">$age</span> years old.&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">void</span> main() &#123;<br>  <span class=\"hljs-keyword\">var</span> person = Person(<span class=\"hljs-string\">&quot;Alice&quot;</span>, <span class=\"hljs-number\">30</span>);<br>  person.introduce();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231227003137132-344967937.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>在上面简单的介绍了下如何在 Dart 中定义类，接下来我来为大家解读一下这段代码。</p>\n<ul>\n<li><code>Person(this.name, this.age);</code> 这是一个构造函数，是一种语法糖的写法</li>\n<li><code>void introduce() &#123; ... &#125;</code> 这是一个方法，它可以访问类中的属性</li>\n<li><code>var person = Person(&quot;Alice&quot;, 30);</code> 这是一个实例化对象的过程，我们可以通过 <code>.</code> 来访问对象的属性和方法</li>\n</ul>\n<h2 id=\"javascript-中的类\">JavaScript 中的类<a title=\"#javascript-中的类\" href=\"#javascript-中的类\"></a></h2>\n<p>在 JavaScript (ES6 及以后) 中，类的定义方式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> &#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name, age</span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age;<br>  &#125;<br><br>  <span class=\"hljs-title function_\">introduce</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Hello, my name is <span class=\"hljs-subst\">$&#123;<span class=\"hljs-variable language_\">this</span>.name&#125;</span> and I am <span class=\"hljs-subst\">$&#123;<span class=\"hljs-variable language_\">this</span>.age&#125;</span> years old.`</span>);<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> person = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;Alice&quot;</span>, <span class=\"hljs-number\">30</span>);<br>person.<span class=\"hljs-title function_\">introduce</span>();<br></code></pre></td></tr></table></figure>\n<h2 id=\"主要差异\">主要差异<a title=\"#主要差异\" href=\"#主要差异\"></a></h2>\n<p><strong>构造函数</strong></p>\n<ul>\n<li>Dart 使用类名作为构造函数（如 Person(<a href=\"http://this.name\">this.name</a>, this.age)），允许有多个命名构造函数</li>\n<li>JavaScript 使用 constructor 关键字定义构造函数</li>\n</ul>\n<p><strong>属性访问</strong></p>\n<ul>\n<li>Dart 中，你可以直接定义属性和它们的类型（如 String name;）</li>\n<li>JavaScript 中，属性通常在构造函数内通过 this 关键字定义</li>\n</ul>\n<p><strong>字符串插值</strong></p>\n<ul>\n<li>Dart 使用 <code>$</code> 符号进行字符串插值（如 <code>&quot;$name&quot;</code>）</li>\n<li>JavaScript 使用 <code>$&#123;&#125;</code> 语法进行字符串插值</li>\n</ul>\n<p><strong>类型系统</strong></p>\n<ul>\n<li>Dart 是一种 <code>强类型</code> 语言，需要显式地定义变量和返回值的类型</li>\n<li>JavaScript 是弱类型语言，类型是动态的</li>\n</ul>\n<h1 id=\"静态方法和静态属性\">静态方法和静态属性<a title=\"#静态方法和静态属性\" href=\"#静态方法和静态属性\"></a></h1>\n<blockquote>\n<ul>\n<li>静态方法和静态属性是类级别的成员，这意味着它们不属于任何特定的实例，而是属于类本身</li>\n<li>在 Dart 和 JavaScript 中都是可行的，尽管它们的实现方式略有不同</li>\n</ul>\n</blockquote>\n<h2 id=\"dart-中的静态方法和属性\">Dart 中的静态方法和属性<a title=\"#dart-中的静态方法和属性\" href=\"#dart-中的静态方法和属性\"></a></h2>\n<ul>\n<li>在 Dart 中，你可以使用关键字 <code>static</code> 来定义静态方法和属性</li>\n<li>这些成员可以通过类名直接访问，而不需要创建类的实例</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Utility</span> </span>&#123;<br>  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">String</span> appName = <span class=\"hljs-string\">&quot;MyApp&quot;</span>;<br><br>  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> printAppName() &#123;<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The app name is <span class=\"hljs-subst\">$appName</span>.&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">void</span> main() &#123;<br>  <span class=\"hljs-built_in\">print</span>(Utility.appName); <span class=\"hljs-comment\">// 直接访问静态属性</span><br>  Utility.printAppName(); <span class=\"hljs-comment\">// 调用静态方法</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231227004233215-403085660.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"javascript-中的静态方法和属性\">JavaScript 中的静态方法和属性<a title=\"#javascript-中的静态方法和属性\" href=\"#javascript-中的静态方法和属性\"></a></h2>\n<ul>\n<li>在 JavaScript 中，ES6 引入了静态方法的概念</li>\n<li>通过在方法名前添加 <code>static</code> 关键字，可以创建静态方法</li>\n<li>对于静态属性，直到最近（ES2020）才得到正式支持，但在此之前你可以在类外部定义静态属性</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Utility</span> &#123;<br>  <span class=\"hljs-keyword\">static</span> appName = <span class=\"hljs-string\">&quot;MyApp&quot;</span>; <span class=\"hljs-comment\">// ES2020 开始支持静态属性</span><br><br>  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">printAppName</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`The app name is <span class=\"hljs-subst\">$&#123;<span class=\"hljs-variable language_\">this</span>.appName&#125;</span>.`</span>);<br>  &#125;<br>&#125;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Utility</span>.<span class=\"hljs-property\">appName</span>); <span class=\"hljs-comment\">// 直接访问静态属性</span><br><span class=\"hljs-title class_\">Utility</span>.<span class=\"hljs-title function_\">printAppName</span>(); <span class=\"hljs-comment\">// 调用静态方法</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"主要差异-1\">主要差异<a title=\"#主要差异-1\" href=\"#主要差异-1\"></a></h2>\n<p><strong>语法</strong>：</p>\n<ul>\n<li>在 Dart 和 JavaScript (ES6 及以后) 中，静态方法的定义方式相同，都是在方法名前加上 static 关键字</li>\n<li>静态属性在 Dart 中也是使用 static 关键字，而在 JavaScript 中直到 ES2020 才正式支持这种语法</li>\n</ul>\n<p><strong>属性定义</strong>：</p>\n<ul>\n<li>Dart 允许在类内部直接定义静态属性</li>\n<li>在 JavaScript 的早期版本中，静态属性通常在类定义之外单独设置</li>\n</ul>\n<p><strong>类型系统</strong>：</p>\n<ul>\n<li>Dart 中静态成员可以拥有显式的类型</li>\n<li>JavaScript 中类型是动态的，不需要显式声明</li>\n</ul>\n<p><strong>访问方式</strong>：</p>\n<ul>\n<li>在 Dart 和 JavaScript 中，静态方法和属性都通过类名直接访问，而不是通过类的实例</li>\n</ul>\n<h1 id=\"构造函数\">构造函数<a title=\"#构造函数\" href=\"#构造函数\"></a></h1>\n<p>在上方的类定义中已经带着大家过了一遍类的定义了我这里就是想给大家单独说一下这个语法糖的构造函数。</p>\n<p>我们上面是这样定义的：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\">Person(<span class=\"hljs-keyword\">this</span>.name, <span class=\"hljs-keyword\">this</span>.age);<br></code></pre></td></tr></table></figure>\n<p>其实这个语法糖的构造函数是这样的：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\">Person(<span class=\"hljs-built_in\">String</span> name, <span class=\"hljs-built_in\">int</span> age) &#123;<br>  <span class=\"hljs-keyword\">this</span>.name = name;<br>  <span class=\"hljs-keyword\">this</span>.age = age;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"end\">End<a title=\"#end\" href=\"#end\"></a></h1>\n<ul>\n<li>如果你有任何问题或建议，欢迎在下方留言，我会尽快回复</li>\n<li>如果你觉得本文对你有帮助，欢迎点赞、收藏，你的支持是我写作的最大动力</li>\n</ul>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231211215004818-977875224.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"Dart-类(下)","link":"2023/12/27/Flutter/11-Dart-类(下)"},"next":{"title":"2023岁月留痕,成就新高","link":"2023/12/24/年度总结/01-2023岁月留痕,成就新高"},"plink":"http://example.com/2023/12/26/Flutter/10-Dart-类(上)/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"类的定义与使用","title":"类的定义与使用","index":"2","children":[{"id":"dart-中的类","title":"Dart 中的类","index":"2.1"},{"id":"javascript-中的类","title":"JavaScript 中的类","index":"2.2"},{"id":"主要差异","title":"主要差异","index":"2.3"}]},{"id":"静态方法和静态属性","title":"静态方法和静态属性","index":"3","children":[{"id":"dart-中的静态方法和属性","title":"Dart 中的静态方法和属性","index":"3.1"},{"id":"javascript-中的静态方法和属性","title":"JavaScript 中的静态方法和属性","index":"3.2"},{"id":"主要差异-1","title":"主要差异","index":"3.3"}]},{"id":"构造函数","title":"构造函数","index":"4"},{"id":"end","title":"End","index":"5"}]}