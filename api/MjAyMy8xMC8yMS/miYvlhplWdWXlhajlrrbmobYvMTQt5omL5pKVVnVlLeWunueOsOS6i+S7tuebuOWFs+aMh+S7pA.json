{"title":"手撕Vue-实现事件相关指令","date":"2023-10-21T01:38:22.000Z","date_formatted":{"ll":"Oct 21, 2023","L":"10/21/2023","MM-DD":"10-21"},"link":"2023/10/21/手写Vue全家桶/14-手撕Vue-实现事件相关指令","tags":["手写Vue全家桶"],"updated":"2023-10-21T08:42:13.427Z","content":"<p>经过上一篇文章的学习，实现了界面驱动数据更新，接下来实现一下其它相关的指令，比如事件相关的指令，v-on 这个指令的使用频率还是很高的，所以我们先来实现这个指令。</p>\n<p>v-on 的作用是什么，是不是可以给某一个元素绑定一个事件。</p>\n<p>紧接着了解了 v-on 的作用之后，我在 example.html 的结构代码当中添加了一个 div 用 v-on 绑定了一个点击事件，然后在 methods 当中添加了一个 myFn 的方法，然后在点击事件触发的时候调用了 myFn 方法。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Vue基本模板<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;js/nue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;name&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-on:click</span>=<span class=\"hljs-string\">&quot;myFn&quot;</span>&gt;</span>我是div<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">let</span> vue = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Nue</span>(&#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">el</span>: <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#app&#x27;</span>),</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;BNTang&quot;</span></span><br><span class=\"language-javascript\">        &#125;,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-title function_\">myFn</span>(<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;myFn被执行了&#x27;</span>);</span><br><span class=\"language-javascript\">            &#125;,</span><br><span class=\"language-javascript\">        &#125;</span><br><span class=\"language-javascript\">    &#125;);</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>如上已经将基本的结构搭建完毕了，现在需要做的事情就是需要处理一下 v-on 这个指令。</p>\n<p>首先来看我们自己编写的 Nue 源码，在创建 Nue 实例的时候, 调用了 new Compiler(this);，进入 Compiler，constructor 方法继续往下看, 在进入 this.buildTemplate(fragment);，遍历所有的节点，判断是否是一个元素时，调用了 this.buildElement(node);, 进入 buildElement 方法，可以看到之前就是在这里处理了 v-model 这个指令，现在我们需要在这里处理 v-on 这个指令。</p>\n<p>我先将 name, value 打印到控制台，输出结果如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">type text<br>v-model name<br>v-on:click myFn<br></code></pre></td></tr></table></figure>\n<p>可以得出如果我们编写的是 v-model，那么 name 就是 v-model，value 就是 name，如果编写的是 v-on:click，那么 name 就是 v-on:click，value 就是 myFn。</p>\n<p>知道了这些信息之后就可以开展下一步了，我在将 name 按照 <code>:</code> 进行分割一次就会拿到的是 v-on 与 click，click 就是待会我们要注册的事件类型，在用解构的方式将 name, value 取出来，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> [directiveName, directiveType] = name.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;:&#x27;</span>);<br></code></pre></td></tr></table></figure>\n<p>directiveName 就是 v-on，directiveType 就是 click。</p>\n<p>然后再将之前的代码 name.split(‘-’); 改写为 directiveName.split(‘-’);, 这个时候我们将解构出来的结果如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">model<br>on<br></code></pre></td></tr></table></figure>\n<p>这个时候就可以在之前的工具类当中添加一个 on 方法, 来用处理 v-on，在添加 on 方法之前，改造一下根据指令名称, 调用不同的处理函数的代码，将之前的代码改写为如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">CompilerUtil</span>[directive](node, value, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vm</span>, directiveType);<br></code></pre></td></tr></table></figure>\n<p>多了一个 directiveType 参数，这个参数就是指令的类型，比如 v-on:click，那么 directiveType 就是 click，这个时候就可以在工具类当中添加一个 on 方法了，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-attr\">on</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node, value, vm, type</span>) &#123;<br>    node.<span class=\"hljs-title function_\">addEventListener</span>(type, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;事件注册成功了&#x27;</span>);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这个时候我们在页面上点击 div 的时候，就会弹出一个提示框，说明事件注册成功了。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231021102244663-1582199362.png\" alt=\"image-20231021102245038\" loading=\"lazy\" class=\"φbp\"></p>\n<p>事件注册成功了是没问题，但是这个事件执行的内容，是自己的，并不是通过 v-on 绑定的，所以我们需要将这个事件执行的内容改为通过 v-on 绑定的，这个时候就需要用到之前的 methods 对象了，我们需要通过 methods 对象来获取到对应的方法，然后将这个方法执行。</p>\n<p>接下来要改造一下创建 Nue 实例的时候，将 methods 保存起来，改造一下 Nue 的构造函数，以后在根据对应的方法名称，获取到对应的方法, 再执行即可，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$methods</span> = options.<span class=\"hljs-property\">methods</span>;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231021103537661-819093163.png\" alt=\"image-20231021103538146\" loading=\"lazy\" class=\"φbp\"></p>\n<p>改造完毕之后，我们就可以在工具类当中的 on 方法当中，通过 methods 对象获取到对应的方法，然后执行即可，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-attr\">on</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node, value, vm, type</span>) &#123;<br>    node.<span class=\"hljs-title function_\">addEventListener</span>(type, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        vm.<span class=\"hljs-property\">$methods</span>[value](e);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这个时候我们在页面上点击 div 的时候，就会弹出一个提示框，说明事件注册成功了，并且事件执行的内容也是通过 v-on 绑定的。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231021163139726-1724878476.png\" alt=\"image-20231021163138741\" loading=\"lazy\" class=\"φbp\"></p>\n<p>在 myFn 方法中打印一下 this，发现并不是 Nue 的实例，而是 myFn 本身：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231021164157630-434725585.png\" alt=\"image-20231021164157119\" loading=\"lazy\" class=\"φbp\"></p>\n<p>这个时候就需要将 myFn 的 this 改为 Nue 的实例，这个时候就需要用到 call 方法了，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">node.<span class=\"hljs-title function_\">addEventListener</span>(type, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>    vm.<span class=\"hljs-property\">$methods</span>[value].<span class=\"hljs-title function_\">call</span>(vm, e);<br>&#125;);<br></code></pre></td></tr></table></figure>\n<p>call 方法的第一个参数是改变 this 的指向，第二个参数是传递的参数，这个时候我们在 myFn 方法中打印一下 this，发现已经是 Nue 的实例了。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231021164019578-379592202.png\" alt=\"image-20231021164018995\" loading=\"lazy\" class=\"φbp\"></p>\n<p>到此为止，v-on 指令的实现已经完成了。</p>\n","prev":{"title":"手撕Vue-实现将数据代理到Vue实例","link":"2023/10/21/手写Vue全家桶/15-手撕Vue-实现将数据代理到Vue实例"},"next":{"title":"手撕Vue-界面驱动数据更新","link":"2023/10/20/手写Vue全家桶/13-手撕Vue-界面驱动数据更新"},"plink":"http://example.com/2023/10/21/手写Vue全家桶/14-手撕Vue-实现事件相关指令/","reading_time":"1294 words in 9 min"}