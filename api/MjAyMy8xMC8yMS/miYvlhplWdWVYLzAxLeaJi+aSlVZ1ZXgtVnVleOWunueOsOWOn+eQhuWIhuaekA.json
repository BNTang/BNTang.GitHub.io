{"title":"手撕Vuex-Vuex实现原理分析","date":"2023-10-21T14:42:18.000Z","date_formatted":{"ll":"Oct 21, 2023","L":"10/21/2023","MM-DD":"10-21"},"link":"2023/10/21/手写VueX/01-手撕Vuex-Vuex实现原理分析","tags":["手写Vuex"],"updated":"2023-10-28T04:08:47.027Z","content":"<p>本章节主要围绕着手撕 Vuex，那么在手撕之前，先来回顾一下 Vuex 的基本使用。</p>\n<p>创建一个 Vuex 项目，我这里采用 vue-cli 创建一个项目，然后安装 Vuex。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">vue create vuex-demo<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231026224555078-1452261752.png\" alt=\"image-20231026224555021\" loading=\"lazy\" class=\"φbp\"></p>\n<p>选择 Manually select features。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231026225142064-1479839060.png\" alt=\"image-20231026225142303\" loading=\"lazy\" class=\"φbp\"></p>\n<p>这里只需要，Babel 与 Vuex。</p>\n<p>选择 2.X 版本的 Vue：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231026225823870-1723660271.png\" alt=\"image-20231026225824095\" loading=\"lazy\" class=\"φbp\"></p>\n<p>创建 package.json：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231026225837934-1760006608.png\" alt=\"image-20231026225838388\" loading=\"lazy\" class=\"φbp\"></p>\n<p>是否保存为模板这里我选择不：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231026225903749-836544538.png\" alt=\"image-20231026225904183\" loading=\"lazy\" class=\"φbp\"></p>\n<p>到这里我们的模板项目就创建完毕了。</p>\n<p>紧接着找到 <code>store</code> 文件夹下的 index.js，在文件中导入了 Vuex, 可以看到 Vuex 的使用非常简单，只需要创建一个 store，然后在 Vue 的实例中注入 store，就可以在组件中使用了。</p>\n<p>在基础的结构当中分别有 state、mutations、actions、modules 每个属性分别作用如下：</p>\n<ul>\n<li>state：存放状态，可以通过 this.$store.state 访问到。（用于保存全局共享数据）</li>\n<li>mutations：存放同步修改 state 的方法，可以通过 this.$store.commit 方法访问到。（用于同步修改共享数据）</li>\n<li>actions：存放异步修改 state 的方法，可以通过 this.$store.dispatch 方法访问到。（用于异步修改共享数据）</li>\n<li>modules：存放模块，可以通过 this.$store.state.模块名 访问到。（用户模块化共享数据）</li>\n</ul>\n<p>在 Vuex 当中定义的数据，都是全局共享的，所以在任何一个组件当中都可以通过 this.$store.state 访问到，接下来先简单的使用一下 Vuex。</p>\n<p>在 state 当中定义一个 name，然后在组件当中使用。</p>\n<p>App.vue：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>  &lt;div id=&quot;app&quot;&gt;<br>    &#123;&#123; this.$store.state.name &#125;&#125;<br>    &lt;HelloWorld/&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>\n<p>HelloWorld.vue：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>  &lt;div class=&quot;hello&quot;&gt;<br>    &#123;&#123; this.$store.state.name &#125;&#125;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>\n<p>npm run serve 启动项目，可以看到页面上显示了 name 的值。</p>\n<p>接下来就可以开始手撕 Vuex。在手撕之前我们先分析一下 Vuex 的使用过程。</p>\n<p>在 index.js 首先是将 Vuex 导入了进来，然后通过 Vue.use(Vuex) 将 Vuex 注册到 Vue 的原型上，Vue.use(Vuex) 这一步其实是对 Vue 的扩展就是安装了 Vuex 插件，这就是 Vuex 的第一个特点。</p>\n<h1 id=\"vuex-特点1\">Vuex 特点1<a title=\"#vuex-特点1\" href=\"#vuex-特点1\"></a></h1>\n<ul>\n<li>使用 Vuex 的时候需要用到 Vue 的 use 方法</li>\n</ul>\n<p>那么在之前的 Vue 文章介绍到 use 方法是用于注册插件的，所以 Vuex 的本质就是一个插件。所以实现 Vuex 就是在实现一个全局共享数据的插件。</p>\n<h1 id=\"vuex-特点2\">Vuex 特点2<a title=\"#vuex-特点2\" href=\"#vuex-特点2\"></a></h1>\n<p>在使用 Vuex 的时候我们会通过 Vuex.Store 创建一个仓库，所以还需要在 Vuex 中新增 Store 属性，这个属性的取值是一个类。</p>\n<h1 id=\"vuex-特点3\">Vuex 特点3<a title=\"#vuex-特点3\" href=\"#vuex-特点3\"></a></h1>\n<p>为了保证每个Vue实例中都能通过 <code>this.$store</code> 拿到仓库, 我们还需要给每个Vue实例都动态添加一个 <code>$store</code> 属性</p>\n<p>?&gt; 小 Tips：博主建议在继续往下看之前，先去看看 Vue 插件的开发，这样会对 Vuex 的开发有更深的理解。</p>\n","prev":{"title":"手撕Vuex-添加全局$store","link":"2023/10/28/手写VueX/02-手撕Vuex-添加全局$store"},"next":{"title":"手撕Vue-实现计算属性","link":"2023/10/21/手写Vue全家桶/16-手撕Vue-实现计算属性"},"plink":"http://example.com/2023/10/21/手写VueX/01-手撕Vuex-Vuex实现原理分析/","toc":[{"id":"vuex-特点1","title":"Vuex 特点1","index":"1"},{"id":"vuex-特点2","title":"Vuex 特点2","index":"2"},{"id":"vuex-特点3","title":"Vuex 特点3","index":"3"}],"reading_time":"805 words in 5 min"}