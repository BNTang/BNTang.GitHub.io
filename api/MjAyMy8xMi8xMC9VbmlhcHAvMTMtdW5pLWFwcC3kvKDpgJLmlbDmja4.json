{"title":"uni-app-传递数据","date":"2023-12-10T07:45:13.000Z","date_formatted":{"ll":"Dec 10, 2023","L":"12/10/2023","MM-DD":"12-10"},"link":"2023/12/10/Uniapp/13-uni-app-传递数据","tags":["Uniapp"],"updated":"2023-12-10T08:58:48.449Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231203181644721-323493926.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h1>\n<ul>\n<li>好，经过上个章节的介绍完毕之后，了解了一下 uni-app-路由</li>\n<li>那么了解完了uni-app-路由之后，这篇文章来给大家介绍一下 uni-app-路由传递数据</li>\n</ul>\n<p>路由传参怎么传，是不是可以从 A 页面传递给 B 页面，然后 B 页面再传递给 C 页面, 也可以从 C 页面传递给 B 页面，然后 B 页面再传递给 A 页面（可以顺着传也可以逆着传递）。</p>\n<blockquote>\n<p>注意点：我这里没有使用新建项目，而是使用的是上一篇文章的项目，所以大家可以直接在上一篇文章的项目上进行修改。</p>\n</blockquote>\n<h1 id=\"步入正题\">步入正题<a title=\"#步入正题\" href=\"#步入正题\"></a></h1>\n<h2 id=\"通过组件跳转传递数据(包含api)\">通过组件跳转传递数据(包含API)<a title=\"#通过组件跳转传递数据(包含api)\" href=\"#通过组件跳转传递数据(包含api)\"></a></h2>\n<ul>\n<li>传递</li>\n</ul>\n<p>更改 navigate 跳转的路由在后面加上 <code>?</code> 号，然后在后面加上参数，参数的格式是 <code>key=value</code>，多个参数之间用 <code>&amp;</code> 连接。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;navigator url=&quot;/pages/one/one?name=BNTang&amp;age=18&quot; open-type=&quot;navigate&quot;&gt;<br>    &lt;button type=&quot;default&quot;&gt;navigate&lt;/button&gt;<br>&lt;/navigator&gt;<br></code></pre></td></tr></table></figure>\n<p>这样改写了之后，我们在跳转到 one 页面的时候，就会把 name 和 age 两个参数传递过去。</p>\n<ul>\n<li>接收</li>\n</ul>\n<p>在 one 页面中，可以在 onLoad 生命周期中进行接收，他会在 onLoad 生命周期中接收到一个参数 options，这个 options 就是我们传递过来的参数，我们可以通过 <a href=\"http://options.name\">options.name</a> 和 options.age 来获取到我们传递过来的参数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;script&gt;<br>\texport default &#123;<br>\t\tonLoad(option) &#123;<br>\t\t\tconsole.log(option)<br>\t\t&#125;<br>\t&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<p>如上的通过组件的方式，我们快速的来过一边通过 API 的方式来传递数据, 代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>\t&lt;view&gt;<br>        省略...<br>      <br>\t\t&lt;button @click=&quot;onJumpOne&quot;&gt;navigateTo&lt;/button&gt;<br>\t&lt;/view&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>\texport default &#123;<br>\t\tmethods: &#123;<br>\t\t\tonJumpOne() &#123;<br>\t\t\t\tuni.navigateTo(&#123;<br>\t\t\t\t\turl: &#x27;/pages/one/one?name=LeaderTang&amp;age=18&#x27;<br>\t\t\t\t&#125;)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<p>这种方式传递数据是最简单的，除了这种方式，还有其他的方式来传递数据，下面我们来看一下其他的方式。</p>\n<h2 id=\"通过事件通道传递数据(api路由跳转)\">通过事件通道传递数据(API路由跳转)<a title=\"#通过事件通道传递数据(api路由跳转)\" href=\"#通过事件通道传递数据(api路由跳转)\"></a></h2>\n<p>打开 UniApp 官方文档：<a href=\"https://uniapp.dcloud.net.cn/api/router.html#navigateto\" target=\"_blank\">https://uniapp.dcloud.net.cn/api/router.html#navigateto</a></p>\n<p>在 navigateTo 中，有介绍到一个 success 回调函数，这个回调函数是在跳转成功之后执行的，我们可以在这个回调函数中进行传递数据。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>\t&lt;view&gt;<br>      省略...<br><br>      &lt;button @click=&quot;onJumpOne&quot;&gt;navigateTo&lt;/button&gt;<br>\t&lt;/view&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>\texport default &#123;<br>\t\tmethods: &#123;<br>\t\t\tonJumpOne() &#123;<br>\t\t\t\tuni.navigateTo(&#123;<br>\t\t\t\t\turl: &#x27;/pages/one/one&#x27;,<br>\t\t\t\t\tsuccess: function(res) &#123;<br>\t\t\t\t\t\t// 通过eventChannel向被打开页面传送数据<br>\t\t\t\t\t\tres.eventChannel.emit(&#x27;acceptDataFromOpenerPage&#x27;, &#123;<br>\t\t\t\t\t\t\tdata: &#x27;通过事件通道传递的数据&#x27;<br>\t\t\t\t\t\t&#125;)<br>\t\t\t\t\t&#125;<br>\t\t\t\t&#125;)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<p>如上代码在 success 回调函数中，我们通过 res.eventChannel.emit 方法来传递数据，这个方法接收两个参数，第一个参数是一个字符串，这个字符串是我们在接收数据的页面中定义的(两边要一致，自己定义)，第二个参数是一个对象，这个对象就是我们要传递的数据。</p>\n<p>然后我们在 one 页面中接收数据，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>\t&lt;view&gt;<br>\t\t&lt;text&gt;one&lt;/text&gt;<br>\t&lt;/view&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>\texport default &#123;<br>\t\tonLoad(option) &#123;<br>\t\t\tconst eventChannel = this.getOpenerEventChannel();<br>\t\t\teventChannel.on(&#x27;acceptDataFromOpenerPage&#x27;, function(data) &#123;<br>\t\t\t\tconsole.log(data)<br>\t\t\t&#125;)<br>\t\t&#125;<br>\t&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<p>如上代码，我们在 onLoad 生命周期中通过 this.getOpenerEventChannel() 方法来获取到事件通道，然后通过 eventChannel.on 方法来接收数据，这个方法接收两个参数，第一个参数是我们在跳转页面中定义的字符串，第二个参数是一个回调函数，这个回调函数中的参数就是我们传递过来的数据。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231210163207562-2099205227.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>看了这么多都是从上一个页面传递到下一个页面，那么我们怎么从下一个页面传递到上一个页面呢？这正是我接下来要介绍的内容。</p>\n<h2 id=\"返回上一个页面传递数据\">返回上一个页面传递数据<a title=\"#返回上一个页面传递数据\" href=\"#返回上一个页面传递数据\"></a></h2>\n<p>打开 UniApp 官方文档：<a href=\"https://uniapp.dcloud.net.cn/api/router.html#navigateback\" target=\"_blank\">https://uniapp.dcloud.net.cn/api/router.html#navigateback</a></p>\n<p>返回上一个页面，我们可以通过 navigateBack 方法来实现，这个方法接收一个参数 delta，这个参数是一个数字，表示返回的页面数，如果 delta 是 1，表示返回上一个页面，如果 delta 是 2，表示返回上两个页面，以此类推（堆栈结构）。</p>\n<p>我们先来搭建页面，放一个按钮，点击按钮返回上一个页面。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>\t&lt;view&gt;<br>\t\t&lt;text&gt;one&lt;/text&gt;<br>\t\t&lt;text&gt;=======================&lt;/text&gt;<br>\t\t&lt;button type=&quot;default&quot; @click=&quot;onGoBackClick&quot;&gt;返回上一个界面&lt;/button&gt;<br>\t&lt;/view&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>\texport default &#123;<br>\t\tmethods: &#123;<br>\t\t\tonGoBackClick() &#123;<br>\t\t\t\tuni.navigateBack(&#123;<br>\t\t\t\t\tdelta: 1<br>\t\t\t\t&#125;);<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<p>如上代码，我们在点击按钮的时候，调用 navigateBack 方法，传递一个 delta 参数，这个参数是 1，表示返回上一个页面。</p>\n<p>那么怎么在返回上一个页面的时候，传递数据呢？我们可以在 onGoBackClick 方法中获取事件通道，然后通过 eventChannel.emit 方法来传递数据，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">const eventChannel = this.getOpenerEventChannel();<br>eventChannel.emit(&quot;acceptDataFromOpenerPage&quot;, &#123;<br>    data: &#x27;通过事件通道返回时传递数据&#x27;<br>&#125;)<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231210165504409-377935999.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>如上代码，我们在点击按钮的时候，获取事件通道，然后通过 emit 方法来传递数据，这个方法接收两个参数，第一个参数是一个字符串，这个字符串是我们在接收数据的页面中定义的(两边要一致，自己定义)，第二个参数是一个对象，这个对象就是我们要传递的数据。</p>\n<p>返回时我们传递了数据，那么我们怎么接收数据呢？我们可以在上一个页面中的跳转 API 对象中通过 events 参数, 在 events 定义一个回调函数，这个回调函数的名字必须与返回页面中 emit 方法中的第一个参数一致，然后在这个回调函数中接收数据，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">events: &#123;<br>    acceptDataFromOpenerPage(data) &#123;<br>        console.log(data)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231210165724947-486191780.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li>测试结果</li>\n</ul>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231210165819782-1744613435.gif\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>这种通过事件通道的方式比较通用，不管是从上一个页面传递到下一个页面，还是从下一个页面传递到上一个页面，都可以通过这种方式来传递数据。</p>\n<h1 id=\"最后\">最后<a title=\"#最后\" href=\"#最后\"></a></h1>\n<blockquote>\n<p>大家好我是 BNTang, 一个热爱分享的技术的开发者，如果大家觉得我的文章对你有帮助的话，可以关注我的公众号 <code>JavaBoyL</code>，我会在公众号中分享一些IT技术和一些个人的见解，谢谢大家的支持。</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://cloud.tencent.com/developer/article/2366050?from_column=20421&amp;from=20421\" target=\"_blank\">我正在参与2023腾讯技术创作特训营第四期有奖征文，快来和我瓜分大奖！</a></p>\n</blockquote>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231129232539490-1458223711.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"uni-app-CompositionAPI传递数据","link":"2023/12/10/Uniapp/14-uni-app-CompositionAPI传递数据"},"next":{"title":"uni-app-路由","link":"2023/12/10/Uniapp/12-uni-app-路由"},"plink":"http://example.com/2023/12/10/Uniapp/13-uni-app-传递数据/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"步入正题","title":"步入正题","index":"2","children":[{"id":"通过组件跳转传递数据(包含api)","title":"通过组件跳转传递数据(包含API)","index":"2.1"},{"id":"通过事件通道传递数据(api路由跳转)","title":"通过事件通道传递数据(API路由跳转)","index":"2.2"},{"id":"返回上一个页面传递数据","title":"返回上一个页面传递数据","index":"2.3"}]},{"id":"最后","title":"最后","index":"3"}],"reading_time":"1737 words in 12 min"}