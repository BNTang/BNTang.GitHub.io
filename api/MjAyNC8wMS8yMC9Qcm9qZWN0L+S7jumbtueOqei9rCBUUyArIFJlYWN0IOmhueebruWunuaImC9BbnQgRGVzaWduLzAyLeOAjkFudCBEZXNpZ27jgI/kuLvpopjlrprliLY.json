{"title":"『Ant Design』主题定制","date":"2024-01-20T05:56:12.000Z","date_formatted":{"ll":"Jan 20, 2024","L":"01/20/2024","MM-DD":"01-20"},"link":"2024/01/20/Project/从零玩转 TS + React 项目实战/Ant Design/02-『Ant Design』主题定制","tags":["Ant Design"],"updated":"2024-01-22T01:13:56.973Z","content":"<p>[toc]</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240120163827052-2145974190.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"一、前言\">一、前言<a title=\"#一、前言\" href=\"#一、前言\"></a></h1>\n<blockquote>\n<ul>\n<li>🐤本篇文章是『从零玩转 TypeScript + React 项目实战』系列文章的第 2 篇，主要介绍『Ant Design』的进阶玩法主题定制</li>\n</ul>\n</blockquote>\n<p>进阶玩法是什么内容呢？其实就是『Ant Design』的主题定制，那么什么是主题定制呢？简单来说就是我们可以通过修改『Ant Design』的样式变量来定制我们自己的主题，这样就可以让我们的项目看起来更加炫酷，更加符合我们的审美。</p>\n<p>在上一篇文章中介绍使用时，我们使用的 Button 与 Switch 默认的主色调都是蓝色，但是在企业开发中，自己公司的项目，往往都有自己的主题色，这时候我们就需要对『Ant Design』的主题进行定制，让它符合我们自己的主题色。</p>\n<h1 id=\"二、主题定制\">二、主题定制<a title=\"#二、主题定制\" href=\"#二、主题定制\"></a></h1>\n<p>打开官方文档，官方文档地址：<a href=\"https://ant.design/docs/react/introduce-cn\" target=\"_blank\">https://ant.design/docs/react/introduce-cn</a> 在官方文档左侧有一个『定制主题』的菜单，点击进入，可以看到如下内容：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240120161855593-244185192.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>Ant Design 提供了一种很酷的方式，让你可以根据自己的业务和品牌需求，自由地定制样式，以满足不同的视觉喜好。这包括全局样式，比如主题颜色、圆角和边框样式，还有特定组件的外观定制。简而言之，你可以轻松地让 Ant Design 看起来符合你的品牌和业务的独特需求。</p>\n<h1 id=\"三.-4.x\">三. 4.x<a title=\"#三.-4.x\" href=\"#三.-4.x\"></a></h1>\n<ul>\n<li>Ant Design <code>4.x</code> 版本主题定制</li>\n</ul>\n<h2 id=\"1.方式一（修改样式变量，2b铅笔做法）\">1.方式一（修改样式变量，2B铅笔做法）<a title=\"#1.方式一（修改样式变量，2b铅笔做法）\" href=\"#1.方式一（修改样式变量，2b铅笔做法）\"></a></h2>\n<p>在 Ant Design <code>4.x</code> 版本中，我们可以通过 <code>less</code> 和 <code>CSS</code> 变量来定制主题，什么意思呢？就是官方编写了一些样式变量，我们可以通过修改这些样式变量来定制我们自己的主题，例如我们可以修改主题色，让它符合我们自己的主题色。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240120184745050-1816727871.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>在哪里可以找到这个文件呢，就是项目依赖文件夹 <code>node_modules</code> 中，然后找到 <code>antd</code> 文件夹，然后找到 <code>dist</code> 文件夹，然后找到 <code>antd.less</code> 文件，这个就是 Ant Design 的样式文件，我们可以在这个文件中找到 Ant Design 的样式变量，然后修改这些样式变量，就可以定制我们自己的主题了：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240120190104796-899843715.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>方式一的修改修改的是什么文件？这个文件在 <code>node_modules</code> 中，很明显这个文件是 Ant Design 的源码，过去我在其它的技术文章中说过，不推荐直接修改框架或者第三方库的文件，那么不推荐修改那怎么办呢？所以这里就要说到方式二了。</p>\n<h2 id=\"2.方式二（webpack-配置修改，配置恐惧症慎用）\">2.方式二（webpack 配置修改，配置恐惧症慎用）<a title=\"#2.方式二（webpack-配置修改，配置恐惧症慎用）\" href=\"#2.方式二（webpack-配置修改，配置恐惧症慎用）\"></a></h2>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240120184037149-692854398.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>通过介绍得知是通过 modifyVars 属性来定制主题的，这里还要通过 webpack 来进行配置，webpack 如果对于学过的同学来说如果通过这种方式来配置的话，应该都是比较熟悉的，如果对于没有学过的同学来说，是不是还是有点复杂的，也不友好。</p>\n<p>如果是通过 webpack 来配置的话，那么我们这个项目是通过什么方式创建的，是不是通过 create-react-app 来创建的，前面我在讲解脚手架的时候我也介绍过，通过脚手架创建默认情况下是把 webpack 隐藏起来的。</p>\n<p>如果想要修改 webpack 的配置是不是还要将 webpack 给暴露出来，通过 <code>npm run eject 显示 webpack 配置</code>，然后在 webpack 配置文件中找到 less-loader，在 less-loader 中将下图中的配置添加进去：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240120185010753-1232956298.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>在 modifyVars 属性中，我们可以通过修改 Ant Design 的样式变量来定制我们自己的主题。</p>\n<p>这样也不太好，因为我们通过脚手架创建项目的时候，它将 webpack 配置文件隐藏起来了，为什么隐藏起来呢？因为它不想让我们去修改 webpack 配置文件，因为 webpack 配置文件是一个很复杂的配置文件，如果我们去修改的话，很容易出错，所以它将 webpack 配置文件隐藏起来了。</p>\n<p>对于 webpack 是什么都不知道的人来说根本无从下手，所以这里就要说到方式三了。</p>\n<h2 id=\"3.方式三（通过-craco，推荐）\">3.方式三（通过 craco，推荐）<a title=\"#3.方式三（通过-craco，推荐）\" href=\"#3.方式三（通过-craco，推荐）\"></a></h2>\n<p>官方文档：<a href=\"https://4x.ant.design/docs/react/use-with-create-react-app-cn\" target=\"_blank\">https://4x.ant.design/docs/react/use-with-create-react-app-cn</a></p>\n<p>第三种方式在 create-react-app 菜单中，刚好我们项目是通过这种方式创建的，在这个菜单中告诉我们有一个高级配置：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240120185639137-718013032.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>高级配置中介绍到对 create-react-app 的默认配置进行自定义，这里我们使用 <code>craco</code>，那么 craco 的作用是什么呢？</p>\n<p>只要你安装了 craco，就可以在项目根目录创建一个 <code>craco.config.js</code> 文件，然后在这个文件中进行配置，然后它就会把你新建的这个配置文件和隐藏的那个 webpack 配置文件进行合并，这样就可以对 webpack 进行配置了。</p>\n<p>这个时候我们就不用去修改那个隐藏的 webpack 配置文件了，我们只需要在 <code>craco.config.js</code> 文件中进行配置就可以了，这样就不会影响到隐藏的 webpack 配置文件了。</p>\n<p>这个时候隐藏 webpack 中那些比较复杂的配置我们就不用去接触了，只需要专注于我们自己的配置就可以了，这样就可以避免出错了。</p>\n<p>说了这么多，我们就来实战一下（创建项目可以利用上一节文章的项目来测试），首先我们需要安装 craco，然后在项目根目录创建一个 <code>craco.config.js</code> 文件，然后在这个文件中进行配置，这里我将主题色改为绿色：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install @craco/craco<br></code></pre></td></tr></table></figure>\n<p>修改启动命令，在 <code>package.json</code> 文件中修改启动命令：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">/* package.json */<br>&quot;scripts&quot;: &#123;<br><span class=\"hljs-deletion\">-   &quot;start&quot;: &quot;react-scripts start&quot;,</span><br><span class=\"hljs-deletion\">-   &quot;build&quot;: &quot;react-scripts build&quot;,</span><br><span class=\"hljs-deletion\">-   &quot;test&quot;: &quot;react-scripts test&quot;,</span><br><span class=\"hljs-addition\">+   &quot;start&quot;: &quot;craco start&quot;,</span><br><span class=\"hljs-addition\">+   &quot;build&quot;: &quot;craco build&quot;,</span><br><span class=\"hljs-addition\">+   &quot;test&quot;: &quot;craco test&quot;,</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>为什么要修改启动命令呢？原因很简单，如果不修改这些指令的话默认情况下会通过 react-scripts 来启动项目，通过 react-scripts 编译项目，通过 react-scripts 测试项目，如果通过 react-scripts 去启动编译测试项目他只会，读取隐藏的 webpack 配置文件。</p>\n<p>不会去读取我们额外新增的配置文件，不会把我们额外新增的配置文件中的内容和隐藏的 webpack 配置文件中的内容进行合并，所以我们需要修改这些指令，让这些指令通过 craco 来启动编译测试项目，这样就可以读取我们额外新增的配置文件了，就会把我们额外新增的配置文件中的内容和隐藏的 webpack 配置文件中的内容进行合并。</p>\n<p>讲清楚了这些，然后在项目的根目录创建一个 <code>craco.config.js</code> 文件，然后在这个文件中进行配置，这里我将主题色改为绿色：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/* craco.config.js */</span><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  <span class=\"hljs-comment\">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>在修改之前官方文档 <code>自定义主题</code> 中有介绍 <code>按照 配置主题 的要求，自定义主题需要用到类似 less-loader 提供的 less 变量覆盖功能。我们可以引入 craco-less 来帮助加载 less 样式和修改变量</code>，所以我们需要安装 <code>craco-less</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install craco-less<br></code></pre></td></tr></table></figure>\n<p>然后在 <code>craco.config.js</code> 文件中引入 <code>craco-less</code>：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">/* craco.config.js */<br><br><span class=\"hljs-addition\">+ const CracoLessPlugin = require(&#x27;craco-less&#x27;);</span><br><br>  module.exports = &#123;<br><span class=\"hljs-addition\">+     plugins: [</span><br><span class=\"hljs-addition\">+         &#123;</span><br><span class=\"hljs-addition\">+             plugin: CracoLessPlugin,</span><br><span class=\"hljs-addition\">+             options: &#123;</span><br><span class=\"hljs-addition\">+                 lessLoaderOptions: &#123;</span><br><span class=\"hljs-addition\">+                     lessOptions: &#123;</span><br><span class=\"hljs-addition\">+                         modifyVars: &#123; &#x27;@primary-color&#x27;: &#x27;#00b96b&#x27; &#125;,</span><br><span class=\"hljs-addition\">+                         javascriptEnabled: true,</span><br><span class=\"hljs-addition\">+                     &#125;,</span><br><span class=\"hljs-addition\">+                 &#125;,</span><br><span class=\"hljs-addition\">+             &#125;,</span><br><span class=\"hljs-addition\">+         &#125;,</span><br><span class=\"hljs-addition\">+     ],</span><br>  &#125;;<br></code></pre></td></tr></table></figure>\n<p>这里的 <code>modifyVars</code> 就是用来配置主题色的，<code>@primary-color</code> 就是主题色的值，这里我将主题色改为绿色。</p>\n<p>配置完毕了是不是？然后运行项目，刷新一下发现没有效果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240120191928124-1976506715.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>这是为什么呢？我们在 <code>craco.config.js</code> 文件中更改的是不是 less 代码，但是我们的项目中引入的是不是 less 代码，我们的项目中引入的是不是 css 代码：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240120192114383-1538954299.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>在之前的文章中，查看 Ant Design 官方文档入门的时候有介绍到，Ant Design 有两种引入方式，一种是通过 <code>less</code> 引入，一种是通过 <code>css</code> 引入，我们这里是通过 <code>css</code> 引入的，现在我修改了 <code>less</code> 代码，我们是不是就要使用 <code>less</code> 引入的方式了，所以这里需要更改一下引入方式，将 <code>css</code> 引入方式改为 <code>less</code> 引入方式：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">/* App.js */<br><span class=\"hljs-deletion\">- import &#x27;antd/dist/antd.css&#x27;;</span><br><span class=\"hljs-addition\">+ import &#x27;antd/dist/antd.less&#x27;;</span><br></code></pre></td></tr></table></figure>\n<p>然后运行项目，刷新一下发现主题色已经改为绿色了：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240120192403577-1055756635.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>这里我们就可以根据自己的需求，对 Ant Design 的主题进行定制，让它符合我们自己的主题色。</p>\n<h1 id=\"四.-5.x\">四. 5.x<a title=\"#四.-5.x\" href=\"#四.-5.x\"></a></h1>\n<ul>\n<li>Ant Design <code>5.0</code> 版本带来了全新的主题定制方案</li>\n</ul>\n<p>与之前的 <code>4.x</code> 版本使用的 <code>less</code> 和 <code>CSS</code> 变量不同，<code>5.0</code> 版本引入了更强大的 <code>CSS-in-JS</code> 技术，使得动态主题的能力得到了进一步增强。这意味着你可以更灵活地调整样式，根据需要动态改变主题，为你的应用定制独特的外观。</p>\n<p>这不仅限于以下内容，而是包含但不局限于：</p>\n<ol>\n<li>支持 <code>动态切换</code> 主题</li>\n<li>支持 <code>同时存在多个</code> 主题</li>\n<li>支持 <code>针对某个/某些组件</code> 修改主题变量</li>\n</ol>\n<p>我这里之前创建项目是采用的 create-react-app，所以主题定制是针对 create-react-app 的，通过 <code>ConfigProvider</code> 进行主题配置。</p>\n<p>ConfigProvider 是一个全局化配置的组件，目前支持配置 <code>antd</code> 组件库的国际化文案、开始时间、全局化样式等。</p>\n<h2 id=\"1.定制主题\">1.定制主题<a title=\"#1.定制主题\" href=\"#1.定制主题\"></a></h2>\n<p>我这里创建了一个全新的 React 项目，可以基于上篇文章创建方式创建，并且自行安装 Ant Design, 其实可以直接将上篇文章的项目拷贝一份改个名字即可：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240120173503413-243731715.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>在之前我们的 App 组件中，我们引入了一个 Button 组件：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240120173552646-662629442.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>这里代码我改变了一下，采用 <code>React.FC</code> 的方式创建组件，React.FC 是 React.FunctionComponent 的简写，是 React 官方推荐的创建组件的方式，因为我采用的是 TypeScript + React 的方式，所以这里采用的是 React.FC 的方式创建组件。</p>\n<p>函数式组件在之前 React 基础系列文章中已经介绍过了，这里就不再赘述了，如果不了解的话可以去看看我之前的文章。</p>\n<p>然后运行项目，可以看到 Button 组件的样式是默认的蓝色：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240120173611822-1886032334.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>这里我们就需要对 Ant Design 的主题进行定制，让它符合我们自己的主题色，例如我们这里就将主题色改为绿色。</p>\n<p>这里采用 ConfigProvider 组件进行主题配置，在 App 组件中引入 ConfigProvider 组件：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"><span class=\"hljs-addition\">+ import &#123; ConfigProvider &#125; from &#x27;antd&#x27;;</span><br></code></pre></td></tr></table></figure>\n<p>然后在 App 组件中将 Button 组件放到 ConfigProvider 组件中：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">const App: React.FC = () =&gt; (<br><span class=\"hljs-deletion\">-    &lt;&gt;</span><br><span class=\"hljs-addition\">+    &lt;ConfigProvider theme=&#123;&#123; token: &#123; colorPrimary: &#x27;#00b96b&#x27; &#125; &#125;&#125;&gt;</span><br>        &lt;Button type=&quot;primary&quot;&gt;Primary Button&lt;/Button&gt;<br>        &lt;Button&gt;Default Button&lt;/Button&gt;<br>        &lt;Button type=&quot;dashed&quot;&gt;Dashed Button&lt;/Button&gt;<br>        &lt;Button type=&quot;text&quot;&gt;Text Button&lt;/Button&gt;<br>        &lt;Button type=&quot;link&quot;&gt;Link Button&lt;/Button&gt;<br><span class=\"hljs-addition\">+    &lt;/ConfigProvider&gt;</span><br><span class=\"hljs-deletion\">-    &lt;/&gt;</span><br>);<br></code></pre></td></tr></table></figure>\n<p>这里的 <code>theme</code> 属性就是用来配置主题的，<code>token</code> 属性就是用来配置主题色的，<code>colorPrimary</code> 就是主题色的值，这里我将主题色改为绿色。</p>\n<p>关于 token 在官方文档中有介绍：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240120180243674-27200021.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>通过阅读官方文档，说取值类型是 Design Token 那么 Design Token 又是什么呢？Design Token 是一种用于描述设计系统的抽象，它是一种设计语言，用于描述设计系统中的设计原子，例如颜色、字体、间距、阴影等。</p>\n<p>然后我紧接着在文档中又搜索 AliasToken，我一下子就悟了：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240120180820682-233041888.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>通过上图中可以看到提供了很多的 Token 名称，例如 <code>boxShadow</code> 就是用来配置元素阴影样式，根据这里不同的 Token 名称，我们就可以对不同的样式进行配置。</p>\n<p>然后我将主题色改为绿色，运行项目，可以看到主题色已经改为绿色了：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240120181335694-1788540513.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>这里我们就可以根据自己的需求，对 Ant Design 的主题进行定制，让它符合我们自己的主题色。</p>\n<p>再来一个，我将 Link Button 也改为绿色，这个好像是文字颜色，再去官方文档找找有没有更改文字颜色的 Token 名称，然后我在文档中搜索了一下没有找到，我利用猜想加编辑工具的提示找到了我想要的 Token 名称：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240120181735112-1031499142.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>我输入了 <code>link</code>，然后编辑器就提示了一堆出来我发现有一个 <code>colorLink</code>，我猜测这个就是用来配置 Link Button 文字颜色的，然后我将 Link Button 文字颜色改为绿色：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">const App: React.FC = () =&gt; (<br>    &lt;ConfigProvider theme=&#123;&#123;<br>        token: &#123;<br>            colorPrimary: &#x27;#00b96b&#x27;,<br><span class=\"hljs-addition\">+           colorLink: &#x27;#00b96b&#x27;,</span><br>        &#125;<br>    &#125;&#125;&gt;<br>        &lt;Button type=&quot;primary&quot;&gt;Primary Button&lt;/Button&gt;<br>        &lt;Button&gt;Default Button&lt;/Button&gt;<br>        &lt;Button type=&quot;dashed&quot;&gt;Dashed Button&lt;/Button&gt;<br>        &lt;Button type=&quot;text&quot;&gt;Text Button&lt;/Button&gt;<br>        &lt;Button type=&quot;link&quot;&gt;Link Button&lt;/Button&gt;<br>    &lt;/ConfigProvider&gt;<br>);<br></code></pre></td></tr></table></figure>\n<p>运行项目，可以看到 Link Button 文字颜色已经改为绿色了：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240120181835030-1406525119.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"五、总结\">五、总结<a title=\"#五、总结\" href=\"#五、总结\"></a></h1>\n<p>通过本文的学习，您可以掌握以下知识点：</p>\n<ul>\n<li>Ant Design 4.x 版本主题定制</li>\n<li>Ant Design 5.x 版本主题定制</li>\n<li>可以从中感受到 Ant Design 4.x 与 5.x 版本主题定制的区别以及优劣势</li>\n<li>很显然 Ant Design 5.x 版本主题定制更加灵活，更加强大，更加推荐使用</li>\n</ul>\n<h1 id=\"六、题外话\">六、题外话<a title=\"#六、题外话\" href=\"#六、题外话\"></a></h1>\n<blockquote>\n<ul>\n<li>🐤如果您觉得本文对您有所帮助，欢迎点赞、收藏或分享，您的支持是我创作的最大动力！</li>\n</ul>\n</blockquote>\n<p>这篇文章的内容就介绍到这里，期待我们下次的相遇。感谢您花时间阅读，如果有任何问题或想法，欢迎在评论区留言。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231211215004818-977875224.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"『Dva』使用","link":"2024/01/20/Project/从零玩转 TS + React 项目实战/Ant Design/03-『Dva』使用"},"next":{"title":"经验/写作/资料收集/知识星球/〖算法学习资料〗","link":"2024/01/19/经验/写作/资料收集/知识星球/〖算法学习资料〗"},"plink":"http://example.com/2024/01/20/Project/从零玩转 TS + React 项目实战/Ant Design/02-『Ant Design』主题定制/","toc":[{"id":"一、前言","title":"一、前言","index":"1"},{"id":"二、主题定制","title":"二、主题定制","index":"2"},{"id":"三.-4.x","title":"三. 4.x","index":"3","children":[{"id":"1.方式一（修改样式变量，2b铅笔做法）","title":"1.方式一（修改样式变量，2B铅笔做法）","index":"3.1"},{"id":"2.方式二（webpack-配置修改，配置恐惧症慎用）","title":"2.方式二（webpack 配置修改，配置恐惧症慎用）","index":"3.2"},{"id":"3.方式三（通过-craco，推荐）","title":"3.方式三（通过 craco，推荐）","index":"3.3"}]},{"id":"四.-5.x","title":"四. 5.x","index":"4","children":[{"id":"1.定制主题","title":"1.定制主题","index":"4.1"}]},{"id":"五、总结","title":"五、总结","index":"5"},{"id":"六、题外话","title":"六、题外话","index":"6"}]}