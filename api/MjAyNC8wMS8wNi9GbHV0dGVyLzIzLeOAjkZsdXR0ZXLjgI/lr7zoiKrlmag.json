{"title":"『Flutter』导航器","date":"2024-01-05T17:16:23.000Z","date_formatted":{"ll":"Jan 6, 2024","L":"01/06/2024","MM-DD":"01-06"},"link":"2024/01/06/Flutter/23-『Flutter』导航器","tags":["Flutter"],"updated":"2024-01-09T05:51:10.858Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240106091502399-1348725962.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"1.前言\">1.前言<a title=\"#1.前言\" href=\"#1.前言\"></a></h1>\n<p>在上篇文章中，介绍了Flutter中常用的组件之表单组件，本文将继续介绍Flutter中常用的组件之导航器。</p>\n<h1 id=\"2.导航器\">2.导航器<a title=\"#2.导航器\" href=\"#2.导航器\"></a></h1>\n<h2 id=\"2.1.导航器简介\">2.1.导航器简介<a title=\"#2.1.导航器简介\" href=\"#2.1.导航器简介\"></a></h2>\n<p>Flutter 的导航器（Navigator）是用于在应用中管理页面（也称为路由）堆栈的一个关键组件。Navigator 提供了一种管理屏幕之间的转换的方式，例如通过压入（pushing）新页面或弹出（popping）现有页面。</p>\n<blockquote>\n<ul>\n<li><strong>堆栈结构</strong></li>\n</ul>\n</blockquote>\n<p>例如我们要显示 b 页面，那么就会将 a 页面压入堆栈，然后显示 b 页面，当我们点击 b 页面的返回按钮时，就会将 b 页面弹出堆栈，然后显示 a 页面。</p>\n<h2 id=\"2.2.常用方法和属性\">2.2.常用方法和属性<a title=\"#2.2.常用方法和属性\" href=\"#2.2.常用方法和属性\"></a></h2>\n<ol>\n<li><strong>push</strong>: 将新路由压入堆栈，通常用于导航到新页面。</li>\n<li><strong>pop</strong>: 从堆栈中移除当前路由，通常用于返回上一个页面。</li>\n<li><strong>of</strong>: 用于获取与特定<code>BuildContext</code>相关联的最近的<code>Navigator</code>实例。</li>\n<li><strong>pushNamed</strong>: 使用路由名称将新路由压入堆栈，通常与路由表结合使用。</li>\n<li><strong>popAndPushNamed</strong>: 弹出当前路由，并将命名路由压入堆栈。</li>\n<li><strong>pushReplacement</strong>: 替换当前路由，新路由进入堆栈时旧路由退出。</li>\n</ol>\n<h2 id=\"2.3.示例代码\">2.3.示例代码<a title=\"#2.3.示例代码\" href=\"#2.3.示例代码\"></a></h2>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class=\"hljs-keyword\">void</span> main() =&gt; runApp(MyApp());<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>&#123;<br>  <span class=\"hljs-meta\">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class=\"hljs-keyword\">return</span> MaterialApp(<br>      title: <span class=\"hljs-string\">&#x27;Flutter Demo&#x27;</span>,<br>      home: FirstScreen(),<br>    );<br>  &#125;<br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FirstScreen</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>&#123;<br>  <span class=\"hljs-meta\">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class=\"hljs-keyword\">return</span> Scaffold(<br>      appBar: AppBar(title: Text(<span class=\"hljs-string\">&#x27;First Screen&#x27;</span>)),<br>      body: Center(<br>        child: ElevatedButton(<br>          child: Text(<span class=\"hljs-string\">&#x27;Navigate to second screen&#x27;</span>),<br>          onPressed: () &#123;<br>            Navigator.push(<br>              context,<br>              MaterialPageRoute(builder: (context) =&gt; SecondScreen()),<br>            );<br>          &#125;,<br>        ),<br>      ),<br>    );<br>  &#125;<br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SecondScreen</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>&#123;<br>  <span class=\"hljs-meta\">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class=\"hljs-keyword\">return</span> Scaffold(<br>      appBar: AppBar(title: Text(<span class=\"hljs-string\">&#x27;Second Screen&#x27;</span>)),<br>      body: Center(<br>        child: ElevatedButton(<br>          child: Text(<span class=\"hljs-string\">&#x27;Go back&#x27;</span>),<br>          onPressed: () &#123;<br>            Navigator.pop(context);<br>          &#125;,<br>        ),<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"2.4.运行效果\">2.4.运行效果<a title=\"#2.4.运行效果\" href=\"#2.4.运行效果\"></a></h2>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240106092333261-559981440.gif\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>在这个例子中，创建了两个简单的页面，第一个页面包含一个按钮，点击按钮后会跳转到第二个页面，第二个页面包含一个按钮，点击按钮后会返回到第一个页面。</p>\n<p>通过 Navigator.push 与 MaterialPageRoute 的方式进行页面跳转，跳转到目标页面左上角会有一个返回按钮，点击返回按钮也会返回到上一个页面，这个返回按钮是 Flutter 自动添加的，我们不需要手动添加。</p>\n<h1 id=\"3.参考资料\">3.参考资料<a title=\"#3.参考资料\" href=\"#3.参考资料\"></a></h1>\n<ul>\n<li><a href=\"https://docs.flutter.dev/cookbook/navigation/navigation-basics\" target=\"_blank\">https://docs.flutter.dev/cookbook/navigation/navigation-basics</a></li>\n</ul>\n<h1 id=\"end\">End<a title=\"#end\" href=\"#end\"></a></h1>\n<ul>\n<li>🐤如果您对本文有任何疑问或想法，请在评论区留言，我将很乐意与您交流。</li>\n<li>🐰您的每一条评论对我都至关重要，我会尽快给予回复。</li>\n<li>🎈如果您觉得这篇文章对您有所启发或帮助，请不吝赞赏、收藏或分享。</li>\n<li>🎁您的每一个动作都是对我创作的最大鼓励和支持。</li>\n<li>👍谢谢您的阅读和陪伴！</li>\n</ul>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231211215004818-977875224.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"『Flutter』跨页面传参","link":"2024/01/06/Flutter/25-『Flutter』跨页面传参"},"next":{"title":"『Flutter』命名路由","link":"2024/01/06/Flutter/24-『Flutter』命名路由"},"plink":"http://example.com/2024/01/06/Flutter/23-『Flutter』导航器/","toc":[{"id":"1.前言","title":"1.前言","index":"1"},{"id":"2.导航器","title":"2.导航器","index":"2","children":[{"id":"2.1.导航器简介","title":"2.1.导航器简介","index":"2.1"},{"id":"2.2.常用方法和属性","title":"2.2.常用方法和属性","index":"2.2"},{"id":"2.3.示例代码","title":"2.3.示例代码","index":"2.3"},{"id":"2.4.运行效果","title":"2.4.运行效果","index":"2.4"}]},{"id":"3.参考资料","title":"3.参考资料","index":"3"},{"id":"end","title":"End","index":"4"}]}