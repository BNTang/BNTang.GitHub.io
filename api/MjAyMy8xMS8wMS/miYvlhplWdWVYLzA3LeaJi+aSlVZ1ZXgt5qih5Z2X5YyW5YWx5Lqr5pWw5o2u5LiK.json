{"title":"手撕Vuex-模块化共享数据上","date":"2023-11-01T15:46:11.000Z","date_formatted":{"ll":"Nov 1, 2023","L":"11/01/2023","MM-DD":"11-01"},"link":"2023/11/01/手写VueX/07-手撕Vuex-模块化共享数据上","tags":["手写Vuex"],"updated":"2023-11-17T14:46:01.659Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231117224519326-1882942214.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h1>\n<p>好，经过上一篇的介绍，实现了 Vuex 当中的 actions 方法，接下来我们来实现 Vuex 当中的模块化共享数据（modules）。</p>\n<p>modules 方法用于模块化共享数据，那么什么叫模块化共享数据呢？其实非常简单。</p>\n<p>过去我们将所有模块的数据都放到 state 中共享，例如：</p>\n<p>我们有三个模块 <code>首页 / 个人中心 / 登录</code>，那么我们就会将这三个模块的数据都放到 state 中，但是这样会导致命名匮乏的问题。</p>\n<p>比如说首页中需要共享name, 个人中心中也需要共享name <code>/</code> 登录中也需要共享name，并且这三个name的取值还不一样, 那么为了能把这三条数据放到同一个state中, 我们就必须指定不同的名称, 例如:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-attr\">state</span>:&#123;<br>    <span class=\"hljs-attr\">homeName</span>: <span class=\"hljs-string\">&#x27;www&#x27;</span>,<br>    <span class=\"hljs-attr\">accountName</span>: <span class=\"hljs-string\">&#x27;BNTang&#x27;</span>,<br>    <span class=\"hljs-attr\">loginName</span>: <span class=\"hljs-string\">&#x27;top&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这样就会导致命名匮乏的问题，而且如果我们的项目足够大，那么我们的 state 中就会有很多的数据，这样就会导致我们的 state 中的数据非常多，而且不好管理。</p>\n<p>为了解决这个问题，Vuex 就推出了模块化共享数据的方法，那么什么叫模块化共享数据呢？模块化共享数据就是将不同模块的数据放到不同的模块（state）中，这个就是模块化共享数据。</p>\n<p>那么模块化共享数据怎么做呢，我们先不要管怎么做，我们先来看看模块化共享数据的好处。</p>\n<p>我们还是拿上面的例子来说，我们有三个模块 <code>首页 / 个人中心 / 登录</code>，那么我们就会将这三个模块的数据都放到 state 中，但是这样会导致命名匮乏的问题。</p>\n<p>好，到这里我们已经知道了模块化共享数据的好处，我们先来用一下模块化共享数据。</p>\n<p>我先不管三七二十一，我在 Store 对象的 store 中定义了一个全局的数据 globalName 取值为 BNTang，</p>\n<p>定义完毕之后呢，这个 globalName 代表着全局的数据，那么我们就可以在任何一个模块当中使用这个数据，那么接下来怎么办，例如这个时候我有两个模块分别是首页与个人中心，这两个模块中分别有一个 name 数据，这两个 name 该如何做呢，好我先写代码再来解释。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> home = &#123;<br>    <span class=\"hljs-attr\">state</span>: &#123;<br>        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;首页&#x27;</span><br>    &#125;,<br>    <span class=\"hljs-attr\">getters</span>: &#123;&#125;,<br>    <span class=\"hljs-attr\">mutations</span>: &#123;&#125;,<br>    <span class=\"hljs-attr\">actions</span>: &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>如上的代码和 Store 中有一套相同的结构，这个对象中保存着首页的 name，保存完毕了之后，还没添加到 Store 中，那么如何添加到 Store 中呢，其实很简单，我们只需要在 Store 中的 modules 中添加这个模块就可以了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-attr\">modules</span>: &#123;<br>    <span class=\"hljs-attr\">home</span>: home<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>如上代码的写法就代表着，我们 Store 除了保存了全局的共享数据以外还保存了首页模块的共享数据，那么我们的个人中心数据该如何做呢，其实也是一样的（也是同一个世界，同一个梦想的），我们来写一个个人中心的模块。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> account = &#123;<br>    <span class=\"hljs-attr\">state</span>: &#123;<br>        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;账户&#x27;</span><br>    &#125;,<br>    <span class=\"hljs-attr\">getters</span>: &#123;&#125;,<br>    <span class=\"hljs-attr\">mutations</span>: &#123;&#125;,<br>    <span class=\"hljs-attr\">actions</span>: &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后将这个模块添加到 Store 中，方式和上面一样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-attr\">modules</span>: &#123;<br>    <span class=\"hljs-attr\">home</span>: home,<br>    <span class=\"hljs-attr\">account</span>: account<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>好了，到这里我们已经定义了全局共享的数据，与各个模块的共享数据，我们保存归保存，但是我们怎么使用呢，我们来看看。</p>\n<p>拿全局共享的数据（随机找一个组件展示数据即可）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;p&gt;&#123;&#123; this.$store.state.globalName &#125;&#125;&lt;/p&gt;<br></code></pre></td></tr></table></figure>\n<p>拿首页的共享数据（随机找一个组件展示数据即可）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;p&gt;&#123;&#123; this.$store.state.home.name &#125;&#125;&lt;/p&gt;<br></code></pre></td></tr></table></figure>\n<p>拿个人中心的共享数据（随机找一个组件展示数据即可）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;p&gt;&#123;&#123; this.$store.state.account.name &#125;&#125;&lt;/p&gt;<br></code></pre></td></tr></table></figure>\n<p>测试效果我不贴图了本人亲自测试过，有个 <code>注意点</code>，我们的 Nuex 还没有实现模块化，所以在测试的时候记得将自己实现的 Nuex 注释掉，打开官方的 Vuex。</p>\n<p>到这里，我们的页面就已经展示了全局共享数据与模块化共享数据，完成了将不同模块的数据放到不同的模块（state）中，这个就是模块化共享数据。</p>\n<h1 id=\"模块化中-getters/mutations/actions-的使用\">模块化中 getters/mutations/actions 的使用<a title=\"#模块化中-getters/mutations/actions-的使用\" href=\"#模块化中-getters/mutations/actions-的使用\"></a></h1>\n<p>我们知道在 Store 当中，我们可以使用 getters/mutations/actions 这三个方法，那么这三个方法在模块化当中是怎么使用的呢，先看全局的，在全局 Store 分别在这三个方法中定义方法，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-attr\">getters</span>: &#123;<br>    <span class=\"hljs-title function_\">getGlobalName</span>(<span class=\"hljs-params\">state</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> state.<span class=\"hljs-property\">globalName</span> + <span class=\"hljs-string\">&#x27;111111&#x27;</span>;<br>    &#125;<br>&#125;,<br><span class=\"hljs-attr\">mutations</span>: &#123;<br>    <span class=\"hljs-title function_\">changeGlobalName</span>(<span class=\"hljs-params\">state, payload</span>) &#123;<br>        state.<span class=\"hljs-property\">globalName</span> += payload;<br>    &#125;<br>&#125;,<br><span class=\"hljs-attr\">actions</span>: &#123;<br>    <span class=\"hljs-title function_\">asyncChangeGlobalName</span>(<span class=\"hljs-params\">&#123;commit&#125;, payload</span>) &#123;<br>        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>            <span class=\"hljs-title function_\">commit</span>(<span class=\"hljs-string\">&#x27;changeGlobalName&#x27;</span>, payload);<br>        &#125;, <span class=\"hljs-number\">1000</span>);<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure>\n<p>内容非常的简单，如果是从之前的文章一步一步跟着来的再看如上的代码基本上没有什么压力（我这里不做过多的解释，因为前面讲解的很细，不懂的可以回去翻看之前章节的介绍），然后我们在组件当中使用这三个方法，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>  &lt;div class=&quot;hello&quot;&gt;<br>    &lt;p&gt;&#123;&#123; this.$store.state.globalName &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;&#123;&#123; this.$store.getters.getGlobalName &#125;&#125;&lt;/p&gt;<br>    &lt;button @click=&quot;globalFn1&quot;&gt;同步操作&lt;/button&gt;<br>    &lt;button @click=&quot;globalFn2&quot;&gt;异步操作&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &#x27;HelloWorld&#x27;,<br>  methods: &#123;<br>    globalFn1() &#123;<br>      this.$store.commit(&#x27;changeGlobalName&#x27;, 10);<br>    &#125;,<br>    globalFn2() &#123;<br>      this.$store.dispatch(&#x27;asyncChangeGlobalName&#x27;, 5);<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br>&lt;style scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>\n<p>关于测试自行测试，这里不做过多的解释(运行项目，点击页面上面的按钮即可查询效果)。</p>\n<p>好了这里我们已经知道了全局的 getters/mutations/actions 的使用，那么模块化当中的 getters/mutations/actions 的使用又是怎么样的呢，我们来看看。</p>\n<p>我先不管三七二十一，我在 home 模块中的 getters/mutations/actions 中定义方法，如下：</p>\n<p>首页模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-attr\">getters</span>: &#123;<br>    <span class=\"hljs-title function_\">getHomeName</span>(<span class=\"hljs-params\">state</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> state.<span class=\"hljs-property\">name</span> + <span class=\"hljs-string\">&#x27;222222&#x27;</span>;<br>    &#125;<br>&#125;,<br><span class=\"hljs-attr\">mutations</span>: &#123;<br>    <span class=\"hljs-title function_\">changeHomeName</span>(<span class=\"hljs-params\">state, payload</span>) &#123;<br>        state.<span class=\"hljs-property\">name</span> += payload;<br>    &#125;<br>&#125;,<br><span class=\"hljs-attr\">actions</span>: &#123;<br>    <span class=\"hljs-title function_\">asyncChangeHomeName</span>(<span class=\"hljs-params\">&#123;commit&#125;, payload</span>) &#123;<br>        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>            <span class=\"hljs-title function_\">commit</span>(<span class=\"hljs-string\">&#x27;changeHomeName&#x27;</span>, payload);<br>        &#125;, <span class=\"hljs-number\">1000</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>我这个时候想，我在全局 Store 的 getters/mutations/actions 方法中定义了方法，可以和之前的方式一样使用，那么在模块中的 getters/mutations/actions 方法中定义了方法，我能不能和之前的方式一样使用呢，我们来看看。</p>\n<p>首先展示首页模块中的 name, 如果这里直接和之前一样的写法肯定是不能展示的，所以这里我就要提到一个注意点：<code>如果获取的是模块中state共享的数据, 那么需要加上模块的名称</code></p>\n<p>知道了这个注意点之后，我们的代码就可以改写为如下的方式来展示模块中 store 存储的数据，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;p&gt;&#123;&#123; this.$store.state.home.name &#125;&#125;&lt;/p&gt;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231103000033831-177765506.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>上面这一点是我们在使用模块化共享数据的时候需要注意的，与寻常的使用方式不同，需要加上模块的名称。</p>\n<p>那么我们从 getters/mutations/actions 中获取数据呢，如果获取的是模块中getters共享的数据, 那么不需要加上模块的名称，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;p&gt;&#123;&#123; this.$store.getters.getHomeName &#125;&#125;&lt;/p&gt;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231103000344085-1078674938.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>mutation 与 action 与使用全局的方式一样，不需要加上模块的名称, 在页面编写两个按钮，一个是同步，一个是异步，在分别实现下各个按钮的点击事件即可, 代码如下：</p>\n<p>添加按钮：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;button @click=&quot;homeFn1&quot;&gt;同步操作&lt;/button&gt;<br>&lt;button @click=&quot;homeFn2&quot;&gt;异步操作&lt;/button&gt;<br></code></pre></td></tr></table></figure>\n<p>实现方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">homeFn1() &#123;<br>  this.$store.commit(&#x27;changeHomeName&#x27;, 10);<br>&#125;,<br>homeFn2() &#123;<br>  this.$store.dispatch(&#x27;asyncChangeHomeName&#x27;, 5);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>好了，我们首页模块的 getters/mutations/actions 的使用代码编写好了，我们赶紧趁热来测试一下，看看我们的代码是否能够正常的运行，打开浏览器点击按钮即可完成测试我这里略过。</p>\n<p>首页模块的我们编写完毕了，接着来编写个人中心模块的 getters/mutations/actions 的使用，其实和首页模块的 getters/mutations/actions 的使用是一样的，我们来看看，为了节约时间，我直接贴代码：</p>\n<p>个人中心模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> account = &#123;<br>    <span class=\"hljs-attr\">state</span>: &#123;<br>        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;账户&#x27;</span><br>    &#125;,<br>    <span class=\"hljs-attr\">getters</span>: &#123;<br>        <span class=\"hljs-title function_\">getAccountName</span>(<span class=\"hljs-params\">state</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> state.<span class=\"hljs-property\">name</span> + <span class=\"hljs-string\">&#x27;333333&#x27;</span>;<br>        &#125;<br>    &#125;,<br>    <span class=\"hljs-attr\">mutations</span>: &#123;<br>        <span class=\"hljs-title function_\">changeAccountName</span>(<span class=\"hljs-params\">state, payload</span>) &#123;<br>            state.<span class=\"hljs-property\">name</span> += payload;<br>        &#125;<br>    &#125;,<br>    <span class=\"hljs-attr\">actions</span>: &#123;<br>        <span class=\"hljs-title function_\">asyncChangeAccountName</span>(<span class=\"hljs-params\">&#123;commit&#125;, payload</span>) &#123;<br>            <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>                <span class=\"hljs-title function_\">commit</span>(<span class=\"hljs-string\">&#x27;changeAccountName&#x27;</span>, payload);<br>            &#125;, <span class=\"hljs-number\">1000</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>页面展示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;p&gt;&#123;&#123; this.$store.state.account.name &#125;&#125;&lt;/p&gt;<br>&lt;p&gt;&#123;&#123; this.$store.getters.getAccountName &#125;&#125;&lt;/p&gt;<br>&lt;button @click=&quot;accountFn1&quot;&gt;同步操作&lt;/button&gt;<br>&lt;button @click=&quot;accountFn2&quot;&gt;异步操作&lt;/button&gt;<br></code></pre></td></tr></table></figure>\n<p>实现方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">accountFn1() &#123;<br>  this.$store.commit(&#x27;changeAccountName&#x27;, 10);<br>&#125;,<br>accountFn2() &#123;<br>  this.$store.dispatch(&#x27;asyncChangeAccountName&#x27;, 5);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>好了，到这里我们的模块化当中的 getters/mutations/actions 的使用就已经完成了。</p>\n<p>其实除了在全局的 Store 中添加子模块，子模块还可以添加模块，可以无限的这样添加模块，例如我现在有一个登陆模块，我将登陆模块添加到 account 模块中，登陆模块的代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> login = &#123;<br>    <span class=\"hljs-attr\">state</span>: &#123;<br>        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;登录&#x27;</span><br>    &#125;,<br>    <span class=\"hljs-attr\">getters</span>: &#123;<br>        <span class=\"hljs-title function_\">getLoginName</span>(<span class=\"hljs-params\">state</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> state.<span class=\"hljs-property\">name</span> + <span class=\"hljs-string\">&#x27;333333&#x27;</span>;<br>        &#125;<br>    &#125;,<br>    <span class=\"hljs-attr\">mutations</span>: &#123;<br>        <span class=\"hljs-title function_\">changeLoginName</span>(<span class=\"hljs-params\">state, payload</span>) &#123;<br>            state.<span class=\"hljs-property\">name</span> += payload;<br>        &#125;<br>    &#125;,<br>    <span class=\"hljs-attr\">actions</span>: &#123;<br>        <span class=\"hljs-title function_\">asyncChangeLoginName</span>(<span class=\"hljs-params\">&#123;commit&#125;, payload</span>) &#123;<br>            <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>                <span class=\"hljs-title function_\">commit</span>(<span class=\"hljs-string\">&#x27;changeLoginName&#x27;</span>, payload);<br>            &#125;, <span class=\"hljs-number\">1000</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后将登陆模块添加到 account 模块中，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-attr\">modules</span>: &#123;<br>    <span class=\"hljs-attr\">login</span>: login<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231105010510134-1879206239.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>然后我们在页面中展示登陆模块的数据，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;p&gt;&#123;&#123; this.$store.state.account.login.name &#125;&#125;&lt;/p&gt;<br>&lt;p&gt;&#123;&#123; this.$store.getters.getLoginName &#125;&#125;&lt;/p&gt;<br></code></pre></td></tr></table></figure>\n<p>展示数据的注意点与之前一样，需要加上模块的名称，而 getters 就不需要加上模块的名称，然后我们在页面中调用登陆模块的 mutations/actions 的方法，代码如下：</p>\n<p>首先是触发按钮：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;button @click=&quot;loginFn1&quot;&gt;同步操作&lt;/button&gt;<br>&lt;button @click=&quot;loginFn2&quot;&gt;异步操作&lt;/button&gt;<br></code></pre></td></tr></table></figure>\n<p>然后是实现方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">loginFn1() &#123;<br>  this.$store.commit(&#x27;changeLoginName&#x27;, 10);<br>&#125;,<br>loginFn2() &#123;<br>  this.$store.dispatch(&#x27;asyncChangeLoginName&#x27;, 5);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>好了，到这里我们的模块化的使用就已经完成了，我们赶紧来测试一下，看看我们的代码是否能够正常的运行，打开浏览器点击按钮即可完成测试我这里略过。</p>\n","prev":{"title":"Vite 前期过渡","link":"2023/11/04/Vite/前期过度/01-Vite 前期过渡"},"next":{"title":"手撕Vuex-实现actions方法","link":"2023/10/31/手写VueX/06-手撕Vuex-实现actions方法"},"plink":"http://example.com/2023/11/01/手写VueX/07-手撕Vuex-模块化共享数据上/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"模块化中-getters/mutations/actions-的使用","title":"模块化中 getters&#x2F;mutations&#x2F;actions 的使用","index":"2"}],"reading_time":"2643 words in 18 min"}