{"title":"手撕Vuex-添加全局$store","date":"2023-10-28T04:08:33.000Z","date_formatted":{"ll":"Oct 28, 2023","L":"10/28/2023","MM-DD":"10-28"},"link":"2023/10/28/手写VueX/02-手撕Vuex-添加全局$store","tags":["手写Vuex"],"updated":"2023-10-28T06:51:08.190Z","content":"<p>经过上一篇的介绍，了解到了 Vuex 的实现本质就是一个插件，所以要做的事情就是实现这个插件的代码编写即可。</p>\n<p>本篇文章主要是实现一个全局的 <code>$store</code>，这个 <code>$store</code> 是挂载在 Vue 的原型上的，所以在任何一个组件当中都可以通过 <code>this.$store</code> 访问到。</p>\n<p>我们先来看看 Vue 官方的，我们分别在 App.vue, HelloWorld.vue 中打印 <code>this.$store</code>，看看能不能访问到。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">mounted() &#123;<br>  console.log(this.$store);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231028122129085-1712857763.png\" alt=\"image-20231028122125928\" loading=\"lazy\" class=\"φbp\"></p>\n<p>可以看到都访问到了，那么我们就可以开始实现了。</p>\n<p>官方开发插件文档：<a href=\"https://cn.vuejs.org/guide/reusability/plugins.html\" target=\"_blank\">https://cn.vuejs.org/guide/reusability/plugins.html</a></p>\n<p>我这里直接上代码，创建一个 Nuex.js 文件，在文件中先简单的暴露一个 install 方法。</p>\n<p>这个 install 方法是 Vue.use() 调用的，所以在这个方法中可以接收到 Vue 的实例，然后在这个方法中实现我们的逻辑。</p>\n<p>在使用 Vuex 的时候需要传递一个 store 对象，这个 store 对象就是我们的仓库，所以我们还需要在 Nuex.js 文件中暴露一个 Store 属性，这个属性的取值是一个类。</p>\n<p>最终的代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * install方法会在外界调用Vue.use的时候执行</span><br><span class=\"hljs-comment\"> * 并且在执行的时候会把Vue实例和一些额外的参数传递给我们</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> Vue Vue实例</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> options 额外的参数</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">install</span> = (<span class=\"hljs-params\">Vue, options</span>) =&gt; &#123;<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>    install<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这样我们的插件就创建完毕了，接下来就是在 install 方法中实现我们的逻辑。给每一个Vue实例都添加一个 <code>$store</code> 属性。</p>\n<p>在Vue中有一个名称叫做mixin方法，这个方法会在创建每一个Vue实例的时候执行，所以我们可以通过mixin方法给每一个Vue实例添加 <code>$store</code> 属性。</p>\n<p>紧接着继续改写我们的代码，调用 Vue.mixin 方法重写 beforeCreate 方法，这个方法会在每一个组件创建的时候执行。</p>\n<p>具体的核心逻辑我这里先不写，我先在 beforeCreate 方法中打印一下组件的一些参数信息。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231028142241795-1246142645.png\" alt=\"image-20231028142241388\" loading=\"lazy\" class=\"φbp\"></p>\n<p>打开浏览器控制台，运行结果如下：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231028142433027-1967054148.png\" alt=\"image-20231028142432851\" loading=\"lazy\" class=\"φbp\"></p>\n<p>可以看到在 beforeCreate 方法中打印了三次，Vue 实例化的时候会先实例化根组件，然后在实例化根组件的时候会先实例化子组件，所以会打印三次。（Vue，App, HelloWorld）</p>\n<p>如何验证这个结论呢那么就是分别打印一下实例化组件的名称，根组件还没有添加 name 属性，先给我们的根组件也取一个名字，叫做 root：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231028142757944-1182045813.png\" alt=\"image-20231028142757748\" loading=\"lazy\" class=\"φbp\"></p>\n<p>在更改下 beforeCreate 方法打印的属性值为 <code>$options.name</code> 即可：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231028142931033-1306874045.png\" alt=\"image-20231028142930627\" loading=\"lazy\" class=\"φbp\"></p>\n<p>返回浏览器控制台观察输出结果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231028143013922-1844867751.png\" alt=\"image-20231028143013047\" loading=\"lazy\" class=\"φbp\"></p>\n<p>输出的内容和我们的结论是一致的，知道了实例化的过程之后，接下来就是完善核心逻辑即可，我们知道在实例化过程中，首先实例化的是根组件，然后在实例化根组件的时候会先实例化子组件，所以我们可以在实例化根组件的时候给根组件添加一个 <code>$store</code> 属性，然后在实例化子组件的时候直接从父组件中取出 <code>$store</code> 属性赋值给子组件即可。</p>\n<p>在根组件中有一个 store，只要将这个 store 赋值给 <code>$store</code> 即可，那么在子组件中就可以通过 <code>this.$store</code> 访问到了。</p>\n<p>有了思路之后，我们就可以开始编写代码了，最终实现的代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title function_\">beforeCreate</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">    如果是根组件, 那么默认就有store</span><br><span class=\"hljs-comment\">    我们只需要将store变成$store即可</span><br><span class=\"hljs-comment\">    */</span><br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$options</span> &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$options</span>.<span class=\"hljs-property\">store</span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$store</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$options</span>.<span class=\"hljs-property\">store</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">        如果不是根组件, 那么默认没有store</span><br><span class=\"hljs-comment\">        我们只需要将它父组件的$store赋值给它即可</span><br><span class=\"hljs-comment\">        */</span><br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$store</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$parent</span>.<span class=\"hljs-property\">$store</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后在将之前组件中访问 <code>this.$store</code> 的代码放开(取消注释)：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231028144203374-158330165.png\" alt=\"image-20231028144203188\" loading=\"lazy\" class=\"φbp\"></p>\n<p>然后重新运行项目，可以看到可以访问到 <code>this.$store</code>：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231028144109273-1997191134.png\" alt=\"image-20231028144109223\" loading=\"lazy\" class=\"φbp\"></p>\n<p>到这里添加全局 <code>$store</code> 的代码就完成了(还没有实现数据共享，所以在各个组件当中访问共享数据的代码我都是注释掉了)。</p>\n","prev":{"title":"手撕Vuex-实现共享数据","link":"2023/10/28/手写VueX/03-手撕Vuex-实现共享数据"},"next":{"title":"手撕Vuex-Vuex实现原理分析","link":"2023/10/21/手写VueX/01-手撕Vuex-Vuex实现原理分析"},"plink":"http://example.com/2023/10/28/手写VueX/02-手撕Vuex-添加全局$store/","reading_time":"1208 words in 8 min"}