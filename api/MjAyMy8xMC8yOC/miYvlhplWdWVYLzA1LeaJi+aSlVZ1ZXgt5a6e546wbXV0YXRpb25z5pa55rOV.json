{"title":"手撕Vuex-实现mutations方法","date":"2023-10-28T08:13:34.000Z","date_formatted":{"ll":"Oct 28, 2023","L":"10/28/2023","MM-DD":"10-28"},"link":"2023/10/28/手写VueX/05-手撕Vuex-实现mutations方法","tags":["手写Vuex"],"updated":"2023-11-15T14:42:34.536Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231115223811195-666515083.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>经过上一篇章介绍，完成了实现 getters 的功能，那么接下来本篇将会实现 mutations 的功能。</p>\n<p>在实现之前我们先来回顾一下 mutations 的使用。</p>\n<p>将官方的 Vuex 导入进来，因为我们的还没有实现，现用一下官方的，来演示一下 mutations 的使用。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231030234751774-483495252.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>mutations 是用来修改共享数据的，先在 mutations 中定义一个方法，这个方法接受两个参数，第一个参数是 state，第二个参数是 payload，payload 是一个对象，这个对象中存放的是我们需要修改的数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title function_\">addNum</span>(<span class=\"hljs-params\">state, payload</span>) &#123;<br>    state.<span class=\"hljs-property\">num</span> += payload;<br>&#125;,<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231030234841460-1069200900.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>在 state 当中定义 num：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231030234924453-1137483616.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>接下来就是使用了，使用的时候需要使用 commit 方法，commit 方法接受两个参数，第一个参数是方法名，第二个参数是 payload，payload 是一个对象，这个对象中存放的是我们需要修改的数据。</p>\n<p>随便找一个组件，先展示我们的 num，然后在编写一个按钮，点击按钮之后调用 addNum 方法，传入一个参数 10，这样就可以实现 num 的增加了。</p>\n<p>展示 num，我这里在 HelloWorld.vue 组件中进行展示的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>  &lt;div class=&quot;hello&quot;&gt;<br>    &lt;p&gt;&#123;&#123; this.$store.state.num &#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>\n<p>展示完毕之后在编写一个按钮，点击按钮之后调用 addNum 方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;button @click=&quot;myFn&quot;&gt;我是按钮&lt;/button&gt;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231030235303830-1774907329.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>在 HelloWorld.vue 组件中编写 myFn 方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">myFn() &#123;<br>  this.$store.commit(&#x27;addNum&#x27;, 10);<br>&#125;,<br></code></pre></td></tr></table></figure>\n<p>好了到这里，我们的基本结构搭建完毕，运行一下，看看效果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231030235605273-1521676330.gif\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>这个就是 mutations 的基本使用，那么了解完和回顾完毕之后，接下来我们就来实现 mutations 的功能。</p>\n<p>其实 mutations 的实现和 getters 的实现差不多，好，我们废话不多说，直接来处理下吧，我先将上一篇处理 getters 的代码封装下，然后再来处理 mutations 的代码。</p>\n<p>我单独抽取一个 initGetters 来做这个事情，这样代码就清晰了很多，这个 initGetters 方法接受一个 options，然后在将之前处理的代码放进去即可。</p>\n<p>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">options</span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = options.<span class=\"hljs-property\">state</span>;<br>    <span class=\"hljs-comment\">// 将传递进来的 getters 放到 Store 上</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">initGetters</span>(options);<br>&#125;<br><br><span class=\"hljs-title function_\">initGetters</span>(<span class=\"hljs-params\">options</span>) &#123;<br>    <span class=\"hljs-comment\">// 1.拿到传递进来的getters</span><br>    <span class=\"hljs-keyword\">let</span> getters = options.<span class=\"hljs-property\">getters</span> || &#123;&#125;;<br>    <span class=\"hljs-comment\">// 2.在Store上新增一个getters的属性</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">getters</span> = &#123;&#125;;<br>    <span class=\"hljs-comment\">// 3.将传递进来的getters中的方法添加到当前Store的getters上</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> getters) &#123;<br>        <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">getters</span>, key, &#123;<br>            <span class=\"hljs-attr\">get</span>: <span class=\"hljs-function\">() =&gt;</span> &#123;<br>                <span class=\"hljs-comment\">// 4.将getters中的方法执行, 并且将state传递过去</span><br>                <span class=\"hljs-keyword\">return</span> getters[key](<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>);<br>            &#125;<br>        &#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这样我们的 getters 就处理完毕了，接下来我们就来处理 mutations 的代码。</p>\n<p>一样的我编写一个 initMutations 方法，这个方法接受一个 options, 这里的步骤和 getters 的步骤是一样的，我们先来看一下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title function_\">initMutations</span>(<span class=\"hljs-params\">options</span>) &#123;<br>    <span class=\"hljs-comment\">// 1.拿到传递进来的mutations</span><br>    <span class=\"hljs-keyword\">let</span> mutations = options.<span class=\"hljs-property\">mutations</span> || &#123;&#125;;<br>    <span class=\"hljs-comment\">// 2.在Store上新增一个mutations的属性</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">mutations</span> = &#123;&#125;;<br>    <span class=\"hljs-comment\">// 3.将传递进来的mutations中的方法添加到当前Store的mutations上</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> mutations) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">mutations</span>[key] = <span class=\"hljs-function\">(<span class=\"hljs-params\">payload</span>) =&gt;</span> &#123;<br>            mutations[key](<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>, payload);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这样 Store 上面就有了一个 mutations 的属性，这个属性中存放的是我们传递进来的 mutations 方法，先来验证一下，打开浏览器，看看效果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231031001056471-1076720680.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>注意点：记得将官方的 Vuex 注释掉，用我们自己的 Nuex。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231031001132902-1579272632.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>这样我们的 mutations 就处理完毕了，接下来我们就来处理一下 commit 方法。</p>\n<p>通过之前我们在使用 mutations 的时候，是通过 store.commit 方法来调用的，所以我们需要在 Store 上面添加一个 commit 方法，这个方法接受两个参数，第一个参数是方法名，第二个参数是 payload，payload 是一个对象，这个对象中存放的是我们需要修改的数据。</p>\n<p>commit 方法具体的实现代码逻辑就是去 mutations 中找到对应的方法，然后执行这个方法，将 state 和 payload 传递过去。</p>\n<p>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title function_\">commit</span>(<span class=\"hljs-params\">type, payload</span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">mutations</span>[type](payload);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231031223736312-1610653079.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>实现了 commit 方法之后，我们就可以在组件中使用了，我们先来验证一下，打开浏览器，看看效果：</p>\n<p>我这里不截图了，效果就是点击了按钮发现 num 值并没有发生变化，这是为什么呢？</p>\n<p>因为我们在 mutations 中修改的是 state 当中的数据，state 并没有实现双向绑定，所以不改变是正常的。</p>\n<p>那么在 mutations 中更改了 state 的数据之后，我们怎么去更新视图呢？这里我们只需要将 state 变成双向绑定的即可，这里我们使用 Vue 当中的 util 工具类来进行快速实现双向绑定。</p>\n<p>正好呢通过这个问题，可以让大家知道在 Vue 中的 util 工具类中提供了有一个方法叫做 defineReactive，这个方法可以让我们的数据变成双向绑定的。</p>\n<p>通过这个方法就可以快速的将某个数据变成双向绑定的数据，defineReactive 这个方法接收三个参数：</p>\n<ul>\n<li>第一个参数: 要给哪个对象添加属性</li>\n<li>第二个参数: 要给指定的对象添加什么属性</li>\n<li>第三个参数: 要给这个属性添加什么值</li>\n</ul>\n<p>好了，废话不多说，我们直接来处理一下吧，我们先导入 Vue，就可以通过 Vue.util.defineReactive 来调用这个方法了。</p>\n<p>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-property\">util</span>.<span class=\"hljs-title function_\">defineReactive</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-string\">&#x27;state&#x27;</span>, options.<span class=\"hljs-property\">state</span>);<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231031224753082-1612433561.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>本章的重点就是要知道在 Vue 当中有 defineReactive 方法，这个方法可以让我们的数据变成双向绑定的，这样我们就可以在 mutations 中修改 state 的数据之后，视图也会发生变化了。</p>\n<p>这样我们的 state 就变成了双向绑定的了，验证一下，打开浏览器，看看效果即可，好了到这里，我们的 mutations 就处理完毕了。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231114214453106-860071944.jpg\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"手撕Vuex-实现actions方法","link":"2023/10/31/手写VueX/06-手撕Vuex-实现actions方法"},"next":{"title":"手撕Vuex-实现getters方法","link":"2023/10/28/手写VueX/04-手撕Vuex-实现getters方法"},"plink":"http://example.com/2023/10/28/手写VueX/05-手撕Vuex-实现mutations方法/","reading_time":"1648 words in 11 min"}