{"title":"手撕Vuex-实现getters方法","date":"2023-10-28T07:39:40.000Z","date_formatted":{"ll":"Oct 28, 2023","L":"10/28/2023","MM-DD":"10-28"},"link":"2023/10/28/手写VueX/04-手撕Vuex-实现getters方法","tags":["手写Vuex"],"updated":"2023-11-14T13:44:58.639Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231114214401079-1199502899.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>经上一篇章介绍，完成了实现共享数据的功能，实现方式是在 Store 构造函数中将创建 Store 时将需要共享的数据添加到 Store 上面，这样将来我们就能通过 this.$store 拿到这个 Store，既然能拿到这个 Store，我们就可以通过 <code>.state</code> 拿到需要共享的属性。</p>\n<p>除了可以通过 <code>.state</code> 拿到共享数据之外，还可以通过 <code>.getters</code> 拿到共享数据，所以本章我们需要在 Nuex.js 文件中实现 getters 的功能。</p>\n<p>首先在创建 Store 仓库的时候，需要传递一个 getters 对象，这个对象中存放的就是我们需要共享的数据，getters 对象中的每一个属性都是一个函数，这个函数的返回值就是我们需要共享的数据。</p>\n<p>getters 属性是通过计算属性实现的。</p>\n<p>我们先编写一下如上所说的内容代码方面的实现，更改 store/index.js：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vuex</span>.<span class=\"hljs-title class_\">Store</span>(&#123;<br>    <span class=\"hljs-attr\">state</span>: &#123;<br>        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;BNTang&#x27;</span><br>    &#125;,<br>    <span class=\"hljs-attr\">getters</span>: &#123;<br>        <span class=\"hljs-title function_\">myName</span>(<span class=\"hljs-params\">state</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> state.<span class=\"hljs-property\">name</span> + <span class=\"hljs-string\">&#x27;666&#x27;</span>;<br>        &#125;<br>    &#125;,<br>    <span class=\"hljs-attr\">mutations</span>: &#123;&#125;,<br>    <span class=\"hljs-attr\">actions</span>: &#123;&#125;,<br>    <span class=\"hljs-attr\">modules</span>: &#123;&#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<p>在使用之前，我们先将 Nuex.js 文件中的代码进行改写，将传递进来的getters放到Store上面，这样我们就能通过this.$store.getters拿到这个getters对象，既然能拿到这个getters对象，我们就可以通过 <code>.myName</code> 拿到需要共享的属性。</p>\n<p>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Store</span> &#123;<br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">options</span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = options.<span class=\"hljs-property\">state</span>;<br><br>        <span class=\"hljs-comment\">// 将传递进来的getters放到Store上</span><br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">getters</span> = options.<span class=\"hljs-property\">getters</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这么一顿操作之后，我们就能在组件中通过 <code>this.$store.getters</code> 拿到共享数据了。</p>\n<p>App.vue：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>  &lt;div id=&quot;app&quot;&gt;<br>    &lt;p&gt;&#123;&#123; this.$store.getters.myName &#125;&#125;&lt;/p&gt;<br>    &lt;HelloWorld/&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>\n<p>HelloWorld.vue:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>  &lt;div class=&quot;hello&quot;&gt;<br>    &lt;p&gt;&#123;&#123; this.$store.getters.myName &#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>\n<p>打开浏览器查看效果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231028155949224-337820437.png\" alt=\"image-20231028155949288\" loading=\"lazy\" class=\"φbp\"></p>\n<p>可以看到页面上显示的并不是我们想要的结果，我们想要的结果是 BNTang666，但是页面上显示的是一个函数，这是为什么呢？</p>\n<p>其实在 Store 构造函数中，是不能直接将 getters 对象放到 Store 上面的, 需要自己额外处理一下，处理的方式分为如下四步骤：</p>\n<ol>\n<li>拿到传递进来的getters</li>\n<li>在Store上新增一个getters的属性</li>\n<li>将传递进来的getters中的方法添加到当前Store的getters上</li>\n<li>将getters中的方法执行, 并且将state传递过去</li>\n</ol>\n<p>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Store</span> &#123;<br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">options</span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = options.<span class=\"hljs-property\">state</span>;<br><br>        <span class=\"hljs-comment\">// 1.拿到传递进来的getters</span><br>        <span class=\"hljs-keyword\">let</span> getters = options.<span class=\"hljs-property\">getters</span> || &#123;&#125;;<br>        <span class=\"hljs-comment\">// 2.在Store上新增一个getters的属性</span><br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">getters</span> = &#123;&#125;;<br>        <span class=\"hljs-comment\">// 3.将传递进来的getters中的方法添加到当前Store的getters上</span><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> getters) &#123;<br>            <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">getters</span>, key, &#123;<br>                <span class=\"hljs-attr\">get</span>: <span class=\"hljs-function\">() =&gt;</span> &#123;<br>                    <span class=\"hljs-comment\">// 4.将getters中的方法执行, 并且将state传递过去</span><br>                    <span class=\"hljs-keyword\">return</span> getters[key](<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>);<br>                &#125;<br>            &#125;)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>将代码改写之后，打开浏览器查看效果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231028160744539-268268798.png\" alt=\"image-20231028160738710\" loading=\"lazy\" class=\"φbp\"></p>\n<p>可以看到页面上显示的是我们想要的结果。</p>\n<p>到这里我们就完成了 getters 的实现。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231114214453106-860071944.jpg\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"手撕Vuex-实现mutations方法","link":"2023/10/28/手写VueX/05-手撕Vuex-实现mutations方法"},"next":{"title":"手撕Vuex-实现共享数据","link":"2023/10/28/手写VueX/03-手撕Vuex-实现共享数据"},"plink":"http://example.com/2023/10/28/手写VueX/04-手撕Vuex-实现getters方法/","reading_time":"833 words in 6 min"}