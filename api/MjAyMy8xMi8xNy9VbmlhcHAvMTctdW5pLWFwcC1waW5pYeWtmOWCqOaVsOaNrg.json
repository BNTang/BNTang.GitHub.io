{"title":"uni-app-pinia存储数据","date":"2023-12-17T03:28:40.000Z","date_formatted":{"ll":"Dec 17, 2023","L":"12/17/2023","MM-DD":"12-17"},"link":"2023/12/17/Uniapp/17-uni-app-pinia存储数据","tags":["Uniapp"],"updated":"2023-12-17T06:24:53.348Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231203182011989-2031116885.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h1>\n<ul>\n<li>经过上个章节的介绍，大家可以了解到 uni-app-数据缓存 的基本使用方法</li>\n<li>那本章节来给大家介绍一下 uni-app-pinia存储数据 的基本使用方法</li>\n<li>经过我这么多篇章的介绍，我发现大家环境比较耗时，所以在今后的文章中，我会尽量减少环境的搭建</li>\n<li>如果某一篇的文章环境确实是不一样的，我会在文章中说明，然后编写对应的搭建过程</li>\n</ul>\n<p>本文的由来呢，就是因为在 Vue2 中与 Vue3 中都可以使用 Vuex 来进行数据的存储, 但是在 Vue3 出现了 Pinia，所以我就想着在 uni-app 中使用 Pinia 来进行数据的存储。</p>\n<h1 id=\"步入正题\">步入正题<a title=\"#步入正题\" href=\"#步入正题\"></a></h1>\n<p>首先来给大家看看官方文档吧，在文档中找到, <code>uni-app</code> -&gt; <code>教程</code> -&gt; <code>vue语法</code>，先来看 Vue2：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231217115145066-681878031.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>可以从图中看到，在 Vue2 当中的存储方式只有 Vuex，然后再来看看 Vue3：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231217115242443-383696024.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>多了一个 Pinia，好，知道了这些内容之后我就来开始写代码编写示例，带大家过一遍。</p>\n<ul>\n<li>使用 UniApp 创建的项目是内置了 Pinia，Vue2 项目暂不支持</li>\n</ul>\n<p>根据官方文档的介绍，首先我们需要搭建一个对应的目录结构：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">├── pages<br>├── static<br>└── stores<br>    └── counter.js<br>├── App.vue<br>├── main.js<br>├── manifest.json<br>├── pages.json<br>└── uni.scss<br></code></pre></td></tr></table></figure>\n<p>就是创建一个 stores 文件夹，在该文件夹下创建对应模块的 js 文件。</p>\n<ul>\n<li>创建一个默认模板项目，基于 Vue3</li>\n<li>创建好项目之后，首先更改 main.js，导入 pinia，注册 pinia，导出 pinia</li>\n</ul>\n<h1 id=\"pinia\">Pinia<a title=\"#pinia\" href=\"#pinia\"></a></h1>\n<h2 id=\"配置-pinia\">配置 Pinia<a title=\"#配置-pinia\" href=\"#配置-pinia\"></a></h2>\n<p>导入 Pinia：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Pinia</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;pinia&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<p>注册 Pinia：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">app.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-title class_\">Pinia</span>.<span class=\"hljs-title function_\">createPinia</span>());<br></code></pre></td></tr></table></figure>\n<p>导出 Pinia：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">return</span> &#123;<br>    app,<br>    <span class=\"hljs-comment\">// 此处必须将 Pinia 返回</span><br>    <span class=\"hljs-title class_\">Pinia</span>,<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"使用-pinia\">使用 Pinia<a title=\"#使用-pinia\" href=\"#使用-pinia\"></a></h2>\n<p>首先在 stores 文件夹下，创建 counter.js，内容如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> &#123;<br>\tdefineStore<br>&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;pinia&#x27;</span>;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> useCounterStore = <span class=\"hljs-title function_\">defineStore</span>(<span class=\"hljs-string\">&#x27;counter&#x27;</span>, &#123;<br>\t<span class=\"hljs-attr\">state</span>: <span class=\"hljs-function\">() =&gt;</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> &#123;<br>\t\t\t<span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span><br>\t\t&#125;;<br>\t&#125;,<br>\t<span class=\"hljs-comment\">// 也可以这样定义</span><br>\t<span class=\"hljs-comment\">// state: () =&gt; (&#123; count: 0 &#125;)</span><br>\t<span class=\"hljs-attr\">actions</span>: &#123;<br>\t\t<span class=\"hljs-title function_\">increment</span>(<span class=\"hljs-params\"></span>) &#123;<br>\t\t\t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">count</span>++;<br>\t\t&#125;,<br>\t\t<span class=\"hljs-title function_\">decrement</span>(<span class=\"hljs-params\"></span>) &#123;<br>\t\t\t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">count</span>--;<br>\t\t&#125;,<br>\t&#125;,<br>&#125;);<br></code></pre></td></tr></table></figure>\n<p>如上代码通过 defineStore 定义了一个名为 counter 的 store，然后通过 state 定义了一个 count 的状态，然后通过 actions 定义了两个方法，分别是 increment 和 decrement，分别用来增加和减少 count 的值。</p>\n<p>再接着在首页页面，添加两个按钮分别是增加与减少调用 store 中的方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>\t&lt;view&gt;<br>\t\t&#123;&#123; count &#125;&#125;<br>\t\t&lt;button type=&quot;primary&quot; @click=&quot;myIncrement&quot;&gt;增加&lt;/button&gt;<br>\t\t&lt;button type=&quot;primary&quot; @click=&quot;myDecrement&quot;&gt;减少&lt;/button&gt;<br>\t&lt;/view&gt;<br>&lt;/template&gt;<br><br>&lt;script setup&gt;<br>\timport &#123;<br>\t\tuseCounterStore<br>\t&#125; from &#x27;@/stores/counter.js&#x27;<br>\timport &#123;<br>\t\tstoreToRefs<br>\t&#125; from &#x27;pinia&#x27;<br><br>\tconst counterStore = useCounterStore()<br><br>\tconst &#123;<br>\t\tcount<br>\t&#125; = storeToRefs(counterStore)<br><br>\tfunction myIncrement() &#123;<br>\t\tcounterStore.increment()<br>\t&#125;<br><br>\tfunction myDecrement() &#123;<br>\t\tcounterStore.decrement()<br>\t&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<p>代码我写完了，先来看运行的效果，然后我在一一解释代码：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231217142124484-728637256.gif\" alt loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li>如上代码的含义首先在 script setup 中导入了 useCounterStore，然后通过 useCounterStore 创建了一个 counterStore</li>\n<li>然后通过 storeToRefs 将 counterStore 中的 count 转换成了 ref，然后在模板中通过  将 count 的值显示出来</li>\n<li>然后通过 @click 调用 myIncrement 和 myDecrement 方法，然后在 myIncrement 和 myDecrement 方法中调用了 counterStore 中的 increment 和 decrement 方法</li>\n<li>然后通过 counterStore.increment() 和 counterStore.decrement() 调用了 store 中的方法</li>\n</ul>\n<p>好，到这已经结束了，是不是很简单，我就不多说了，大家可以自己去尝试一下。</p>\n<p>这个存储的是全局的数据，大家还可以新建一个 one 页面，配置一下 tabBar 在 one 页面中从 store 中获取 count 的值, 显示一下即可，在首页操作之后 one 页面的 count 的值也会发生变化。</p>\n<h1 id=\"end\">End<a title=\"#end\" href=\"#end\"></a></h1>\n<ul>\n<li>如果你有任何问题或建议，欢迎在下方留言，我会尽快回复</li>\n<li>如果你觉得本文对你有帮助，欢迎点赞、收藏，你的支持是我写作的最大动力</li>\n</ul>\n<blockquote>\n<p><a href=\"https://cloud.tencent.com/developer/article/2366050?from_column=20421&amp;from=20421\" target=\"_blank\">我正在参与2023腾讯技术创作特训营第四期有奖征文，快来和我瓜分大奖！</a></p>\n</blockquote>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231129232539490-1458223711.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"uni-app-网络请求","link":"2023/12/17/Uniapp/18-uni-app-网络请求"},"next":{"title":"uni-app-数据缓存","link":"2023/12/16/Uniapp/16-uni-app-数据缓存"},"plink":"http://example.com/2023/12/17/Uniapp/17-uni-app-pinia存储数据/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"步入正题","title":"步入正题","index":"2"},{"id":"pinia","title":"Pinia","index":"3","children":[{"id":"配置-pinia","title":"配置 Pinia","index":"3.1"},{"id":"使用-pinia","title":"使用 Pinia","index":"3.2"}]},{"id":"end","title":"End","index":"4"}],"reading_time":"1068 words in 7 min"}