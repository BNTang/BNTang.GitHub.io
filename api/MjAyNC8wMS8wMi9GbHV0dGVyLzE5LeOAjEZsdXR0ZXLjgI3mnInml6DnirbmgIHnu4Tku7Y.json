{"title":"『Flutter』有无状态组件","date":"2024-01-02T15:19:43.000Z","date_formatted":{"ll":"Jan 2, 2024","L":"01/02/2024","MM-DD":"01-02"},"link":"2024/01/02/Flutter/19-「Flutter」有无状态组件","tags":["Flutter"],"updated":"2024-01-09T05:51:10.858Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240102232011926-1787243275.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"1.前言\">1.前言<a title=\"#1.前言\" href=\"#1.前言\"></a></h1>\n<p>说一下背景，就是我们在编写 Flutter 程序的时候，我们目前是将所有的代码都编写在一个文件中，现在代码量比较少所以看上去还好，但是当代码量比较大的时候，这样的代码就会显得非常的臃肿，不利于我们的维护。</p>\n<p>那么了解了这些背景内容之后，那么官方是如何解决这个问题的呢？</p>\n<h1 id=\"2.正文\">2.正文<a title=\"#2.正文\" href=\"#2.正文\"></a></h1>\n<p>首先我们来看看官方给我们的示例代码，先将多余的注释代码给删除，然后在来看，通过观察可以发现官方是编写了一个 MyApp 类，继承了 StatelessWidget（组件类）。</p>\n<p>在Flutter中，组件（Widgets）是构建用户界面的基本元素。组件分为两种类型：有状态组件（Stateful Widgets）和无状态组件（Stateless Widgets）。</p>\n<h2 id=\"2.1.无状态组件（stateless-widgets）\">2.1.无状态组件（Stateless Widgets）<a title=\"#2.1.无状态组件（stateless-widgets）\" href=\"#2.1.无状态组件（stateless-widgets）\"></a></h2>\n<ul>\n<li>无状态组件是不可变的，意味着它们的属性不能改变, 所有的值都是最终的。</li>\n<li>通常用于当你需要展示的UI不依赖于对象内部状态时。</li>\n</ul>\n<p><strong>示例代码：</strong></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class=\"hljs-keyword\">void</span> main() =&gt; runApp(MyApp());<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>&#123;<br>  <span class=\"hljs-meta\">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class=\"hljs-keyword\">return</span> MaterialApp(<br>      home: Scaffold(<br>        appBar: AppBar(<br>          title: Text(<span class=\"hljs-string\">&#x27;Stateless Widget&#x27;</span>),<br>        ),<br>        body: Center(<br>          child: Text(<span class=\"hljs-string\">&#x27;Hello, Flutter!&#x27;</span>),<br>        ),<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"2.2.有状态组件（stateful-widgets）\">2.2.有状态组件（Stateful Widgets）<a title=\"#2.2.有状态组件（stateful-widgets）\" href=\"#2.2.有状态组件（stateful-widgets）\"></a></h2>\n<ul>\n<li>有状态组件可以在其生命周期中改变状态。</li>\n<li>通常用于当UI可以在用户交互或其他因素影响下改变时。</li>\n</ul>\n<p><strong>示例代码：</strong></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class=\"hljs-keyword\">void</span> main() =&gt; runApp(MyApp());<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>&#123;<br>  <span class=\"hljs-meta\">@override</span><br>  _MyAppState createState() =&gt; _MyAppState();<br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_MyAppState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State</span>&lt;<span class=\"hljs-title\">MyApp</span>&gt; </span>&#123;<br>  <span class=\"hljs-built_in\">int</span> _counter = <span class=\"hljs-number\">0</span>;<br><br>  <span class=\"hljs-keyword\">void</span> _incrementCounter() &#123;<br>    setState(() &#123;<br>      _counter++;<br>    &#125;);<br>  &#125;<br><br>  <span class=\"hljs-meta\">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class=\"hljs-keyword\">return</span> MaterialApp(<br>      home: Scaffold(<br>        appBar: AppBar(<br>          title: Text(<span class=\"hljs-string\">&#x27;Stateful Widget&#x27;</span>),<br>        ),<br>        body: Center(<br>          child: Column(<br>            mainAxisAlignment: MainAxisAlignment.center,<br>            children: &lt;Widget&gt;[<br>              Text(<span class=\"hljs-string\">&#x27;You have pushed the button this many times:&#x27;</span>),<br>              Text(<br>                <span class=\"hljs-string\">&#x27;<span class=\"hljs-subst\">$_counter</span>&#x27;</span>,<br>                style: Theme.of(context).textTheme.headline4,<br>              ),<br>            ],<br>          ),<br>        ),<br>        floatingActionButton: FloatingActionButton(<br>          onPressed: _incrementCounter,<br>          tooltip: <span class=\"hljs-string\">&#x27;Increment&#x27;</span>,<br>          child: Icon(Icons.add),<br>        ),<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"3.无状态组件\">3.无状态组件<a title=\"#3.无状态组件\" href=\"#3.无状态组件\"></a></h1>\n<p>在我们之前的示例代码中，我们在 <code>runApp</code> 中是直接编写组件的，现在我们将组件单独抽离出来，然后在 <code>runApp</code> 中引用，通过继承 <code>StatelessWidget</code> 来实现无状态组件。</p>\n<p>如下图是之前的代码：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240103230601749-906832876.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>现在我们将组件抽离出来，开始改造：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class=\"hljs-keyword\">void</span> main() &#123;<br>  runApp(<span class=\"hljs-keyword\">const</span> MyApp());<br>&#125;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> MyApp(&#123;<span class=\"hljs-keyword\">super</span>.key&#125;);<br><br>  <span class=\"hljs-meta\">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class=\"hljs-keyword\">return</span> MaterialApp(<br>      <span class=\"hljs-comment\">// 应用程序的标题，显示在任务管理窗口中。</span><br>        title: <span class=\"hljs-string\">&quot;my App&quot;</span>,<br>        <span class=\"hljs-comment\">// 应用程序的主题，用于定义颜色，字体和阴影等。接受一个 ThemeData 对象</span><br>        theme: ThemeData(primarySwatch: Colors.blue),<br>        <span class=\"hljs-comment\">// 应用的首页</span><br>        home: Scaffold(<br>            appBar: AppBar(<br>              backgroundColor: Colors.blue,<br>              title: <span class=\"hljs-keyword\">const</span> Text(<span class=\"hljs-string\">&#x27;首页&#x27;</span>),<br>              centerTitle: <span class=\"hljs-keyword\">true</span>,<br>            ),<br>            body: <span class=\"hljs-keyword\">const</span> Center(<br>              child: Text(<br>                <span class=\"hljs-string\">&#x27;Hello Flutter&#x27;</span>,<br>                style: TextStyle(fontSize: <span class=\"hljs-number\">20.0</span>),<br>              ),<br>            )<br>        )<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240103231048372-400762354.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>如上代码，我们将组件抽离出来，然后在 <code>runApp</code> 中引用，通过继承 <code>StatelessWidget</code> 来实现无状态组件。</p>\n<p>通过我的观察 MaterialApp 中的 home 属性是一个 Scaffold 组件，所以我们将 Scaffold 组件也抽离出来，然后在 MaterialApp 中引用。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyHome</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> MyHome(&#123;<span class=\"hljs-keyword\">super</span>.key&#125;);<br><br>  <span class=\"hljs-meta\">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class=\"hljs-keyword\">return</span> Scaffold(<br>        appBar: AppBar(<br>          backgroundColor: Colors.blue,<br>          title: <span class=\"hljs-keyword\">const</span> Text(<span class=\"hljs-string\">&#x27;首页&#x27;</span>),<br>          centerTitle: <span class=\"hljs-keyword\">true</span>,<br>        ),<br>        body: <span class=\"hljs-keyword\">const</span> Center(<br>          child: Text(<br>            <span class=\"hljs-string\">&#x27;Hello Flutter MyHome&#x27;</span>,<br>            style: TextStyle(fontSize: <span class=\"hljs-number\">20.0</span>),<br>          ),<br>        )<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240103231303089-1404932875.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>body 中的内容是一个 Center 组件，所以我们将 Center 组件也抽离出来，然后在 Scaffold 中引用, 这里我就不浪费时间了因为本次还有一个有状态组件还要介绍无状态组件的使用就到这里了。</p>\n<p>在深入了解有状态组件之前，先尝试利用无状态组件管理状态，看看能否实现预期效果。在此之前，也要提醒大家注意无状态组件中的一个重要事项。然后再深入了解有状态组件。</p>\n<p>首先创建了一个名为 MyHomeTwo 的组件，其构建函数返回了一个 Center 组件。在 Center 组件的子组件中，使用了 Row 组件，并在 Row 的 children 属性中放置了一个 Checkbox。这样做是为了利用 Checkbox 的选中状态来测试是否能够修改状态。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class=\"hljs-keyword\">void</span> main() &#123;<br>  runApp(<span class=\"hljs-keyword\">const</span> MyApp());<br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> MyApp(&#123;<span class=\"hljs-keyword\">super</span>.key&#125;);<br><br>  <span class=\"hljs-meta\">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class=\"hljs-keyword\">return</span> MaterialApp(<br>        <span class=\"hljs-comment\">// 应用程序的标题，显示在任务管理窗口中。</span><br>        title: <span class=\"hljs-string\">&quot;my App&quot;</span>,<br>        <span class=\"hljs-comment\">// 应用程序的主题，用于定义颜色，字体和阴影等。接受一个 ThemeData 对象</span><br>        theme: ThemeData(primarySwatch: Colors.blue),<br>        <span class=\"hljs-comment\">// 应用的首页</span><br>        home: <span class=\"hljs-keyword\">const</span> MyHome());<br>  &#125;<br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyHome</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> MyHome(&#123;<span class=\"hljs-keyword\">super</span>.key&#125;);<br><br>  <span class=\"hljs-meta\">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class=\"hljs-keyword\">return</span> Scaffold(<br>        appBar: AppBar(<br>          backgroundColor: Colors.blue,<br>          title: <span class=\"hljs-keyword\">const</span> Text(<span class=\"hljs-string\">&#x27;首页&#x27;</span>),<br>          centerTitle: <span class=\"hljs-keyword\">true</span>,<br>        ),<br>        body: MyHomeTwo());<br>  &#125;<br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyHomeTwo</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> isCheck = <span class=\"hljs-keyword\">true</span>;<br><br>  <span class=\"hljs-meta\">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class=\"hljs-keyword\">return</span> Center(<br>      child: Row(<br>        children: [Checkbox(value: isCheck, onChanged: (val) &#123;<br>          <span class=\"hljs-built_in\">print</span>(val);<br>          <span class=\"hljs-keyword\">this</span>.isCheck = val <span class=\"hljs-keyword\">is</span> <span class=\"hljs-built_in\">bool</span>;<br>          <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-keyword\">this</span>.isCheck);<br>        &#125;)],<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240104000135456-1306277327.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>从效果图中可以看到我们的 isCheck 一直输出的是 true，我已经通过 <code>this.isCheck = val is bool;</code> 这个代码重新赋值了，但是还是没有改变，这是为什么呢？</p>\n<p>这里需要强调无状态组件中的一个关键注意事项, 在无状态组件中，组件被创建之后会将组件中的变量变成 final 的，所以无法管理状态。</p>\n<p>那么我们该如何解决这个问题呢？这里就需要用到有状态组件了。</p>\n<h1 id=\"4.有状态组件\">4.有状态组件<a title=\"#4.有状态组件\" href=\"#4.有状态组件\"></a></h1>\n<p>在我之前的介绍有状态的组件，是不是继承了 StatefulWidget 就是成为了有状态的组件了。</p>\n<p>好，那么我们就编写一个类，创建 MyStateful 类，继承 StatefulWidget:</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyStateful</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>&#123;<br>  <span class=\"hljs-meta\">@override</span><br>  State&lt;StatefulWidget&gt; createState() &#123;<br>    <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> implement createState</span><br>    <span class=\"hljs-keyword\">throw</span> UnimplementedError();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>发现要求实现 createState 方法，返回一个 State 对象，先不看返回什么，先来看，我们能不能像无状态组件那样定义一个变量就可以直接在组件中使用了就成为了一个有状态的组件了。</p>\n<p>我的答案是不行的：<code>在有状态组件中，组件被创建之后也会将组件中的变量变成 final 的</code>, 这里就需要用到 State 了。</p>\n<h2 id=\"4.1.state\">4.1.State<a title=\"#4.1.state\" href=\"#4.1.state\"></a></h2>\n<p>State 是一个抽象类，它定义了一个 State 的子类应该实现的接口。那么我就编写一个属于 MyStateful 的 State 类，继承 State，然后再将之前的 Checkbox 组件放到 MyStatefulState 中。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyStatefulState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State</span> </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> isCheck = <span class=\"hljs-keyword\">true</span>;<br><br>  <span class=\"hljs-meta\">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class=\"hljs-keyword\">return</span> Center(<br>      child: Row(<br>        children: [<br>          Checkbox(<br>              value: isCheck,<br>              onChanged: (val) &#123;<br>                <span class=\"hljs-built_in\">print</span>(val);<br>                <span class=\"hljs-keyword\">this</span>.isCheck = val <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">bool</span>;<br>                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-keyword\">this</span>.isCheck);<br>              &#125;)<br>        ],<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>在 MyStateful 类 createState 方法中返回 MyStatefulState 对象：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyStateful</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>&#123;<br>  <span class=\"hljs-meta\">@override</span><br>  State&lt;StatefulWidget&gt; createState() &#123;<br>    <span class=\"hljs-keyword\">return</span> MyStatefulState();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240104000006867-1162399351.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>从效果图中可以看到 isCheck 的值已经改变了，但是呢还有一个问题就是我们的数据改变了页面 UI 没有改变，这是为什么呢？</p>\n<p>这里就需要用到 setState 方法了。因为 Flutter 和 React 一样，都是通过数据驱动 UI 的，所以当我们的数据改变了，我们需要通过 setState 方法来通知 Flutter 重新构建 UI。</p>\n<h2 id=\"4.2.setstate\">4.2.setState<a title=\"#4.2.setstate\" href=\"#4.2.setstate\"></a></h2>\n<p>setState 方法是 State 类中的一个方法，它接收一个回调函数，这个回调函数会在 setState 方法调用之后立即执行，所以我们可以在这个回调函数中改变状态。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">this</span>.setState(() &#123;<br>  <span class=\"hljs-keyword\">this</span>.isCheck = val <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">bool</span>;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240104000411888-627125434.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"5.总结\">5.总结<a title=\"#5.总结\" href=\"#5.总结\"></a></h1>\n<h2 id=\"5.1.无状态组件\">5.1.无状态组件<a title=\"#5.1.无状态组件\" href=\"#5.1.无状态组件\"></a></h2>\n<ul>\n<li>无状态组件是不可变的，意味着它们的属性不能改变, 所有的值都是最终的。</li>\n<li>通常用于当你需要展示的UI不依赖于对象内部状态时。</li>\n<li>实现方式：继承 StatelessWidget，然后在 build 方法中返回一个 Widget。</li>\n<li>无状态组件中的变量在组件被创建之后会将组件中的变量变成 final 的。</li>\n</ul>\n<h2 id=\"5.2.有状态组件\">5.2.有状态组件<a title=\"#5.2.有状态组件\" href=\"#5.2.有状态组件\"></a></h2>\n<ul>\n<li>有状态组件可以在其生命周期中改变状态。</li>\n<li>通常用于当UI可以在用户交互或其他因素影响下改变时。</li>\n<li>在有状态组件中，组件被创建之后也会将组件中的变量变成 final 的。</li>\n<li>采用数据驱动 UI 的方式，当数据改变时，通过 setState 方法通知 Flutter 重新构建 UI。</li>\n<li>实现方式：继承 StatefulWidget，然后在 createState 方法中返回一个 State 对象。在 State 对象中定义变量，然后通过 setState 方法改变变量的值，最后在 build 方法中使用变量。（State 就相当于我们普通的一个类了）</li>\n</ul>\n<h1 id=\"end\">End<a title=\"#end\" href=\"#end\"></a></h1>\n<ul>\n<li>🐤如果您对本文有任何疑问或想法，请在评论区留言，我将很乐意与您交流。</li>\n<li>🐰您的每一条评论对我都至关重要，我会尽快给予回复。</li>\n<li>🎈如果您觉得这篇文章对您有所启发或帮助，请不吝赞赏、收藏或分享。</li>\n<li>🎁您的每一个动作都是对我创作的最大鼓励和支持。</li>\n<li>👍谢谢您的阅读和陪伴！</li>\n</ul>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231211215004818-977875224.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"『Flutter』警告修复","link":"2024/01/02/Flutter/20-「Flutter」警告修复"},"next":{"title":"『Flutter』常用组件 按钮、图片","link":"2024/01/01/Flutter/18-「Flutter」常用组件 按钮、图片"},"plink":"http://example.com/2024/01/02/Flutter/19-「Flutter」有无状态组件/","toc":[{"id":"1.前言","title":"1.前言","index":"1"},{"id":"2.正文","title":"2.正文","index":"2","children":[{"id":"2.1.无状态组件（stateless-widgets）","title":"2.1.无状态组件（Stateless Widgets）","index":"2.1"},{"id":"2.2.有状态组件（stateful-widgets）","title":"2.2.有状态组件（Stateful Widgets）","index":"2.2"}]},{"id":"3.无状态组件","title":"3.无状态组件","index":"3"},{"id":"4.有状态组件","title":"4.有状态组件","index":"4","children":[{"id":"4.1.state","title":"4.1.State","index":"4.1"},{"id":"4.2.setstate","title":"4.2.setState","index":"4.2"}]},{"id":"5.总结","title":"5.总结","index":"5","children":[{"id":"5.1.无状态组件","title":"5.1.无状态组件","index":"5.1"},{"id":"5.2.有状态组件","title":"5.2.有状态组件","index":"5.2"}]},{"id":"end","title":"End","index":"6"}]}