{"title":"TienChin 验证码响应结果分析&验证码生成接口分析","date":"2023-06-22T09:04:46.000Z","date_formatted":{"ll":"Jun 22, 2023","L":"06/22/2023","MM-DD":"06-22"},"link":"2023/06/22/项目/TienChin 健身系统/2023-6-11/04-TienChin 验证码响应结果分析&验证码生成接口分析","tags":["项目"],"updated":"2023-07-08T03:40:47.329Z","content":"<h1 id=\"验证码响应结果分析\">验证码响应结果分析<a title=\"#验证码响应结果分析\" href=\"#验证码响应结果分析\"></a></h1>\n<p>首先从前端开始进行分析，进入到登录页面，打开开发者工具(f12)，找到 network，f5 刷新一下页面，然后，筛选一下，筛选内容为 <code>Fetch/XHR</code>：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202306/2105804-20230622171020086-1254806885.png\" alt=\"image-20230622171018919\" loading=\"lazy\" class=\"φbp\"></p>\n<p>你会发现列表中有两项内容，我们只需要查看 <code>captchaImage</code> 即可，从名字就可以看出是验证码图片的意思，然后我们查看这个响应结果是什么，响应结果内容如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-attr\">&quot;msg&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;操作成功&quot;</span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-attr\">&quot;img&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;...&quot;</span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-attr\">&quot;code&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">200</span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-attr\">&quot;captchaEnabled&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-attr\">&quot;uuid&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;f17217c9743a445298ec85e317f29537&quot;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>captchaEnabled: 验证码是否需要开启，true 开启，false 不开启</li>\n<li>img：Base64 编码的图片(如果返回二进制会乱码不好理解，前端可以将 Base64 渲染成为图片)</li>\n<li>uuid：整个系统的 securityId(登录后端有个 session，返回给前端存储到 Cookie 当中，每次带着 Cookie 服务端就知道你已经登录过了，这是传统的方式与做法，ruoyi 使用的是 JWT，但是和传统的 Session 与 Cookie 差不多，换汤不换药)</li>\n</ul>\n<p>?&gt; Base64 字符串转图片: <a href=\"https://tool.jisuapi.com/base642pic.html\" target=\"_blank\">https://tool.jisuapi.com/base642pic.html</a></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202306/2105804-20230622171847679-1856792256.png\" alt=\"image-20230622171846529\" loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"验证码生成接口分析\">验证码生成接口分析<a title=\"#验证码生成接口分析\" href=\"#验证码生成接口分析\"></a></h1>\n<p>通过如上的介绍我们其实已经拿到了验证码接口的名称了，复制一下，去后端当中全局搜这个名字(ctrl + shift + f)，会出现如下结果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202306/2105804-20230622172335093-446470077.png\" alt=\"image-20230622172334102\" loading=\"lazy\" class=\"φbp\"></p>\n<p>到这里我其实介绍了一下，遇到了新项目如何去找接口的位置，这是我比较推荐的一种方式，其它方式就是自己去后端工程当中进行搜寻，这种如果项目比较小还好，太大了我还是推荐我第一种推荐的方式也是现在一直在用的方式进行接口定位。</p>\n<h2 id=\"captchacontroller\">CaptchaController<a title=\"#captchacontroller\" href=\"#captchacontroller\"></a></h2>\n<p>captchaImage 方法解刨，如下代码首先去确认了一下验证码是否需要开启：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">captchaEnabled</span> <span class=\"hljs-operator\">=</span> configService.selectCaptchaEnabled();<br></code></pre></td></tr></table></figure>\n<p>如果为 false 直接返回响应结果，则前端没有验证码需要进行填写。</p>\n<p>!&gt; 这个结果是可以去数据库更改，但是数据库更改了不会立马生效因为更改之前的配置结果保存在 Redis 有一份，所以还需要去删除掉 Redis 在重新加载才会生效</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202306/2105804-20230624010606190-827946354.png\" alt=\"image-20230624010604880\" loading=\"lazy\" class=\"φbp\"></p>\n<p>如果 <code>captchaEnabled</code> 为 true，继续往下走，生成验证码，验证码类型分为 <code>math</code>，<code>char</code>，根据不同的类型去生成，<code>captchaType</code> 从 <code>RuoYiConfig</code> 中获取，我们来看看 RuoYiConfig 是什么：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202306/2105804-20230624003007752-1087475173.png\" alt=\"image-20230624003006309\" loading=\"lazy\" class=\"φbp\"></p>\n<p>可以看到是从我们的外部配置文件动态装配进来的我们去看看这个文件内容的大致结构，其实就是从 application.yml 中获取，我们自定义了一个关键词为 <code>tienchin</code> 在下面配置了一个 <code>captchaType</code>：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202306/2105804-20230624003134158-730312732.png\" alt=\"image-20230624003133110\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"math\">math<a title=\"#math\" href=\"#math\"></a></h3>\n<p>数值计算的验证码也就是需要自己根据生成的验证码自己计算正确的结果，例如，7+7=?, 那么底层是如何解析这个正确的答案的呢，关键代码如下：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202306/2105804-20230624003444938-900840822.png\" alt=\"image-20230624003443857\" loading=\"lazy\" class=\"φbp\"></p>\n<p>8+1=?@9，根据 <code>@</code> 截取，前面部分的返回给前端，后面的正确答案会放入 Redis 进行存储，然后通过 Base64 转换返回给前端了。</p>\n<h3 id=\"char\">char<a title=\"#char\" href=\"#char\"></a></h3>\n<p>char 就是典型的验证码形式，就是将一串字符以一张图片的形式展示给用户进行填写，我们将正确的验证码结果，存储在 Redis，登录的时候拿着用户输入的与我们 Redis 存在的进行对比即可完成校验。</p>\n<p>最终 <code>captchaImage</code> 接口各个部分的代码解释如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 生成验证码</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@GetMapping(&quot;/captchaImage&quot;)</span><br><span class=\"hljs-keyword\">public</span> AjaxResult <span class=\"hljs-title function_\">getCode</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-comment\">// 创建一个 AjaxResult 这个是用于返回响应结果是实体类对象</span><br>    <span class=\"hljs-type\">AjaxResult</span> <span class=\"hljs-variable\">ajax</span> <span class=\"hljs-operator\">=</span> AjaxResult.success();<br><br>    <span class=\"hljs-comment\">// 查看验证码的配置是否开启了验证码</span><br>    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">captchaEnabled</span> <span class=\"hljs-operator\">=</span> configService.selectCaptchaEnabled();<br>    <span class=\"hljs-comment\">// 将标志写入到响应结果中</span><br>    ajax.put(<span class=\"hljs-string\">&quot;captchaEnabled&quot;</span>, captchaEnabled);<br><br>    <span class=\"hljs-comment\">// 如果没有开启则直接返回告诉前端</span><br>    <span class=\"hljs-keyword\">if</span> (!captchaEnabled) &#123;<br>        <span class=\"hljs-keyword\">return</span> ajax;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 得到一个UUID</span><br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">uuid</span> <span class=\"hljs-operator\">=</span> IdUtils.simpleUUID();<br><br>    <span class=\"hljs-comment\">// 生成验证码的Redis保存Key</span><br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">verifyKey</span> <span class=\"hljs-operator\">=</span> CacheConstants.CAPTCHA_CODE_KEY + uuid;<br><br>    <span class=\"hljs-comment\">// 定义变量</span><br>    String capStr, code = <span class=\"hljs-literal\">null</span>;<br><br>    <span class=\"hljs-comment\">// 定义一个缓冲的图片流用于将验证码写给前端使用转换为流的形式</span><br>    <span class=\"hljs-type\">BufferedImage</span> <span class=\"hljs-variable\">image</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br><br>    <span class=\"hljs-comment\">// 生成验证码</span><br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">captchaType</span> <span class=\"hljs-operator\">=</span> RuoYiConfig.getCaptchaType();<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;math&quot;</span>.equals(captchaType)) &#123;<br>        <span class=\"hljs-comment\">// 逻辑略过(因为太简单)</span><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">capText</span> <span class=\"hljs-operator\">=</span> captchaProducerMath.createText();<br>        capStr = capText.substring(<span class=\"hljs-number\">0</span>, capText.lastIndexOf(<span class=\"hljs-string\">&quot;@&quot;</span>));<br>        code = capText.substring(capText.lastIndexOf(<span class=\"hljs-string\">&quot;@&quot;</span>) + <span class=\"hljs-number\">1</span>);<br>        image = captchaProducerMath.createImage(capStr);<br>    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;char&quot;</span>.equals(captchaType)) &#123;<br>        <span class=\"hljs-comment\">// 逻辑略过(因为太简单)</span><br>        capStr = code = captchaProducer.createText();<br>        image = captchaProducer.createImage(capStr);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 写入Redis</span><br>    redisCache.setCacheObject(verifyKey, code, Constants.CAPTCHA_EXPIRATION, TimeUnit.MINUTES);<br>    <span class=\"hljs-comment\">// 转换流信息写出，创建了一个输出流</span><br>    <span class=\"hljs-type\">FastByteArrayOutputStream</span> <span class=\"hljs-variable\">os</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FastByteArrayOutputStream</span>();<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// 逻辑略过(因为太简单)</span><br>        <span class=\"hljs-keyword\">assert</span> image != <span class=\"hljs-literal\">null</span>;<br>        ImageIO.write(image, <span class=\"hljs-string\">&quot;jpg&quot;</span>, os);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>        <span class=\"hljs-comment\">// 逻辑略过(因为太简单)</span><br>        <span class=\"hljs-keyword\">return</span> AjaxResult.error(e.getMessage());<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 逻辑略过(因为太简单)</span><br>    ajax.put(<span class=\"hljs-string\">&quot;uuid&quot;</span>, uuid);<br>    ajax.put(<span class=\"hljs-string\">&quot;img&quot;</span>, Base64.encode(os.toByteArray()));<br>    <span class=\"hljs-keyword\">return</span> ajax;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>?&gt; 觉得逻辑清晰写的不错，还请麻烦给个关注与点赞支持一下博主，这将成为博主更新的动力。</p>\n","prev":{"title":"虚拟IP绑定公网IP访问","link":"2023/07/09/DevOps与云原生/Keepalive+Haproxy 高可用搭建/07-虚拟IP绑定公网IP访问"},"next":{"title":"TienChin 验证码响应结果分析&验证码生成接口分析","link":"2023/06/22/项目/TienChin 健身系统/2023-6-11/05-TienChin 验证码的校验"},"plink":"http://example.com/2023/06/22/项目/TienChin 健身系统/2023-6-11/04-TienChin 验证码响应结果分析&验证码生成接口分析/","toc":[{"id":"验证码响应结果分析","title":"验证码响应结果分析","index":"1"},{"id":"验证码生成接口分析","title":"验证码生成接口分析","index":"2","children":[{"id":"captchacontroller","title":"CaptchaController","index":"2.1","children":[{"id":"math","title":"math","index":"2.1.1"},{"id":"char","title":"char","index":"2.1.2"}]}]}],"reading_time":"1379 words in 9 min"}