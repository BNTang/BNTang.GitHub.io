{"title":"Dart-类(下)","date":"2023-12-26T16:53:23.000Z","date_formatted":{"ll":"Dec 27, 2023","L":"12/27/2023","MM-DD":"12-27"},"link":"2023/12/27/Flutter/11-Dart-类(下)","tags":["Dart"],"updated":"2024-01-09T05:51:10.857Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231227005504601-129264266.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h1>\n<ul>\n<li>经过上一篇的介绍，我们已经了解了类的基本使用，本篇将继续介绍类的一些特性</li>\n<li>本篇将介绍类的继承、多态、接口、混入等内容</li>\n</ul>\n<h1 id=\"继承与多态\">继承与多态<a title=\"#继承与多态\" href=\"#继承与多态\"></a></h1>\n<ul>\n<li>Dart 中的继承和多态是面向对象编程的核心概念，它们允许你创建基于现有类的新类，并在子类中重写或扩展父类的行为</li>\n<li>这些概念在其他面向对象的语言中也存在，例如 JavaScript</li>\n</ul>\n<h2 id=\"dart-中的继承\">Dart 中的继承<a title=\"#dart-中的继承\" href=\"#dart-中的继承\"></a></h2>\n<ul>\n<li>在 Dart 中，继承是通过 <code>extends</code> 关键字实现的</li>\n<li>子类会继承父类的 <code>属性</code> 和 <code>方法</code></li>\n<li>可以使用 <code>@override</code> 注解来重写父类的方法</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span> </span>&#123;<br>  <span class=\"hljs-keyword\">void</span> speak() &#123;<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The animal makes a sound&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dog</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Animal</span> </span>&#123;<br>  <span class=\"hljs-meta\">@override</span><br>  <span class=\"hljs-keyword\">void</span> speak() &#123;<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Bark!&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">void</span> main() &#123;<br>  <span class=\"hljs-keyword\">var</span> dog = Dog();<br>  dog.speak(); <span class=\"hljs-comment\">// 输出: Bark!</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231227011649585-1228531246.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"dart-中的多态\">Dart 中的多态<a title=\"#dart-中的多态\" href=\"#dart-中的多态\"></a></h2>\n<ul>\n<li>多态是面向对象编程中的一个概念，它允许你使用父类类型的引用来指向子类的对象</li>\n<li>意味着你可以用父类的形式来调用实现了该父类的任何子类的方法</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\">Animal myAnimal = Dog();<br>myAnimal.speak(); <span class=\"hljs-comment\">// 输出: Bark!</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"javascript-中的继承和多态\">JavaScript 中的继承和多态<a title=\"#javascript-中的继承和多态\" href=\"#javascript-中的继承和多态\"></a></h2>\n<ul>\n<li>JavaScript 也支持继承和多态，尽管其实现方式与 Dart 有所不同</li>\n<li>在 ES6 之前，JavaScript 通过 <code>原型链</code> 实现继承</li>\n<li>ES6 引入了基于类的语法，使得继承更易于理解和实现</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span> &#123;<br>  <span class=\"hljs-title function_\">speak</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;The animal makes a sound&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Animal</span> &#123;<br>  <span class=\"hljs-title function_\">speak</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Bark!&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> dog = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dog</span>();<br>dog.<span class=\"hljs-title function_\">speak</span>(); <span class=\"hljs-comment\">// 输出: Bark!</span><br><br><span class=\"hljs-comment\">// 多态的体现</span><br><span class=\"hljs-keyword\">const</span> myAnimal = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dog</span>();<br>myAnimal.<span class=\"hljs-title function_\">speak</span>(); <span class=\"hljs-comment\">// 输出: Bark!</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"主要差异\">主要差异<a title=\"#主要差异\" href=\"#主要差异\"></a></h2>\n<p><strong>继承语法</strong>：</p>\n<ul>\n<li>Dart 和 JavaScript (ES6 及以后) 都使用 <code>extends</code> 关键字来实现继承</li>\n<li>在 Dart 中，你可以使用 <code>@override</code> 注解来明确表示方法重写</li>\n</ul>\n<p><strong>多态实现</strong>：</p>\n<ul>\n<li>在 Dart 中，多态是一种自然且明确的概念，因为 Dart 是一种强类型语言</li>\n<li>JavaScript 作为一种弱类型语言，也支持多态，但其实更多依赖于动态类型和原型继承</li>\n</ul>\n<p><strong>类型系统</strong>：</p>\n<ul>\n<li>Dart 是强类型语言，要求类型显式声明</li>\n<li>JavaScript 是弱类型语言，类型是动态的</li>\n</ul>\n<blockquote>\n<p>继承和多态使得代码更具可重用性和灵活性，同时也支持更好的封装和抽象。</p>\n</blockquote>\n<h1 id=\"接口和混入\">接口和混入<a title=\"#接口和混入\" href=\"#接口和混入\"></a></h1>\n<p>如上是 Dart 和 JavaScript 中继承和多态的主要差异，接下来将介绍 Dart 中的接口和混入，在 Dart 中，接口（Interface）和混入（Mixin）是两个重要的概念，它们在提供代码的可重用性和灵活性方面起着关键作用。</p>\n<p>这两个概念在 Dart 中的实现方式与其他语言有所不同。</p>\n<h2 id=\"dart-接口\">Dart 接口<a title=\"#dart-接口\" href=\"#dart-接口\"></a></h2>\n<ul>\n<li>在 Dart 中，任何类都可以作为接口使用</li>\n<li>不需要显式地定义接口，而是可以直接使用类作为接口</li>\n<li>当一个类实现另一个类（作为接口）时，它必须重写所有的方法</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Car</span> </span>&#123;<br>  <span class=\"hljs-keyword\">void</span> drive() &#123;<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Car is driving&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ElectricCar</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Car</span> </span>&#123;<br>  <span class=\"hljs-meta\">@override</span><br>  <span class=\"hljs-keyword\">void</span> drive() &#123;<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Electric Car is driving silently&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">void</span> main() &#123;<br>  <span class=\"hljs-keyword\">var</span> myCar = ElectricCar();<br>  myCar.drive(); <span class=\"hljs-comment\">// 输出: Electric Car is driving silently</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231227233559278-2060090001.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"dart-混入\">Dart 混入<a title=\"#dart-混入\" href=\"#dart-混入\"></a></h2>\n<ul>\n<li>混入（Mixin）是 Dart 中一个非常强大的特性，允许你在多个类层次结构中重用代码</li>\n<li>使用 mixin 关键字可以创建一个混入，它可以被其他类所使用，而不需要成为这些类的父类</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">mixin</span> Electric &#123;<br>  <span class=\"hljs-keyword\">void</span> recharge() &#123;<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Recharging the electric vehicle&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Car</span> </span>&#123;<br>  <span class=\"hljs-keyword\">void</span> drive() &#123;<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Car is driving&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ElectricCar</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Car</span> <span class=\"hljs-title\">with</span> <span class=\"hljs-title\">Electric</span> </span>&#123;<br>  <span class=\"hljs-meta\">@override</span><br>  <span class=\"hljs-keyword\">void</span> drive() &#123;<br>    <span class=\"hljs-keyword\">super</span>.drive();<br>    recharge();<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">void</span> main() &#123;<br>  <span class=\"hljs-keyword\">var</span> myECar = ElectricCar();<br>  myECar.drive(); <span class=\"hljs-comment\">// 输出: Car is driving</span><br>                  <span class=\"hljs-comment\">//       Recharging the electric vehicle</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231227233747050-622369712.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"主要区别和特点\">主要区别和特点<a title=\"#主要区别和特点\" href=\"#主要区别和特点\"></a></h2>\n<p><strong>接口实现</strong>：</p>\n<ul>\n<li>Dart 中的接口是通过实现一个类来定义的</li>\n<li>任何类都可以作为接口</li>\n<li>实现一个接口意味着你需要重写接口中的所有方法</li>\n</ul>\n<p><strong>混入使用</strong>：</p>\n<ul>\n<li>混入允许你在不同的类中重用代码，而不需要继承这些类</li>\n<li>使用 <code>with</code> 关键字可以将一个或多个混入应用到一个类上</li>\n</ul>\n<p><strong>灵活性和重用性</strong>：</p>\n<ul>\n<li>混入增加了代码的灵活性和重用性，尤其是在创建具有共同行为但不共享公共父类的类时非常有用</li>\n<li>接口强制实现特定的方法集，提供了一种确保类遵守特定协议的方式</li>\n</ul>\n<blockquote>\n<p>这些概念使 Dart 在处理多重继承和代码重用时非常灵活和强大</p>\n</blockquote>\n<h1 id=\"end\">End<a title=\"#end\" href=\"#end\"></a></h1>\n<ul>\n<li>如果你有任何问题或建议，欢迎在下方留言，我会尽快回复</li>\n<li>如果你觉得本文对你有帮助，欢迎点赞、收藏，你的支持是我写作的最大动力</li>\n</ul>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231211215004818-977875224.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"「Dart」库","link":"2023/12/27/Flutter/12-「Dart」库"},"next":{"title":"Dart-类(上)","link":"2023/12/26/Flutter/10-Dart-类(上)"},"plink":"http://example.com/2023/12/27/Flutter/11-Dart-类(下)/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"继承与多态","title":"继承与多态","index":"2","children":[{"id":"dart-中的继承","title":"Dart 中的继承","index":"2.1"},{"id":"dart-中的多态","title":"Dart 中的多态","index":"2.2"},{"id":"javascript-中的继承和多态","title":"JavaScript 中的继承和多态","index":"2.3"},{"id":"主要差异","title":"主要差异","index":"2.4"}]},{"id":"接口和混入","title":"接口和混入","index":"3","children":[{"id":"dart-接口","title":"Dart 接口","index":"3.1"},{"id":"dart-混入","title":"Dart 混入","index":"3.2"},{"id":"主要区别和特点","title":"主要区别和特点","index":"3.3"}]},{"id":"end","title":"End","index":"4"}]}