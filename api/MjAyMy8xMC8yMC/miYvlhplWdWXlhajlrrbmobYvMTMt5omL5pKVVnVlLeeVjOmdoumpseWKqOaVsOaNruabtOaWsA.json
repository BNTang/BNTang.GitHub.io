{"title":"手撕Vue-界面驱动数据更新","date":"2023-10-20T15:51:07.000Z","date_formatted":{"ll":"Oct 20, 2023","L":"10/20/2023","MM-DD":"10-20"},"link":"2023/10/20/手写Vue全家桶/13-手撕Vue-界面驱动数据更新","tags":["手写Vue全家桶"],"updated":"2023-10-20T16:20:56.404Z","content":"<p>经过上一篇文章，已经将数据驱动界面改变的过程实现了，本章节将实现界面驱动数据更新的过程。</p>\n<p>界面驱动数据更新的过程，主要是通过 <code>v-model</code> 指令实现的, 只有 <code>v-model</code> 指令才能实现界面驱动数据更新的过程。</p>\n<p>好了，那么说了是通过 v-model 那么直接处理下 CompilerUtil 中的 model 方法就好了。</p>\n<p>只需要在 model 方法在加几行代码即可实现界面驱动数据更新的过程（双向绑定的功能）。</p>\n<p>首先说一下思路，监听文本框的输入事件，当文本框的值发生改变时，通过事件对象 e 获取到文本框最新输入的值，将最新的值设置到模型当中这样是不是就可以了。</p>\n<p>但是在设置到模型当中有一个注意点：</p>\n<p>!&gt; 在 model 方法中，在参数列表中将属性的名称以参数的形式已经传递过来了，但是这个属性的名称有可能是 name, 也有可能是 <a href=\"http://person.name\">person.name</a>, 也有可能是一个多级的，这个时候就需要一级一级取，取到最后一级，给最后一级设置值就可以了。</p>\n<p>所以我这里就专门在编写一个方法用来设置值，叫做 setValue, 我将 vm, attr, 以及最新的值 value 也穿递过去，然后在 setValue 方法中，先将 attr 以 <code>.</code> 分割成数组，然后通过循环遍历数组，将 vm 的值一级一级取出来，直到取到最后一级，给最后一级设置值就可以了。</p>\n<p>好了废话不多说，直接上代码, CompilerUtil 中 setValue：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title function_\">setValue</span>(<span class=\"hljs-params\">vm, attr, newValue</span>) &#123;<br>    attr.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;.&#x27;</span>).<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data, currentAttr, index, arr</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (index === arr.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>) &#123;<br>            data[currentAttr] = newValue;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> data[currentAttr];<br>    &#125;, vm.<span class=\"hljs-property\">$data</span>)<br>&#125;,<br></code></pre></td></tr></table></figure>\n<p>然后在 model 方法中, 监听文本框的输入事件在调用 setValue 方法，将 vm, attr, 以及最新的值 value 也穿递过去，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 监听文本框的输入事件</span><br>node.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;input&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">let</span> newValue = e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setValue</span>(vm, value, newValue);<br>&#125;);<br></code></pre></td></tr></table></figure>\n<p>打开浏览器，输入框输入内容，发现数据已经更新了（不录制 gif 了）好了，这样就实现了界面驱动数据更新的过程。</p>\n","prev":{"title":"手撕Vue-实现事件相关指令","link":"2023/10/21/手写Vue全家桶/14-手撕Vue-实现事件相关指令"},"next":{"title":"手撕Vue-数据驱动界面改变下","link":"2023/10/19/手写Vue全家桶/12-手撕Vue-数据驱动界面改变下"},"plink":"http://example.com/2023/10/20/手写Vue全家桶/13-手撕Vue-界面驱动数据更新/","reading_time":"581 words in 4 min"}