{"title":"手撕Vue-Router-实现router-view","date":"2023-11-29T16:08:34.000Z","date_formatted":{"ll":"Nov 30, 2023","L":"11/30/2023","MM-DD":"11-30"},"link":"2023/11/30/手写VueRouter/06-手撕Vue-Router-实现router-view","tags":["手写VueRouter"],"updated":"2023-11-29T17:05:50.219Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231130000922811-372108009.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h1>\n<p>在上一篇 <code>[手撕Vue-Router-实现router-link]</code> 中，我们实现了 <code>router-link</code> 组件，这一篇我们来实现 <code>router-view</code> 组件。</p>\n<h1 id=\"实现思路\">实现思路<a title=\"#实现思路\" href=\"#实现思路\"></a></h1>\n<p>router-view 其实与 router-link 是同一个世界，同一个梦想的，那么我就废话不多说了，直接上代码。</p>\n<h1 id=\"实现代码\">实现代码<a title=\"#实现代码\" href=\"#实现代码\"></a></h1>\n<p>回到我们的 NueRouter.install 方法中，直接编写 Vue.component(‘router-view’, {})，这里我们直接使用了 Vue.component 方法，这个方法是 Vue 内部提供的，用于注册全局组件的方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">component</span>(<span class=\"hljs-string\">&#x27;router-view&#x27;</span>, &#123;&#125;);<br></code></pre></td></tr></table></figure>\n<p>注册好了全局组件之后我们就可以使用这个组件了，我们在 App.vue 中使用这个组件。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231130001947830-1152486525.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>接下来我们要做的事情就是根据 router-link 中的 to 属性，来获取对应的组件，然后渲染到 router-view 中。</p>\n<p>那么怎么渲染呢？我们可以使用 render 函数来渲染，render 函数是 Vue 内部提供的，用于渲染组件的函数。render 函数接收一个 h 函数作为参数，h 函数用于渲染组件。</p>\n<p>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">component</span>(<span class=\"hljs-string\">&#x27;router-view&#x27;</span>, &#123;<br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\">h</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">h</span>();<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<p>那么我们就可以在 h 函数中，根据路由地址来获取对应的组件，然后渲染到 router-view 中。</p>\n<p>那么问题就来了我们拿到对应的组件呢？首先我们需要获取到路由信息，然后在拿到当前的路由地址，然后拿到当前的路由地址，去我提取的路由信息中，找到对应的组件。</p>\n<p>好了，我们知道了我们要做什么，那么我们就开始做吧。</p>\n<p>首先我们需要获取到路由信息，我们可以通过 <code>const routesMap = this._self.$router.routesMap;</code> 来获取到路由信息。</p>\n<p>然后我们需要获取到当前的路由地址，我们可以通过 <code>const currentPath = this._self.$route.currentPath</code> 来获取到当前的路由地址。</p>\n<p>然后我们就可以通过 <code>routesMap[currentPath]</code> 来获取到对应的组件了。</p>\n<p>那么我们就可以在 h 函数中，根据路由地址来获取对应的组件，然后渲染到 router-view 中。</p>\n<p>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">component</span>(<span class=\"hljs-string\">&#x27;router-view&#x27;</span>, &#123;<br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\">h</span>) &#123;<br>        <span class=\"hljs-keyword\">const</span> routesMap = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_self</span>.<span class=\"hljs-property\">$router</span>.<span class=\"hljs-property\">routesMap</span>;<br>        <span class=\"hljs-keyword\">const</span> currentPath = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_self</span>.<span class=\"hljs-property\">$route</span>.<span class=\"hljs-property\">currentPath</span>;<br>        <span class=\"hljs-keyword\">const</span> currentComponent = routesMap[currentPath];<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">h</span>(currentComponent);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<p>好了，我们的 router-view 组件就实现了，我们来看一下效果。浏览器自行测试。</p>\n<p>我在测试过程中，我点击了 <code>首页</code> 和 <code>关于</code> 两个按钮，发现并没有渲染出对应的组件，这是为什么呢？并不是我们的代码有问题，而是在渲染网页的时候，首先它会先渲染组件，然后再执行 load 事件，所以就导致了我们在渲染组件的时候，我们还没有保存 currentPath，因为 currentPath 是在 load 事件中保存的，所以我们在渲染组件的时候，是获取不到 currentPath 的，怎么验证这个问题呢？我们可以在 load 打印一个内容，然后在 render 中，也打印一下 内容，并且将 currentPath 也打印出来，我们就可以看到这个问题了。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231130004728391-224177437.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>打开浏览器，点击首页按钮，控制台打印如下：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231130004845721-613434153.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>可以看到，我们在渲染组件的时候，currentPath 是 null，这就是我们的问题所在。</p>\n<h1 id=\"解决方案\">解决方案<a title=\"#解决方案\" href=\"#解决方案\"></a></h1>\n<p>那么我们怎么解决这个问题呢？其实很简单，我们只需要监听 currentPath 的变化，然后在 currentPath 变化的时候，重新渲染组件就可以了。</p>\n<p>那么怎么让 currentPath 变化之后，重新渲染组件呢？默认情况下 Vue 是双向数据绑定的，默认情况下只要数据发生变化，就会重新渲染组件。</p>\n<p>但是有一个前提条件，就是数据必须是响应式的(也就是说 currentPath 是一个双向绑定的数据)，那么怎么让 currentPath 变成一个响应式的数据呢？其实可以在我们往 Vue 实例中添加 <code>$router</code> or <code>$route</code> 的时候，将 currentPath 变成一个响应式的数据。</p>\n<p>那么怎么将 currentPath 变成一个响应式的数据呢？我们可以使用 Vue 内部提供的 <code>Vue.util.defineReactive</code> 方法，这个方法可以将一个普通的数据变成一个响应式的数据。</p>\n<p>那么我们就可以在我们往 Vue 实例中添加 <code>$router</code> or <code>$route</code> 的时候，将 currentPath 变成一个响应式的数据。</p>\n<p>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-property\">util</span>.<span class=\"hljs-title function_\">defineReactive</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-string\">&#x27;xxx&#x27;</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$router</span>);<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231130010025743-195212477.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>好了，我们的 currentPath 变成了一个响应式的数据，那么我们就可以在 currentPath 变化的时候，重新渲染组件了。</p>\n<p>我们的 router-view 组件就实现了。浏览器自行测试。</p>\n<h1 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h1>\n<p>主要就是使用 Vue.component 方法来注册全局组件，然后使用 render 函数来渲染组件，然后在 h 函数中，根据路由地址来获取对应的组件，然后渲染到 router-view 中。</p>\n<p>还有就是在渲染组件的时候，currentPath 是 null，因为而是在渲染网页的时候，首先它会先渲染组件，然后再执行 load 事件，所以就导致了我们在渲染组件的时根据 currentPath 获取不到对应的组件。</p>\n<p>解决方案就是将 currentPath 变成一个响应式的数据，默认情况下 Vue 是双向数据绑定的，默认情况下只要数据发生变化，就会重新渲染组件, 这样一来就达到了我们的目的。</p>\n<h1 id=\"最后\">最后<a title=\"#最后\" href=\"#最后\"></a></h1>\n<p>大家好我是 BNTang, 一个热爱分享的技术的开发者，如果大家觉得我的文章对你有帮助的话，可以关注我的公众号 <code>JavaBoyL</code>，我会在公众号中分享一些IT技术和一些个人的见解，谢谢大家的支持。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231129232539490-1458223711.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"uni-app概述","link":"2023/12/01/Uniapp/01-uni-app概述"},"next":{"title":"手撕Vue-Router-实现router-link","link":"2023/11/29/手写VueRouter/05-手撕Vue-Router-实现router-link"},"plink":"http://example.com/2023/11/30/手写VueRouter/06-手撕Vue-Router-实现router-view/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"实现思路","title":"实现思路","index":"2"},{"id":"实现代码","title":"实现代码","index":"3"},{"id":"解决方案","title":"解决方案","index":"4"},{"id":"总结","title":"总结","index":"5"},{"id":"最后","title":"最后","index":"6"}],"reading_time":"1523 words in 10 min"}