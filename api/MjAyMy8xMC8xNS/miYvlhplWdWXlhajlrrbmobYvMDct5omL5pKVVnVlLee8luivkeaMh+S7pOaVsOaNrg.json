{"title":"手撕Vue-编译指令数据","date":"2023-10-15T03:11:48.000Z","date_formatted":{"ll":"Oct 15, 2023","L":"10/15/2023","MM-DD":"10-15"},"link":"2023/10/15/手写Vue全家桶/07-手撕Vue-编译指令数据","tags":["手写Vue全家桶"],"updated":"2023-10-15T09:33:08.561Z","content":"<p>经过上一篇的分析，完成了查找指令和模板的功能，接下来就是编译指令的数据了。</p>\n<p>所以本章节主要处理的方法则是 buildElement 方法，我们先分析一下我们所拿到的数据在进行编码，这样会更加清晰一些。</p>\n<p>我将 name, value 打印出来，分别对应的值是 name: v-model, value: name，在今后我们的命令中可不止只有 v-model，还有 v-text、v-html、v-on 等等，所以我们需要对这些指令进行分类，然后再进行编译。</p>\n<p>所以我这里特意定义了一个工具类叫 CompilerUtil，用来处理指令的分类，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-title class_\">CompilerUtil</span> = &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 处理 v-model 指令</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> node 当前元素</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> value 指令的值</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> vm Nue 的实例对象</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-attr\">model</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node, value, vm</span>) &#123;<br>    &#125;,<br>    <span class=\"hljs-attr\">html</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node, value, vm</span>) &#123;<br>    &#125;,<br>    <span class=\"hljs-attr\">text</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node, value, vm</span>) &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后我们在 buildElement 方法中调用这个方法，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 解构 name</span><br><span class=\"hljs-keyword\">let</span> [, directive] = name.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;-&#x27;</span>);<br><span class=\"hljs-comment\">// v-model -&gt; [v, model]</span><br><br><span class=\"hljs-comment\">// 2.根据指令名称, 调用不同的处理函数</span><br><span class=\"hljs-title class_\">CompilerUtil</span>[directive](node, value, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vm</span>);<br></code></pre></td></tr></table></figure>\n<p>这样我们就可以根据指令的名称，调用不同的处理函数了。</p>\n<p>接下来我们就来处理 v-model 指令，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 处理 model 指令</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> node 当前元素</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> value 指令的值</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> vm Nue 的实例对象</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-attr\">model</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node, value, vm</span>) &#123;<br>    node.<span class=\"hljs-property\">value</span> = vm.<span class=\"hljs-property\">$data</span>[value];<br>&#125;,<br></code></pre></td></tr></table></figure>\n<p>这样我们就可以将数据渲染到页面上了，打开浏览器，可以看到效果如下：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231015171035638-497397950.png\" alt=\"image-20231015171034901\" loading=\"lazy\" class=\"φbp\"></p>\n<p>v-model 指令已经可以正常使用了，但是还有问题，就是我们的数据结构目前是比较简单的，那么如果我们的数据是一个对象呢，例如：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231015172334487-389220343.png\" alt=\"image-20231015172334067\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-attr\">time</span>: &#123;<br>    <span class=\"hljs-attr\">h</span>: <span class=\"hljs-number\">10</span>,<br>    <span class=\"hljs-attr\">m</span>: <span class=\"hljs-number\">10</span>,<br>    <span class=\"hljs-attr\">s</span>: <span class=\"hljs-number\">10</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>在用 input 绑定 v-model 进行渲染发现，只有第一个 input 能够正常渲染，其他的 input 都是 undefined，这是为什么呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&lt;input type=<span class=\"hljs-string\">&quot;text&quot;</span> v-model=<span class=\"hljs-string\">&quot;time.h&quot;</span>&gt;<br>&lt;input type=&quot;text&quot; v-model=&quot;time.m&quot;&gt;<br>&lt;input type=&quot;text&quot; v-model=&quot;time.s&quot;&gt;<br></code></pre></td></tr></table></figure>\n<p>那么这里就要去看一下我们 model 方法的实现了，如果是 time.h，value 等于的值为 time.h, 然后我们在执行 <code>vm.$data[value]</code> 就变为了 <code>vm.$data[time.h]</code>, 正常的获取这种数据结构的方式应该是先 <code>vm.$data[time]</code> 拿到 time 对象，然后再 <code>time[h]</code> 拿到 h 的值，所以我们需要对这种数据结构进行处理，为了已维护，我这里单独抽离了一个方法出来进行处理获取 value，方法名字叫做 getValue，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title function_\">getValue</span>(<span class=\"hljs-params\">vm, value</span>) &#123;<br>    <span class=\"hljs-comment\">// time.h --&gt; [time, h]</span><br>    <span class=\"hljs-keyword\">return</span> value.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;.&#x27;</span>).<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data, currentKey</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-comment\">// 第一次执行: data=$data, currentKey=time</span><br>        <span class=\"hljs-comment\">// 第二次执行: data=time, currentKey=h</span><br>        <span class=\"hljs-keyword\">return</span> data[currentKey];<br>    &#125;, vm.<span class=\"hljs-property\">$data</span>);<br>&#125;,<br></code></pre></td></tr></table></figure>\n<p><code>reduce</code> 方法被用于迭代这个字符串数组。它接受一个回调函数，这个回调函数在每次迭代中被调用。在这个回调函数中，data 是上一次迭代的结果，而 currentKey 是当前迭代的数组元素（键路径中的一个部分）在每次迭代中，回调函数通过 <code>data[currentKey]</code> 的方式访问嵌套对象的属性，然后将这个属性的值作为下一次迭代的 data, 最终，reduce 方法将遍历整个键路径，直到达到最深层的属性，然后返回该属性的值。这样我们就可以正常的获取到数据了，最后在改造一下之前 model 方法获取值的地方，调用下刚刚编写的 getValue 方法即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-attr\">model</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node, value, vm</span>) &#123;<br>    node.<span class=\"hljs-property\">value</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getValue</span>(vm, value);<br>&#125;,<br></code></pre></td></tr></table></figure>\n<p>再次打开浏览器，可以看到效果如下：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231015172812373-532513916.png\" alt=\"image-20231015172812038\" loading=\"lazy\" class=\"φbp\"></p>\n<p>这个搞定之后，我们紧接着把 v-html 和 v-text 也搞定，代码基本上都是一样的，只是渲染的方式不一样，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 处理 html 指令</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> node 当前元素</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> value 指令的值</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> vm Nue 的实例对象</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-attr\">html</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node, value, vm</span>) &#123;<br>    node.<span class=\"hljs-property\">innerHTML</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getValue</span>(vm, value);<br>&#125;,<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 处理 text 指令</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> node 当前元素</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> value 指令的值</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> vm Nue 的实例对象</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-attr\">text</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node, value, vm</span>) &#123;<br>    node.<span class=\"hljs-property\">innerText</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getValue</span>(vm, value);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>编写测试代码：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231015173152264-1887065113.png\" alt=\"image-20231015173151943\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">html: `<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>我是div<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>`,<br>text: `<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>我是div<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>`<br></code></pre></td></tr></table></figure>\n<p>编写HTML代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-html</span>=<span class=\"hljs-string\">&quot;html&quot;</span>&gt;</span>abc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-text</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span>123<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>打开浏览器，可以看到效果如下：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231015173252749-1188073068.png\" alt=\"image-20231015173252270\" loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"手撕Vue-编译模板数据","link":"2023/10/15/手写Vue全家桶/08-手撕Vue-编译模板数据"},"next":{"title":"手撕Vue-查找指令和模板","link":"2023/10/15/手写Vue全家桶/06-手撕Vue-查找指令和模板"},"plink":"http://example.com/2023/10/15/手写Vue全家桶/07-手撕Vue-编译指令数据/","reading_time":"1200 words in 8 min"}