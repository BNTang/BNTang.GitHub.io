{"title":"手撕Vue-数据驱动界面改变中","date":"2023-10-15T14:11:39.000Z","date_formatted":{"ll":"Oct 15, 2023","L":"10/15/2023","MM-DD":"10-15"},"link":"2023/10/15/手写Vue全家桶/11-手撕Vue-数据驱动界面改变中","tags":["手写Vue全家桶"],"updated":"2023-10-19T14:38:43.501Z","content":"<p>经过上一篇的介绍，已经实现了观察者模式的基本内容，接下来要完成的就是将上一篇的发布订阅模式运用到 Nue 中，实现数据驱动界面改变。</p>\n<p>在监听数据变化的章节当中，<code>根据指定的区域和数据去编译渲染界面</code> 这个步骤处，我写了一个注释，这个注释是这样的：<code>第一步：给外界传入的所有数据都添加get/set方法</code>，第二步就是在第一步的基础上，给所有属性都添加观察者对象，当数据发生变化时，发布订阅触发观察者对象的回调函数重新渲染界面。</p>\n<p>先处理下 v-model 的情况，找到 CompilerUtil 中的 model 方法，将其修改添加观察者对象代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-attr\">model</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node, value, vm</span>) &#123;<br>    <span class=\"hljs-comment\">// 第二部：在第一次渲染的时候, 就给所有的属性添加观察者</span><br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Watcher</span>(vm, value, <span class=\"hljs-function\">(<span class=\"hljs-params\">newValue, oldValue</span>) =&gt;</span> &#123;<br>        node.<span class=\"hljs-property\">value</span> = newValue;<br>    &#125;);<br><br>    node.<span class=\"hljs-property\">value</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getValue</span>(vm, value);<br>&#125;,<br></code></pre></td></tr></table></figure>\n<p>这样就完成了第二步，接下来第三步就是将当前属性的所有观察者对象都放到当前属性的发布订阅对象中管理起来</p>\n<p>在创建观察者对象的时候，在构造函数当中，会调用 getOldValue 方法，会调用 <code>CompilerUtil.getValue</code> 方法，这个方法就是用于获取属性值的，在编译模板之前已经给所有属性添加了 get/set 方法，所以在获取属性值的时候，就会触发 get 方法，我们就可以在 get 方法中将当前属性的观察者对象添加到当前属性的发布订阅对象中管理起来。</p>\n<p>在 Observer 类中的 defineRecative 方法中添加如下代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title function_\">defineReactive</span>(<span class=\"hljs-params\">obj, attr, value</span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">observer</span>(value);<br><br>    <span class=\"hljs-comment\">// 第三步：将当前属性的所有观察者对象都放到当前属性的发布订阅对象中管理起来</span><br>    <span class=\"hljs-comment\">// 创建属于当前属性的发布订阅对象</span><br>    <span class=\"hljs-keyword\">let</span> dep = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dep</span>();<br><br>    <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(obj, attr, &#123;<br>        <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\"></span>) &#123;<br>            <span class=\"hljs-title class_\">Dep</span>.<span class=\"hljs-property\">target</span> &amp;&amp; dep.<span class=\"hljs-title function_\">addSub</span>(<span class=\"hljs-title class_\">Dep</span>.<span class=\"hljs-property\">target</span>);<br>            <span class=\"hljs-keyword\">return</span> value;<br>        &#125;,<br>        <span class=\"hljs-attr\">set</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">newValue</span>) =&gt;</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (value !== newValue) &#123;<br>                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">observer</span>(newValue);<br>                value = newValue;<br>                dep.<span class=\"hljs-title function_\">notify</span>();<br>                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;监听到数据的变化, 需要去更新UI&#x27;</span>);<br>            &#125;<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>在上述代码中，创建了一个属于当前属性的发布订阅对象，然后在 get 方法中，判断 Dep.target 是否存在，如果存在，就将当前属性的观察者对象添加到当前属性的发布订阅对象中管理起来。Dep.target 就是当前属性的观察者对象，这里该需要在改造一下观察者的类，将观察者对象添加到 Dep.target 中，放在全局中管理起来。等到所有的属性都添加完观察者对象之后，就将 Dep.target 置为 null。</p>\n<p>改造观察者类中的 getOldValue 方法, 这样在 get 方法中就可以将当前属性的观察者对象添加到当前属性的发布订阅对象中管理起来了:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title function_\">getOldValue</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-title class_\">Dep</span>.<span class=\"hljs-property\">target</span> = <span class=\"hljs-variable language_\">this</span>;<br>    <span class=\"hljs-keyword\">let</span> oldValue = <span class=\"hljs-title class_\">CompilerUtil</span>.<span class=\"hljs-title function_\">getValue</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vm</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">attr</span>);<br>    <span class=\"hljs-title class_\">Dep</span>.<span class=\"hljs-property\">target</span> = <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">return</span> oldValue;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这样就完成了数据驱动界面改变的功能，接下来我们就来测试一下，打开浏览器控制台，更改下数据，看看是否会触发界面的重新渲染，如下图所示:</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231015225533192-2069503709.png\" alt=\"image-20231015225532652\" loading=\"lazy\" class=\"φbp\"></p>\n<p>好了到此为止，我们已经完成了 v-model 数据驱动界面改变的功能。</p>\n<p>下面我将以 debugger 的形式来讲解一下整个数据驱动界面改变的过程, 在 defineReactive get 方法中打上断点，如下图所示:</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231015225930677-1894726759.png\" alt=\"image-20231015225930152\" loading=\"lazy\" class=\"φbp\"></p>\n<p>返回浏览器，主要关注调用栈，如下图所示:</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231015230020142-1005127989.png\" alt=\"image-20231015230019559\" loading=\"lazy\" class=\"φbp\"></p>\n<p>自己从下依次往上看，就可以看到整个数据驱动界面改变的过程了，这里我就不一一截图了，大家可以自己去看一下。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231015230131158-1370046997.png\" alt=\"image-20231015230130758\" loading=\"lazy\" class=\"φbp\"></p>\n<p>如上是 get 方法代码的执行流程，那么 set 的我也可以说明一下，set 方法的 debugger 不是打在 defineReactive 中，而是打在 Watcher 类中的 update 方法中，所执行的回调函数当中，如下图所示:</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231015230405351-1496763229.png\" alt=\"image-20231015230405011\" loading=\"lazy\" class=\"φbp\"></p>\n<p>返回浏览器，打开控制台更改数据触发 set 方法，发布订阅触发 update 方法：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231015230617957-1591873689.png\" alt=\"image-20231015230617621\" loading=\"lazy\" class=\"φbp\"></p>\n<p>这次也是主要关注调用栈，自己从下依次往上看，就可以看到整个数据驱动界面改变的过程了，这里我就不一一截图了，大家可以自己去看一下，如下图所示:</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231015230548211-853319842.png\" alt=\"image-20231015230547888\" loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"手撕Vue-数据驱动界面改变下","link":"2023/10/19/手写Vue全家桶/12-手撕Vue-数据驱动界面改变下"},"next":{"title":"手撕Vue-数据驱动界面改变上","link":"2023/10/15/手写Vue全家桶/10-手撕Vue-数据驱动界面改变上"},"plink":"http://example.com/2023/10/15/手写Vue全家桶/11-手撕Vue-数据驱动界面改变中/","reading_time":"1240 words in 8 min"}