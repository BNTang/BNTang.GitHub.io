{"title":"手撕Vue-编译模板数据","date":"2023-10-15T09:43:24.000Z","date_formatted":{"ll":"Oct 15, 2023","L":"10/15/2023","MM-DD":"10-15"},"link":"2023/10/15/手写Vue全家桶/08-手撕Vue-编译模板数据","tags":["手写Vue全家桶"],"updated":"2023-10-15T10:13:51.785Z","content":"<p>经上一篇编译指令数据后，我们已经可以将指令数据编译成具体需要展示的数据了，上一篇只是编译了指令数据，还没有编译模板数据，这一篇我们就来编译模板数据。</p>\n<p>也就是 <code>&#123;&#123;&#125;&#125;</code> 这种模板的形式我们该如何编译，其实和指令数据编译的思路是一样的，废话不多说，直接上代码。</p>\n<p>改造一下 buildText 方法，让它支持编译模板数据，调用 CompilerUtil content 方法，传入模板数据，返回编译后的数据，然后再将编译后的数据替换到文本节点中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">CompilerUtil</span>[<span class=\"hljs-string\">&#x27;content&#x27;</span>](node, content, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vm</span>);<br></code></pre></td></tr></table></figure>\n<p>在 CompilerUtil 中添加 content 方法，该方法和指令数据编译的思路是一样的，只是编译的数据不一样，指令数据是 <code>v-text</code> 这种，而模板数据是 <code>&#123;&#123;&#125;&#125;</code> 这种。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 处理模板字符串</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> node 当前元素</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> value 指令的值</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> vm Nue 的实例对象</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-attr\">content</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node, value, vm</span>) &#123;<br>    <span class=\"hljs-comment\">// console.log(value); // &#123;&#123; name &#125;&#125; -&gt; name -&gt; $data[name]</span><br>    node.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getContent</span>(vm, value);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>getContent 方法我单独拿出来，我先贴代码，然后再解释。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 获取指定模板字符串的内容</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> vm Nue 的实例对象</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> value 指令的值</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-title function_\">getContent</span>(<span class=\"hljs-params\">vm, value</span>) &#123;<br>    <span class=\"hljs-keyword\">const</span> reg = <span class=\"hljs-regexp\">/\\&#123;\\&#123;(.+?)\\&#125;\\&#125;/gi</span>;<br>    <span class=\"hljs-keyword\">return</span> value.<span class=\"hljs-title function_\">replace</span>(reg, <span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-comment\">// 第一次执行 args[1] = name</span><br>        <span class=\"hljs-comment\">// 第二次执行 args[1] = age</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getValue</span>(vm, args[<span class=\"hljs-number\">1</span>]);<br>    &#125;);<br>&#125;,<br></code></pre></td></tr></table></figure>\n<p>getContent 方法中，我们先定义了一个正则表达式，用来匹配模板字符串，<code>/\\&#123;\\&#123;(.+?)\\&#125;\\&#125;/gi</code> 这个正则表达式的意思是匹配 <code>&#123;&#123;&#125;&#125;</code> 里面的内容，<code>g</code> 表示全局匹配，<code>i</code> 表示忽略大小写，<code>(.+?)</code> 表示匹配任意字符，<code>+</code> 表示匹配一次或多次，<code>?</code> 表示非贪婪模式，也就是匹配到第一个 <code>&#125;&#125;</code> 就结束匹配。<code>()</code> 表示分组，<code>args[1]</code> 就是分组匹配到的内容。</p>\n<p>在方法当中，我们调用了 getValue 方法，该方法的作用是获取模板字符串的值，在运行测试代码的时候，我发现, <code>&#123;&#123; name &#125;&#125;</code> 这种模板编译出来是 undefined 所以我们需要在 getValue <code>[obj][key]</code> 的时候，去一下空格：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">return</span> data[currentKey.<span class=\"hljs-title function_\">trim</span>()];<br></code></pre></td></tr></table></figure>\n<p>这样就可以了，我们再来看一下测试代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123;time.h&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123;name&#125;&#125;-&#123;&#123;age&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>发现 <code>&#123;&#123;name&#125;&#125;-&#123;&#123;age&#125;&#125;</code> 这种也可以编译了，那么可以我们来看看我们 getContent 源码的执行效果，如果是 <code>&#123;&#123;name&#125;&#125;-&#123;&#123;age&#125;&#125;</code>, value 等于 <code>&#123;&#123;name&#125;&#125;-&#123;&#123;age&#125;&#125;</code> 进入 replace 循环，第一次执行 <code>args[1]</code> 等于 <code>name</code>，第二次执行 <code>args[1]</code> 等于 <code>age</code>，第一次循环已经将我们的 <code>&#123;&#123;name&#125;&#125;-&#123;&#123;age&#125;&#125;</code> 替换为了 <code>BNTang-&#123;&#123;age&#125;&#125;</code>，第二次循环将 <code>&#123;&#123;age&#125;&#125;</code> 替换为了 <code>age</code>，所以最终的结果就是 <code>BNTang-33</code>。</p>\n","prev":{"title":"手撕Vue-监听数据变化","link":"2023/10/15/手写Vue全家桶/09-手撕Vue-监听数据变化"},"next":{"title":"手撕Vue-编译指令数据","link":"2023/10/15/手写Vue全家桶/07-手撕Vue-编译指令数据"},"plink":"http://example.com/2023/10/15/手写Vue全家桶/08-手撕Vue-编译模板数据/","reading_time":"705 words in 5 min"}