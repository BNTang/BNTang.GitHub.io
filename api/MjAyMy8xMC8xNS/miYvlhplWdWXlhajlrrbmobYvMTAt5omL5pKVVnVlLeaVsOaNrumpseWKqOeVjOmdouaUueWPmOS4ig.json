{"title":"手撕Vue-数据驱动界面改变上","date":"2023-10-15T11:13:37.000Z","date_formatted":{"ll":"Oct 15, 2023","L":"10/15/2023","MM-DD":"10-15"},"link":"2023/10/15/手写Vue全家桶/10-手撕Vue-数据驱动界面改变上","tags":["手写Vue全家桶"],"updated":"2023-10-15T13:59:45.073Z","content":"<p>经过上一篇的介绍，已经实现了监听数据的变化，接下来就是要实现数据变化后，界面也跟着变化，这就是数据驱动界面改变。</p>\n<p>想要实现数据变化之后更新UI界面，我们可以使用发布订阅模式来实现，先定义一个观察者类, 再定义一个发布订阅类, 然后再通过发布订阅的类来管理观察者类。</p>\n<p>接下来我们就来实现这个代码。</p>\n<p>定义一个观察者类，观察属性的变化，当属性变化时，触发回调函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Watcher</span> &#123;<br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">vm, attr, cb</span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vm</span> = vm;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">attr</span> = attr;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cb</span> = cb;<br><br>        <span class=\"hljs-comment\">// 在创建观察者对象的时候就去获取当前的旧值</span><br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">oldValue</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getOldValue</span>();<br>    &#125;<br><br>    <span class=\"hljs-title function_\">getOldValue</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">CompilerUtil</span>.<span class=\"hljs-title function_\">getValue</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vm</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">attr</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 更新的方法, 用于判断新值和旧值是否相同</span><br><span class=\"hljs-comment\">     * 如果不相同, 那么就调用回调函数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">let</span> newValue = <span class=\"hljs-title class_\">CompilerUtil</span>.<span class=\"hljs-title function_\">getValue</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vm</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">attr</span>);<br><br>        <span class=\"hljs-keyword\">if</span> (newValue !== <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">oldValue</span>) &#123;<br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">cb</span>(newValue, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">oldValue</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>上方的类中主要有三个属性，分别是vm, attr, cb，vm是Vue的实例，attr是属性名，cb是回调函数。</p>\n<p>定义了一个getOldValue方法，用于获取旧值，这个方法在创建观察者对象的时候就会调用，用于获取旧值。</p>\n<p>定义了一个update方法，用于更新数据，当数据发生变化时，就会调用这个方法，用于判断新值和旧值是否相同，如果不相同，就调用回调函数。</p>\n<p>接下来我们就来定义一个发布订阅类，用于管理观察者对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dep</span> &#123;<br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-comment\">// 这个数组就是专门用于管理某个属性所有的观察者对象的</span><br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subs</span> = [];<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 订阅观察的方法</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> watcher 观察者对象</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">addSub</span>(<span class=\"hljs-params\">watcher</span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subs</span>.<span class=\"hljs-title function_\">push</span>(watcher);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 发布订阅的方法</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">notify</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subs</span>.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">watcher</span> =&gt;</span> watcher.<span class=\"hljs-title function_\">update</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>上方的类中主要有两个方法，分别是addSub和notify：</p>\n<ul>\n<li>addSub方法用于订阅观察的方法，将观察者对象添加到数组中。</li>\n<li>notify方法用于发布订阅的方法，遍历数组中的观察者对象，调用观察者对象的update方法。</li>\n</ul>\n<p>构造器中定义了一个数组，用于管理某个属性所有的观察者对象。</p>\n<p>好了，现在我们已经定义了观察者类和发布订阅类，先到此为止，下一篇文章再继续。</p>\n","prev":{"title":"手撕Vue-数据驱动界面改变中","link":"2023/10/15/手写Vue全家桶/11-手撕Vue-数据驱动界面改变中"},"next":{"title":"手撕Vue-监听数据变化","link":"2023/10/15/手写Vue全家桶/09-手撕Vue-监听数据变化"},"plink":"http://example.com/2023/10/15/手写Vue全家桶/10-手撕Vue-数据驱动界面改变上/","reading_time":"657 words in 4 min"}