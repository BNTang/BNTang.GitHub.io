{"title":"uni-app-项目计算功能(苹果计算器)","date":"2023-12-19T15:24:35.000Z","date_formatted":{"ll":"Dec 19, 2023","L":"12/19/2023","MM-DD":"12-19"},"link":"2023/12/19/Uniapp/23-uni-app-项目计算功能(苹果计算器)","tags":["Uniapp"],"updated":"2023-12-21T15:58:12.209Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231203182543828-632995329.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h1>\n<blockquote>\n<p>本文主要介绍苹果计算器项目中计算功能的实现</p>\n</blockquote>\n<ul>\n<li>在前面的文章中已经实现了输入，动态计算字体大小，以及计算器的布局</li>\n<li>本文主要介绍计算功能的实现</li>\n</ul>\n<h1 id=\"正文\">正文<a title=\"#正文\" href=\"#正文\"></a></h1>\n<h2 id=\"实现/清空/改变正负/除以100\">实现/清空/改变正负/除以100<a title=\"#实现/清空/改变正负/除以100\" href=\"#实现/清空/改变正负/除以100\"></a></h2>\n<p>inputText 已经实现了，接下来实现 operator 的功能，operator 方法在之前的文章中已经定义好了，所以本次就直接在里面写逻辑就好了：</p>\n<ul>\n<li>首先，来实现 <code>清空</code>，<code>改变正负</code>，<code>除以100</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">operator(params) &#123;<br>    switch (params) &#123;<br>        case &quot;clear&quot;:<br>            // 清空<br>            this.showValue = &quot;0&quot;;<br>            break;<br>        case &quot;opposite&quot;:<br>            // 改变正负<br>            // 负负得正<br>            this.showValue = -this.showValue;<br>            break;<br>        case &quot;percent&quot;:<br>            // 除以 100<br>            this.showValue = this.showValue / 100;<br>            break;<br>        case &quot;&quot;:<br>            break;<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure>\n<p>代码写完之后，来看一下效果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231220001832551-1038156734.gif\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>在本次运行中，发现了很多问题，但是我们一一来解决就好，首选来看除以 100，这个小数位错误的问题，其实是精度丢失。</p>\n<p>丢失精度了我这里不测试了，大家可以将除以 100 的结果用 <code>console.log</code> 打印到控制台看一下，我这里直接给出解决方案，我在网上找了一个 <code>a-calc</code> 的库，用它，就可以帮我解决这个问题。</p>\n<h2 id=\"解决精度丢失问题\">解决精度丢失问题<a title=\"#解决精度丢失问题\" href=\"#解决精度丢失问题\"></a></h2>\n<ul>\n<li>使用 <code>a-calc</code>，这里涉及到一个知识点就是在 UniApp 中安装外部库</li>\n<li>方法很简单，首先找到自己的项目文件夹目录，可以像我一样，如下图</li>\n</ul>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231220002534216-1253535703.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>打开资源管理器之后：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231220002620832-2033164457.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>再弹出来的终端当中输入如下安装指令即可进行安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm i a-calc<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231220002717647-583189270.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>安装成功之后我们就可以进行直接使用了，使用方式可以参考官网：<a href=\"https://www.npmjs.com/package/a-calc\" target=\"_blank\">https://www.npmjs.com/package/a-calc</a></p>\n<h3 id=\"使用-a-calc\">使用 a-calc<a title=\"#使用-a-calc\" href=\"#使用-a-calc\"></a></h3>\n<p>导入 a-calc：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">import &#123;calc, fmt&#125; from &quot;a-calc&quot;<br></code></pre></td></tr></table></figure>\n<p>然后使用 calc 包裹一下，就可以解决精度丢失的问题了, calc 的参数是字符串，所以我们需要将 <code>this.showValue</code> 转换为字符串，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">this.showValue = calc(`$&#123;this.showValue&#125; / 100`);<br></code></pre></td></tr></table></figure>\n<p>这样就可以解决精度丢失的问题了，来看一下效果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231220003203778-99291478.gif\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"实现计算操作\">实现计算操作<a title=\"#实现计算操作\" href=\"#实现计算操作\"></a></h2>\n<p>嗯，到这基本上解决完毕了，接下来来看加减乘除，首先来看一个做加减乘除之前所需要解决的问题，如下图：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231220011108486-1084658186.gif\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>我按下的是 23 + 65，应该在我按下 <code>+</code> 的时候将 23 记录下来，再将本次的运算符记录下来，然后再将 65 记录下来，最后再将 23 + 65 的结果记录下来，这样就可以了。</p>\n<p>所以我还需要在改动一下代码，我分别新增了三个变量，分别是：</p>\n<ul>\n<li><code>firstValue</code>：第一个值</li>\n<li><code>operatorType</code>：运算符</li>\n<li><code>secondValue</code>：第二个值</li>\n</ul>\n<blockquote>\n<ul>\n<li>firstValue 保存运算前面的数据，例如：1 + 2，保存 1</li>\n<li>secondValue 保存运算后面的数据，例如：1 + 2，保存 2</li>\n<li>operatorType 保存运算符，例如：1 + 2，保存 +</li>\n</ul>\n</blockquote>\n<p>我在额外定义一个变量 <code>isCaculate</code>, 用来记录用户，是否点击过运算符。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">firstValue: &quot;&quot;,<br>secondValue: &quot;&quot;,<br>operatorType: &quot;&quot;,<br>isCaculate: false,<br></code></pre></td></tr></table></figure>\n<p>需要的内容都定义完毕之后，来改造一下代码，首先在 <code>operator</code> 方法中，计算操作符的时候，需要将 <code>isCaculate</code> 设置为 <code>true</code>，每次输入了运算符记录一下状态：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">this.isCaculate = true;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231221224113389-347478997.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>然后在 <code>inputText</code> 方法中，需要判断一下，如果 <code>isCaculate</code> 为 <code>true</code>，那么就将 <code>firstValue</code> 设置为 <code>this.showValue</code>，然后将 <code>isCaculate</code> 设置为 <code>false</code>，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">if (this.isCaculate) &#123;<br>    this.firstValue = this.showValue;<br>    this.showValue = &quot;0&quot;;<br>    this.isCaculate = false;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>运行一下，看一下效果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231221225051784-1674470915.gif\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>很完美，接下来就是计算的逻辑了，首先来看 <code>=</code>, = 的 params 是 <code>result</code> 所以在 switch 处理一下 case 为 <code>result</code> 的情况, 因为这里设计到计算所以我单独抽取一个方法来完成这件事情，方法名叫 <code>caculate</code>，写到这我突然忘记一个事情就是要保存我们的运算符，所以我在 <code>operator</code> 方法中，将运算符保存到 <code>operatorType</code> 中，不能直接保存，而是在 default 中保存，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">this.operatorType = params;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231221234548353-1405986542.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>然后在 <code>caculate</code> 方法中，根据 <code>operatorType</code> 来判断是加减乘除，然后进行计算，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">caculate() &#123;<br>    switch (this.operatorType) &#123;<br>        case &quot;plus&quot;:<br>            this.showValue = calc(`$&#123;this.firstValue&#125; + $&#123;this.showValue&#125;`);<br>            break;<br>        case &quot;minus&quot;:<br>            this.showValue = calc(`$&#123;this.firstValue&#125; - $&#123;this.showValue&#125;`);<br>            break;<br>        case &quot;multiply&quot;:<br>            this.showValue = calc(`$&#123;this.firstValue&#125; * $&#123;this.showValue&#125;`);<br>            break;<br>        case &quot;divide&quot;:<br>            this.showValue = calc(`$&#123;this.firstValue&#125; / $&#123;this.showValue&#125;`);<br>            break;<br>        case &quot;&quot;:<br>            break;<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure>\n<p>计算逻辑写完之后，来看一下效果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231221234957197-948557362.gif\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>这里还有个效果需要实现一下就是，我首先输入 12 然后按 <code>+</code>，在输入 12，然后按 <code>+</code>，这时候我需要进行一次计算，因为我按了两次 <code>+</code>，所以在第二次按 <code>+</code> 的时候，需要将第一次的计算结果进行计算，所以我在 <code>operator</code> 方法中，需要判断一下，如果 <code>firstValue</code> 不为空，那么就调用 <code>caculate</code> 方法，在 default 分支调用 <code>caculate</code> 方法，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">if (this.firstValue != &quot;&quot;) &#123;<br>    this.caculate();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231221235510761-1154335266.gif\" alt loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li>到这里，计算器的功能就已经实现完毕了</li>\n<li>后面在给大家介绍一下，将这个项目打包成网页/小程序/App</li>\n</ul>\n<h1 id=\"end\">End<a title=\"#end\" href=\"#end\"></a></h1>\n<ul>\n<li>如果你有任何问题或建议，欢迎在下方留言，我会尽快回复</li>\n<li>如果你觉得本文对你有帮助，欢迎点赞、收藏，你的支持是我写作的最大动力</li>\n</ul>\n<blockquote>\n<p><a href=\"https://cloud.tencent.com/developer/article/2366050?from_column=20421&amp;from=20421\" target=\"_blank\">我正在参与2023腾讯技术创作特训营第四期有奖征文，快来和我瓜分大奖！</a></p>\n</blockquote>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231129232539490-1458223711.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"uni-app-打包成网页","link":"2023/12/21/Uniapp/24-uni-app-打包成网页"},"next":{"title":"uni-app-动态计算字体大小(苹果计算器)","link":"2023/12/19/Uniapp/22-uni-app-动态计算字体大小(苹果计算器)"},"plink":"http://example.com/2023/12/19/Uniapp/23-uni-app-项目计算功能(苹果计算器)/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"正文","title":"正文","index":"2","children":[{"id":"实现/清空/改变正负/除以100","title":"实现&#x2F;清空&#x2F;改变正负&#x2F;除以100","index":"2.1"},{"id":"解决精度丢失问题","title":"解决精度丢失问题","index":"2.2","children":[{"id":"使用-a-calc","title":"使用 a-calc","index":"2.2.1"}]},{"id":"实现计算操作","title":"实现计算操作","index":"2.3"}]},{"id":"end","title":"End","index":"3"}],"reading_time":"1538 words in 10 min"}