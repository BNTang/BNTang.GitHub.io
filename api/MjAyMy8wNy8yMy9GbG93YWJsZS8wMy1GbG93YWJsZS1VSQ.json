{"title":"Flowable-UI","date":"2023-07-23T04:19:20.000Z","date_formatted":{"ll":"Jul 23, 2023","L":"07/23/2023","MM-DD":"07-23"},"link":"2023/07/23/Flowable/03-Flowable-UI","tags":["Flowable"],"updated":"2023-08-09T15:25:40.780Z","content":"<h1 id=\"flowable-ui\">Flowable-UI<a title=\"#flowable-ui\" href=\"#flowable-ui\"></a></h1>\n<h2 id=\"安装\">安装<a title=\"#安装\" href=\"#安装\"></a></h2>\n<p>手把手教大家画了这样一个流程图，虽然说它不是特别好用，但是也不是不能用，也能用。好了，那么接下来的话，我们这个就先告一个段落，接下来我要跟大家说的第二个东西的话，就是另外一个流程绘制工具 Flowable-UI 这个话算是一个比较重要的一个东西，我觉得就是其实不管你以后开发用不用，但是这个东西你都得知道。这个，那么这个的话是什么呢？这个 Flowable 的官方推荐的一个什么流程引擎绘制工具，官方推荐的一个流程引擎辅助工具，可以这么来说叫做流程引擎辅助工具，就是它可以帮助我们更好的去开发这个流程引擎。</p>\n<p>官方提供的是一个 war 包，这个虽然是一个 war 包，但是除了将之扔到 Tomcat 中去运行之外，也可以直接执行 java -jar xxx.war 这个命令去启动这个 war 包。</p>\n<p>war 下载地址：<a href=\"https://github.com/flowable/flowable-engine/releases/download/flowable-6.7.2/flowable-6.7.2.zip\" target=\"_blank\">https://github.com/flowable/flowable-engine/releases/download/flowable-6.7.2/flowable-6.7.2.zip</a> (下载的比较慢有魔法还好)这个 zip 包下载之后，里边有一个 wars 文件夹，里边包含了 flowable-ui 的 war 包。然后，就像启动 Spring Boot 一样，直接启动这个 war 包即可：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202307/2105804-20230723121443863-947675782.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>启动命令：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">java -jar flowable-ui.war<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202307/2105804-20230723121638562-1534568818.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>启动之后，默认的端口号是 8080。</p>\n<p>启动之后，浏览器输入 <a href=\"http://localhost:8080/flowable-ui/idm/#/login\" target=\"_blank\">http://localhost:8080/flowable-ui/idm/#/login</a> 如果看到如下页面，表示启动成功：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202307/2105804-20230723121712723-1296072708.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>另外，我们也可以使用 docker 来安装，命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker run -p 8086:8080 -d flowable/flowable-ui<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202307/2105804-20230723121759974-2090579819.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"登录\">登录<a title=\"#登录\" href=\"#登录\"></a></h2>\n<p>默认的登录用户名是 admin，默认的登录密码是 test。</p>\n<p>看到如下页面，表示登录成功。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202307/2105804-20230723122240792-841326761.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"功能模块\">功能模块<a title=\"#功能模块\" href=\"#功能模块\"></a></h2>\n<p>flowable-ui 是完整的 flowable 体验 DEMO，而不仅仅只是一个流程图的绘制工具。所以它里边不仅可以画流程图，还可以运行流程图，既然能够运行流程图，那么就需要身份管理。</p>\n<ol>\n<li>任务应用程序：我们绘制好的流程图，可以直接将之发布到一个应用中，然后在这里进行部署，这个模块其实就是这些部署的应用程序。</li>\n<li>建模器应用程序：这个专门用来画流程图的。</li>\n<li>管理员应用程序：这个主要用来管理应用，一些具有管理员权限的用户，可以通过这个功能模块去查询 BPMN、DMN、FORM 等等信息。</li>\n<li>身份管理应用程序：这个功能模块，为所有的 flowable-ui 应用程序提供一个单点登录功能，并且还可以为这些用户设置用户组、用户权限等。</li>\n</ol>\n<h2 id=\"身份管理应用程序\">身份管理应用程序<a title=\"#身份管理应用程序\" href=\"#身份管理应用程序\"></a></h2>\n<p>创建用户流程：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202307/2105804-20230725232020936-1982084360.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>填入用户的基本信息，点击保存按钮，就可以完成用户的创建了。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202307/2105804-20230725232216760-2124625973.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>新建的用户不属于任何用户组，所以这个新建的用户是没有权限的，我们现在就可以使用这个新建的用户登录，但是登录成功后，看不到任何功能模块。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202307/2105804-20230725232314165-842365021.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>用户创建成功之后，可以点击上面的用户组功能，创建用户组：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202307/2105804-20230725232259331-1222933770.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>将来我们在画流程图的时候，可以设置某一个 UserTask 由某一个用户组来处理，这个用户组中的所有用户，将来都可以处理这个 UserTask。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202307/2105804-20230725232454264-1283246645.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>组创建成功之后，可以为这个组添加用户：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202307/2105804-20230725232549491-737503829.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>最后，我们可以在权限控制中，为用户或者用户组添加相应的权限。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202307/2105804-20230725232639953-413215579.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li>访问 idm 应用：访问功能身份管理应用程序。</li>\n<li>访问 admin 应用：访问功能管理员应用程序。</li>\n<li>访问 modeler 应用：访问功能建模器应用程序。</li>\n<li>访问 workflow 应用：访问功能任务应用程序。</li>\n<li>访问 REST API：访问 REST API 接口的。</li>\n</ul>\n<h2 id=\"管理员应用程序\">管理员应用程序<a title=\"#管理员应用程序\" href=\"#管理员应用程序\"></a></h2>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202307/2105804-20230725233026413-433345218.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"建模器应用程序\">建模器应用程序<a title=\"#建模器应用程序\" href=\"#建模器应用程序\"></a></h2>\n<p>核心功能，主要就是画流程图。</p>\n<p>绘制一个报销流程图，大致流程：</p>\n<ol>\n<li>启动一个流程。</li>\n<li>执行一个用户任务，这个用户任务交给流程的启动人去执行。这个用户任务中，填入报销材料，例如用户名、金额、用途。</li>\n<li>系统自动判断一下/或者人工判断报销金额是否大于 1000。</li>\n<li>如果报销金额小于等于 1000，那么这个报销任务交给 组长审批：<br>\na. 组长审批通过，则流程结束。<br>\nb. 组长审批不通过，则流程回到第 2 步，用户重新去填写报销资料。</li>\n<li>如果报销金额大于 1000，那么这个报销任务先交给经理审批：<br>\na. 经理审批通过，则交给 CEO 审批：<br>\ni. CEO 审批通过，则流程结束。<br>\nii. CEO 审批不通过，则流程回到步骤 2 中。<br>\nb. 经理审批不通过，则流程回到步骤 2 中。</li>\n</ol>\n<h3 id=\"绘制流程\">绘制流程<a title=\"#绘制流程\" href=\"#绘制流程\"></a></h3>\n<p>首先创建一个流程：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202307/2105804-20230726223252142-1685818527.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202307/2105804-20230726223236296-1169407404.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>!&gt; 注意，模型的 key 在当前应用中必须是唯一的，将来我们通过 Java 代码去操作这个模型的时候，就是通过模型 key 去识别这个模型。</p>\n<p>绘制出来的流程图：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202307/2105804-20230726223752550-26185904.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>在上面的流程图绘制中，有几个东西我要说明一下：</p>\n<ol>\n<li>如何添加用户任务：</li>\n</ol>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202307/2105804-20230726224000622-1642961626.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<ol start=\"2\">\n<li>用户任务与其它任务之间如何连线(就是拒绝流程的线条如何绘制)：</li>\n</ol>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202307/2105804-20230726224258403-641172257.gif\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<ol start=\"3\">\n<li>线条添加弯曲点</li>\n</ol>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202307/2105804-20230726224344971-950244933.png\" alt=\"image-20230726224344040\" loading=\"lazy\" class=\"φbp\"></p>\n<p>!&gt; 注意，在一个流程图中，开始节点必须有且只有一个，结束节点可以有多个。</p>\n<p>!&gt; 画完流程图之后官方提供了一个验证模型功能，可以验证一下我们画的流程图是否符合规范。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202307/2105804-20230726224432457-1589989792.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202307/2105804-20230726224512550-1130229974.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"表单问题\">表单问题<a title=\"#表单问题\" href=\"#表单问题\"></a></h3>\n<p>在流程中，传递流程参数有两种方式：</p>\n<ul>\n<li>流程变量</li>\n<li>表单</li>\n</ul>\n<p>这两种方式都可以传递参数，区别在于，流程变量是零散的，而表单是整体的。</p>\n<p>介绍了流程中传递参数的方式之后，我们继续将我们上方的流程中进行完善下，我们点击校验流程图是否完整很显然是提示我们流程图不完整，因为我们的流程图中没有设置表单，所以我们需要设置表单。</p>\n<p>首先是填写报销信息的表单，我们可以在用户任务中设置表单，也可以在用户任务的右侧设置表单，这里我们选择在右侧设置表单。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202308/2105804-20230803225012046-1551052338.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202308/2105804-20230803225837562-1063857142.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202308/2105804-20230803230223011-898753518.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202308/2105804-20230803230414581-177548863.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>到了这里我们的表单就设置好了，我们可以点击右上角的保存按钮，保存我们的流程图。</p>\n<p>网关条件设置：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202308/2105804-20230803230634802-2024457306.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202308/2105804-20230803230656180-161999933.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>我们先看组长审批这一条线的流程，目前所有的节点是哪些人我还没有一一的分配的，我先将节点对应的表单等信息完善，然后再去分配节点所对应的人。组长审批，组长需要操作的就是同意与拒绝。</p>\n<p>新建表单，表单的key一定要牢牢的记住，后面会用到，我这里叫做 <code>group_leader_approval</code>。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202308/2105804-20230803231106592-1451630665.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>我们这里使用结果，之前使用的是设计，设计也可以办到，但是结果更加的方便，我们这里使用结果，然后我们将结果设置为同意与拒绝。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202308/2105804-20230803231326200-1129043236.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>拒绝的话，我们需要设置一个原因，这个原因是必填的，所以我们需要设置一个必填的表单，这个表单的key叫做 <code>group_leader_approval_reason</code>。在 Flowable 中，想要获取表单的结果信息，需要使用一个固定的写法 form_key_outcome，这个 form_key_outcome 就是我们在上面设置的结果的 key，这里就是 <code>group_leader_approval</code>。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202308/2105804-20230803231653901-422170791.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>同意同理可证，我们这里就不再赘述了。</p>\n<p>大于 1000 的情况，我们需要设置两个节点，一个是经理审批，一个是 CEO 审批，我们先来设置经理审批。</p>\n<p>新建表单，表单的key一定要牢牢的记住，后面会用到，我这里叫做 <code>manager_approval</code>。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202308/2105804-20230803232412749-1082944081.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>采用结果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202308/2105804-20230803232505113-80865612.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>同意与拒绝两条线自己设置即可。</p>\n<p>CEO 审批，我这里要介绍一个新的知识点就是用表单中的引用来完成同意与拒绝的操作。</p>\n<p>新建表单, 表单 Key 名为 CEO_approval：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202308/2105804-20230803232658959-1117975447.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>表单新建完毕之后我们用单选按钮与下拉框都可以，我这里采用单选按钮的形式去演示这个知识点。</p>\n<p>给单选按钮取一个 id，我这里命名为 CEO_approval_radio_button。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202308/2105804-20230803233042806-1933552466.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202308/2105804-20230803233107988-265766663.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>这里不用记着表单的 Key 了，我们直接使用表单的引用，表单的引用就是我们在上面设置的表单的 id，这里就是 <code>CEO_approval_radio_button</code>。所以我们设置流条件就是和之前设置金额大于等于或者小于等于设置方式是一样的。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202308/2105804-20230803233406490-1225001602.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>最终再点击验证流程图是否完整，我们可以看到流程图已经完整了。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202308/2105804-20230803233723343-773889994.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>对于通过表单传递的参数，我们也可以按照流程变量的方式去访问单个的表单参数，例如在上面的流程图中，我们有 <code>$&#123;money &lt;= 1000&#125;</code> ，这里的 money 实际上是表单中的参数，但是我们可以直接通过 <code>$</code> 表达式去访问。还有比如 <code>$&#123;managers_approve_or_reject_radio_button == &quot;拒绝&quot;&#125;</code>，也是直接访问表单中的变量。</p>\n<h3 id=\"任务处理人\">任务处理人<a title=\"#任务处理人\" href=\"#任务处理人\"></a></h3>\n<p>我们这样子去划分</p>\n<ul>\n<li>zhangsan：是一个普通员工，他可以发起报销流程。</li>\n<li>lisi：是一个组长，他可以审批报销金额小于等于 1000 的报销流程。</li>\n<li>wangwu：是一个经理，他可以审批报销金额大于 1000 的报销流程。</li>\n<li>zhaoliu：是一个 CEO，他可以审批报销金额大于 1000 的报销流程。</li>\n</ul>\n<p>虽然我这里只是创建了这些用户，有些概念的东西我还是要这里说明：</p>\n<ul>\n<li>候选组：这个用户组中的所有用户都可以处理这个任务，但是只有一个用户可以处理这个任务（可以同时指定多个用户组来处理这个 UserTask，这个处理的时候，也需要先认领，再处理）。</li>\n<li>候选用户：这个用户可以处理这个任务，但是如果这个用户不处理这个任务，那么这个任务就会被挂起，直到这个用户处理这个任务（可以同时指定多个用户来处理这个 UserTask，将来用户在处理的时候，需要先认领（Claim）任务，然后才能处理）。</li>\n<li>分配给单个用户：这个任务只能由这个用户来处理，如果这个用户不处理这个任务，那么这个任务就会被挂起，直到这个用户处理这个任务（直接指定某一个具体的用户来处理这个流程，注意这里只能指定一个用户，并且这个用户将来在处理任务的时候，不需要认领，直接就可以处理）。</li>\n<li>分配给流程的发起人：这个任务只能由流程的发起人来处理，如果这个用户不处理这个任务，那么这个任务就会被挂起，直到这个用户处理这个任务（流程发起人，由流程的启动人/发起人来处理这个流程）。</li>\n</ul>\n<p>?&gt; 密码分别为：123</p>\n<p>根据划分结果将对应的用户在身份管理应用程序中一一创建好。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202308/2105804-20230803234040597-1548329893.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>然后在返回到建模器应用程序中，我们可以在用户任务中设置用户, 首先是填写报销信息的用户任务，我们将这个用户任务分配给 zhangsan。然后我想了想，还是按照流程的发起人来进行填报，也就是说，这个流程是谁发起的那么这个填报就有他来写ok说明白了，开始设置。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202308/2105804-20230809231407516-916595923.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>然后是组长审批，我们将这个用户任务分配给 lisi。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202308/2105804-20230809231510436-1610192137.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>然后是经理审批，我们将这个用户任务分配给 wangwu。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202308/2105804-20230809231541401-1950412862.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>最后是 CEO 审批，我们将这个用户任务分配给 zhaoliu。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202308/2105804-20230809231631794-2074591375.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"基本概念\">基本概念<a title=\"#基本概念\" href=\"#基本概念\"></a></h3>\n<ul>\n<li>流程定义（ProcessDefinition）：我们绘制的流程图、流程的 XML 文件，就是我们的流程定义。</li>\n<li>流程（ProcessInstance）：一个启动了流程实例就是一个流程，流程可以是已经执行完毕的，也可以是正在执行中的。流程的定义相当于是一个类，而流程则相当于是一个对象。</li>\n<li>任务（Task）：一个 ProcessInstance 中，需要具体处理的节点就是一个任务。</li>\n</ul>\n<h2 id=\"任务应用程序\">任务应用程序<a title=\"#任务应用程序\" href=\"#任务应用程序\"></a></h2>\n<p>在 flowable-ui 中，绘制好的流程图，可以直接部署称为一个 App。</p>\n<p>在上方，我们已经为每一个节点设置了用户，那么我们就可以直接部署成为一个 App。来进行走一遍流程，这个走流程的过程我就不演示出来了自行去体验。</p>\n","prev":{"title":"Couldn't launch Python exit code 9009","link":"2023/08/10/问题记录/Couldn't launch Python exit code 9009"},"next":{"title":"流程图绘制","link":"2023/07/19/Flowable/02-流程图绘制"},"plink":"http://example.com/2023/07/23/Flowable/03-Flowable-UI/","toc":[{"id":"flowable-ui","title":"Flowable-UI","index":"1","children":[{"id":"安装","title":"安装","index":"1.1"},{"id":"登录","title":"登录","index":"1.2"},{"id":"功能模块","title":"功能模块","index":"1.3"},{"id":"身份管理应用程序","title":"身份管理应用程序","index":"1.4"},{"id":"管理员应用程序","title":"管理员应用程序","index":"1.5"},{"id":"建模器应用程序","title":"建模器应用程序","index":"1.6","children":[{"id":"绘制流程","title":"绘制流程","index":"1.6.1"},{"id":"表单问题","title":"表单问题","index":"1.6.2"},{"id":"任务处理人","title":"任务处理人","index":"1.6.3"},{"id":"基本概念","title":"基本概念","index":"1.6.4"}]},{"id":"任务应用程序","title":"任务应用程序","index":"1.7"}]}],"reading_time":"3803 words in 25 min"}