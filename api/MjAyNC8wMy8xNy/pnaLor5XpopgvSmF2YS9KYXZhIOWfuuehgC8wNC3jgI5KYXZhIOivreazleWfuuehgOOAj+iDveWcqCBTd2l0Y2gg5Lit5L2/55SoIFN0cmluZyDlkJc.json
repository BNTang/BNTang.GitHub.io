{"title":"『Java 语法基础』能在 Switch 中使用 String 吗？","date":"2024-03-17T05:06:31.000Z","date_formatted":{"ll":"Mar 17, 2024","L":"03/17/2024","MM-DD":"03-17"},"link":"2024/03/17/面试题/Java/Java 基础/04-『Java 语法基础』能在 Switch 中使用 String 吗","tags":["Java"],"updated":"2024-03-17T10:52:43.223Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202403/2105804-20240317130857368-368053156.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>从 Java 7 开始，我们可以在 switch case 中使用字符串，但这仅仅是一个语法糖。内部实现在 switch 中使用字符串的 hash code。</p>\n<p>从 Java 7 开始，Java 语言支持在 <code>switch</code> 语句中直接使用 <code>String</code> 类型的变量。之前的版本只允许在 <code>switch</code> 语句中使用 <code>整型</code>、<code>枚举</code> 和一些 <code>特定的类</code>（比如 <code>Character</code>、<code>Byte</code>、<code>Short</code> 和 <code>Integer</code>）。</p>\n<p>使用字符串作为 <code>switch</code> 条件时，实际上 Java 编译器会做一些额外的工作。编译器首先会获取到每个 <code>case</code> 中字符串的 <code>hashCode</code> 值，这是一个整型值。然后，<code>switch</code> 语句实际上是根据这个 <code>hashCode</code> 来转换执行不同的 <code>case</code> 的。由于 <code>hashCode</code> 可能会出现碰撞（不同的字符串可能有相同的 <code>hashCode</code>），编译器还会生成一段额外的代码来确保字符串确实是相等的，以此来避免由于 <code>hashCode</code> 碰撞带来的错误判断。</p>\n<p>简单来说，当你在 <code>switch</code> 语句中使用字符串时，Java 在底层做了这样的处理：</p>\n<ol>\n<li>计算 <code>switch</code> 条件中字符串的 <code>hashCode</code> 值。</li>\n<li>用这个 <code>hashCode</code> 值来找到匹配的 <code>case</code>。</li>\n<li>检查找到的 <code>case</code> 中的字符串与 <code>switch</code> 条件中的字符串是否真正相等（使用 <code>.equals</code> 方法）。</li>\n<li>如果相等，则执行对应的代码块；如果不相等，继续检查后面的 <code>case</code>，或者执行 <code>default</code> 块（如果有的话）。</li>\n</ol>\n<p>这个处理方式的好处是，你可以直接用字符串来控制 <code>switch</code> 流程，而不用手动去写一堆 <code>if-else</code> 条件判断，看起来更加简洁和清晰。但是需要注意 <code>hashCode</code> 的碰撞问题，虽然 Java 编译器会帮你处理，但这也意味着，比起使用整型，使用字符串作为 <code>switch</code> 条件可能会有更多的性能开销。</p>\n<p>在 Java 中，<code>hashCode</code> 是一个方法，它属于 <code>Object</code> 类。由于 <code>Object</code> 类是所有 Java 类的父类，这意味着每个 Java 对象都有这个方法。<code>hashCode</code> 的作用是提供一个整数值，这个值被用作对象的 “哈希码”。</p>\n<p>哈希码的主要用途之一是在哈希表这类数据结构中快速查找对象。哈希表是一种常用的数据结构，用来存储键值对（key-value pairs），它可以快速插入和检索数据。</p>\n<p>当 Java 中的 <code>hashCode</code> 方法被调用时，它会根据对象的内容（通常是对象中的字段）来计算并返回一个整数值。对于同一个对象多次调用 <code>hashCode</code> 方法，只要对象的内容没变，它应该总是返回相同的值。而不同的对象则可能会返回不同的值。</p>\n<p>但是 “可能” 是关键词——实际上，不同对象有时会产生相同的哈希码，这称为哈希碰撞。就像两个不同的人可以有同一个电话号码一样。因此，在使用哈希码时，我们需要额外的逻辑来处理这种碰撞。</p>\n<p>总结一下，<code>hashCode</code> 是对象的一个整数表示，主要用于快速查找，但需要额外的步骤来确保精确的匹配，以防不同的对象产生相同的哈希码。在 <code>switch</code> 语句中使用字符串，就涉及到了这些 <code>hashCode</code> 的处理过程。</p>\n<p>完整代码可在此查阅：<a href=\"https://github.com/BNTang/Java-All/tree/main/java-infrastructural/src/main/java/top/it6666/example\" target=\"_blank\">GitHub</a></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231211215004818-977875224.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"『Java 语法基础』对 equals() 和 hashCode() 的理解","link":"2024/03/17/面试题/Java/Java 基础/05-『Java 语法基础』对 equals() 和 hashCode() 的理解"},"next":{"title":"『Java 语法基础』3 * 0.1 == 0.3 将会返回什么？true 还是 false？","link":"2024/03/17/面试题/Java/Java 基础/03-『Java 语法基础』3 乘以 0.1 == 0.3 将会返回什么 true 还是 false"},"plink":"http://example.com/2024/03/17/面试题/Java/Java 基础/04-『Java 语法基础』能在 Switch 中使用 String 吗/","reading_time":"879 words in 6 min"}