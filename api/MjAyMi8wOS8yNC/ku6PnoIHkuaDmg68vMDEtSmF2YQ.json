{"title":"Java","date":"2022-09-24T02:19:40.000Z","date_formatted":{"ll":"Sep 24, 2022","L":"09/24/2022","MM-DD":"09-24"},"link":"2022/09/24/代码习惯/01-Java","tags":["代码习惯"],"updated":"2022-09-24T03:22:37.370Z","content":"<h1 id=\"定义配置文件信息\">定义配置文件信息<a title=\"#定义配置文件信息\" href=\"#定义配置文件信息\"></a></h1>\n<p>有时候我们为了统一管理会把一些变量放到 yml 配置文件中，例如：</p>\n<p><img src=\"/2022/09/24/%E4%BB%A3%E7%A0%81%E4%B9%A0%E6%83%AF/01-Java/img.png\" alt=\"img.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>用 <code>@ConfigurationProperties</code> 代替 <code>@Value</code> 使用方法，定义对应字段的实体：</p>\n<p><img src=\"/2022/09/24/%E4%BB%A3%E7%A0%81%E4%B9%A0%E6%83%AF/01-Java/02-img.png\" alt=\"img.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>使用时注入这个 Bean：</p>\n<p><img src=\"/2022/09/24/%E4%BB%A3%E7%A0%81%E4%B9%A0%E6%83%AF/01-Java/03-img.png\" alt=\"img.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"用-@requiredargsconstructor-代替-@autowired\">用 @RequiredArgsConstructor 代替 @Autowired<a title=\"#用-@requiredargsconstructor-代替-@autowired\" href=\"#用-@requiredargsconstructor-代替-@autowired\"></a></h1>\n<p>我们都知道注入一个 Bean 有三种方式（set 注入，构造器注入，注解注入），Spring 推荐我们使用构造器的方式注入 Bean，我们来看看上段代码编译完之后的样子：</p>\n<p><img src=\"/2022/09/24/%E4%BB%A3%E7%A0%81%E4%B9%A0%E6%83%AF/01-Java/04-img.png\" alt=\"img.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>RequiredArgsConstructor：lombok 提供。</p>\n<h1 id=\"代码模块化\">代码模块化<a title=\"#代码模块化\" href=\"#代码模块化\"></a></h1>\n<p>阿里巴巴 Java 开发手册中说到每个方法的代码不要超过 50 行（我没记错的话），在实际开发中我们要善于拆分自己的接口或方法，做到一个方法只处理一种逻辑，说不定以后某个功能就用到了，拿来即用。</p>\n<p><img src=\"/2022/09/24/%E4%BB%A3%E7%A0%81%E4%B9%A0%E6%83%AF/01-Java/05-img.png\" alt=\"img.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"抛异常而不是返回\">抛异常而不是返回<a title=\"#抛异常而不是返回\" href=\"#抛异常而不是返回\"></a></h1>\n<p>在写业务代码的时候，经常会根据不同的结果返回不同的信息，尽量减少返回，会显得代码比较乱。</p>\n<p>反例：</p>\n<p><img src=\"/2022/09/24/%E4%BB%A3%E7%A0%81%E4%B9%A0%E6%83%AF/01-Java/06-img.png\" alt=\"img.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>正例：</p>\n<p><img src=\"/2022/09/24/%E4%BB%A3%E7%A0%81%E4%B9%A0%E6%83%AF/01-Java/07-img.png\" alt=\"img.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"减少不必要的-db\">减少不必要的 DB<a title=\"#减少不必要的-db\" href=\"#减少不必要的-db\"></a></h1>\n<p>!&gt; 尽可能的减少对数据库的查询</p>\n<p>举例子：</p>\n<p>删除一个服务（已下架或未上架的才能删除），之前有看别人写的代码，会先根据 id 查询该记录，然后做一些判断。</p>\n<p>反例：</p>\n<p><img src=\"/2022/09/24/%E4%BB%A3%E7%A0%81%E4%B9%A0%E6%83%AF/01-Java/08-img.png\" alt=\"img.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>正例：</p>\n<p><img src=\"/2022/09/24/%E4%BB%A3%E7%A0%81%E4%B9%A0%E6%83%AF/01-Java/09-img.png\" alt=\"img.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"不要返回-null\">不要返回 null<a title=\"#不要返回-null\" href=\"#不要返回-null\"></a></h1>\n<p>反例：</p>\n<p><img src=\"/2022/09/24/%E4%BB%A3%E7%A0%81%E4%B9%A0%E6%83%AF/01-Java/10-img.png\" alt=\"img.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>正例：</p>\n<p><img src=\"/2022/09/24/%E4%BB%A3%E7%A0%81%E4%B9%A0%E6%83%AF/01-Java/11-img.png\" alt=\"img.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>别处调用方法时，避免不必要的空指针。</p>\n<h1 id=\"减少-controller-业务代码\">减少 controller 业务代码<a title=\"#减少-controller-业务代码\" href=\"#减少-controller-业务代码\"></a></h1>\n<p>业务代码尽量放到 service 层进行处理，后期维护起来也好操作而且美观。</p>\n<p>反例：</p>\n<p><img src=\"/2022/09/24/%E4%BB%A3%E7%A0%81%E4%B9%A0%E6%83%AF/01-Java/12-img.png\" alt=\"img.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>正例：</p>\n<p><img src=\"/2022/09/24/%E4%BB%A3%E7%A0%81%E4%B9%A0%E6%83%AF/01-Java/13-img.png\" alt=\"img.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"利用好-idea\">利用好 IDEA<a title=\"#利用好-idea\" href=\"#利用好-idea\"></a></h1>\n<p>目前为止市面上的企业基本都用 IDEA 作为开发工具了。</p>\n<p>举一个小例子：</p>\n<p>IDEA 会对我们的代码进行判断，提出合理的建议。</p>\n<p>例如：</p>\n<p><img src=\"/2022/09/24/%E4%BB%A3%E7%A0%81%E4%B9%A0%E6%83%AF/01-Java/14-img.png\" alt=\"img.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>它推荐我们用 lambda 的形式替代，点击 replace：</p>\n<p><img src=\"/2022/09/24/%E4%BB%A3%E7%A0%81%E4%B9%A0%E6%83%AF/01-Java/15-img.png\" alt=\"img.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"阅读源码\">阅读源码<a title=\"#阅读源码\" href=\"#阅读源码\"></a></h1>\n<p>一定要养成阅读源码的好习惯包括优秀的开源项目 GitHub 上 stars:&gt;1000, 会从中学好好多只是包括其对代码的设计思想以及高级 Api，面试加分（好多面试官习惯问源码相关的知识）</p>\n<h1 id=\"设计模式\">设计模式<a title=\"#设计模式\" href=\"#设计模式\"></a></h1>\n<p>23 种设计模式，要尝试代码中运用设计模式的思想，写出的代码既规范又美观还高大上哈哈。</p>\n<h1 id=\"拥抱新知识\">拥抱新知识<a title=\"#拥抱新知识\" href=\"#拥抱新知识\"></a></h1>\n<p>像我们这种工作年限少的程序员，我觉得要多学习自己认知之外的知识，不能每天 CRUD，有机会就多用用有点难度的知识，没有机会（项目较传统），可以自己下班多些相关 demo 练习。</p>\n<h1 id=\"基础问题\">基础问题<a title=\"#基础问题\" href=\"#基础问题\"></a></h1>\n<p>map 遍历：</p>\n<p><img src=\"/2022/09/24/%E4%BB%A3%E7%A0%81%E4%B9%A0%E6%83%AF/01-Java/16-img.png\" alt=\"img.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>optional 判空：</p>\n<p><img src=\"/2022/09/24/%E4%BB%A3%E7%A0%81%E4%B9%A0%E6%83%AF/01-Java/17-img.png\" alt=\"img.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"递归\">递归<a title=\"#递归\" href=\"#递归\"></a></h1>\n<p>大数据量的递归时，避免在递归方法里面 new 对象，可以试试把对象当做方法参数进行传递使用。</p>\n<h1 id=\"注释\">注释<a title=\"#注释\" href=\"#注释\"></a></h1>\n<p>类，接口，方法，注解较复杂的方法，注释都要写而且要写清楚，有时候写注释不是给别人看的，而是给自己看的。</p>\n<h1 id=\"判断元素是否存在\">判断元素是否存在<a title=\"#判断元素是否存在\" href=\"#判断元素是否存在\"></a></h1>\n<p>hashSet 而不是 List，List 判断一个元素是否存在的代码：</p>\n<p><img src=\"/2022/09/24/%E4%BB%A3%E7%A0%81%E4%B9%A0%E6%83%AF/01-Java/18-img.png\" alt=\"img.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>由此可见其复杂度为 On, 而 HashSet 底层采用 HashMap 作为数据结构进行存储，元素都放在 Map 的 key（即链表中）</p>\n<p><img src=\"/2022/09/24/%E4%BB%A3%E7%A0%81%E4%B9%A0%E6%83%AF/01-Java/19-img.png\" alt=\"img.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>由此可见其复杂度为 O1。</p>\n","prev":{"title":"MongoDB-复制集特点","link":"2022/09/24/MongoDB/MongoDB-复制集/02-MongoDB-复制集特点"},"next":{"title":"分布式定时任务","link":"2022/09/23/分布式/01-分布式定时任务"},"plink":"http://example.com/2022/09/24/代码习惯/01-Java/","toc":[{"id":"定义配置文件信息","title":"定义配置文件信息","index":"1"},{"id":"用-@requiredargsconstructor-代替-@autowired","title":"用 @RequiredArgsConstructor 代替 @Autowired","index":"2"},{"id":"代码模块化","title":"代码模块化","index":"3"},{"id":"抛异常而不是返回","title":"抛异常而不是返回","index":"4"},{"id":"减少不必要的-db","title":"减少不必要的 DB","index":"5"},{"id":"不要返回-null","title":"不要返回 null","index":"6"},{"id":"减少-controller-业务代码","title":"减少 controller 业务代码","index":"7"},{"id":"利用好-idea","title":"利用好 IDEA","index":"8"},{"id":"阅读源码","title":"阅读源码","index":"9"},{"id":"设计模式","title":"设计模式","index":"10"},{"id":"拥抱新知识","title":"拥抱新知识","index":"11"},{"id":"基础问题","title":"基础问题","index":"12"},{"id":"递归","title":"递归","index":"13"},{"id":"注释","title":"注释","index":"14"},{"id":"判断元素是否存在","title":"判断元素是否存在","index":"15"}],"reading_time":"1255 words in 8 min"}