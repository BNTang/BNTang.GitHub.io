{"title":"代码质量-可维护性","date":"2023-11-25T19:04:30.000Z","date_formatted":{"ll":"Nov 26, 2023","L":"11/26/2023","MM-DD":"11-26"},"link":"2023/11/26/设计模式/05-代码质量-可维护性","tags":["设计模式"],"updated":"2023-11-25T19:17:11.479Z","content":"<h1 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h1>\n<p>什么是代码的可维护性？</p>\n<ul>\n<li>代码的可维护性是指代码的易读性、可理解性以及容易修改性。</li>\n<li>一个具有高可维护性的代码通常是清晰的、结构良好的，并且易于其他开发者阅读和修改。</li>\n</ul>\n<p>为了展示这一概念，我将用 Java编写两个示例：一个是可维护性好的正例，另一个是可维护性差的反例。</p>\n<h1 id=\"可维护性好的代码\">可维护性好的代码<a title=\"#可维护性好的代码\" href=\"#可维护性好的代码\"></a></h1>\n<p>在这个例子中，代码将会使用清晰的命名、合理的结构和适当的注释。</p>\n<p>代码在：<a href=\"https://github.com/BNTang/code-quality/tree/main/src/main/java/top/it6666/%E5%8F%AF%E7%BB%B4%E6%8A%A4%E6%80%A7/%E5%8F%AF%E7%BB%B4%E6%8A%A4%E6%80%A7%E5%A5%BD%E7%9A%84%E4%BB%A3%E7%A0%81\" target=\"_blank\">https://github.com/BNTang/code-quality/tree/main/src/main/java/top/it6666/可维护性/可维护性好的代码</a></p>\n<h1 id=\"可维护性差的代码\">可维护性差的代码<a title=\"#可维护性差的代码\" href=\"#可维护性差的代码\"></a></h1>\n<p>这个例子中的代码将缺乏清晰的结构、混乱的命名和缺失的注释，从而使得代码难以理解和维护。</p>\n<p>代码在：<a href=\"https://github.com/BNTang/code-quality/tree/main/src/main/java/top/it6666/%E5%8F%AF%E7%BB%B4%E6%8A%A4%E6%80%A7/%E5%8F%AF%E7%BB%B4%E6%8A%A4%E6%80%A7%E5%B7%AE%E7%9A%84%E4%BB%A3%E7%A0%81\" target=\"_blank\">https://github.com/BNTang/code-quality/tree/main/src/main/java/top/it6666/可维护性/可维护性差的代码</a></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231122231128423-999760020.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"草稿模板文章","link":"2023/11/27/草稿/01-草稿模板文章"},"next":{"title":"代码质量-单一职责","link":"2023/11/26/设计模式/06-代码质量-单一职责"},"plink":"http://example.com/2023/11/26/设计模式/05-代码质量-可维护性/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"可维护性好的代码","title":"可维护性好的代码","index":"2"},{"id":"可维护性差的代码","title":"可维护性差的代码","index":"3"}],"reading_time":"267 words in 2 min"}