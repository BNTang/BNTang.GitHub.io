{"title":"代码质量-单一职责","date":"2023-11-25T19:04:30.000Z","date_formatted":{"ll":"Nov 26, 2023","L":"11/26/2023","MM-DD":"11-26"},"link":"2023/11/26/设计模式/06-代码质量-单一职责","tags":["设计模式"],"updated":"2023-11-29T17:04:27.184Z","content":"<h1 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h1>\n<p>什么是代码的单一职责？</p>\n<p>代码的单一职责原则（Single Responsibility Principle, SRP）是软件开发中的一种设计原则，特别是在面向对象编程中。</p>\n<p>它指的是一个类应该只有一个引起它变化的原因。</p>\n<p>换句话说，这个原则建议一个类应该只负责一项任务或功能。</p>\n<p>当一个类包含多个功能时，这些功能的变化可能会相互影响，导致软件的维护和扩展变得更加困难。</p>\n<h1 id=\"正例\">正例<a title=\"#正例\" href=\"#正例\"></a></h1>\n<p>在正例中，我们将创建一个遵循单一职责原则的Java类。</p>\n<p>假设我们需要实现一个简单的用户管理系统，我们可以定义一个User类来表示用户，和一个UserDB类来处理用户数据库的交互。</p>\n<p>代码在：<a href=\"https://github.com/BNTang/code-quality/tree/main/src/main/java/top/it6666/%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3/%E6%AD%A3%E4%BE%8B\" target=\"_blank\">https://github.com/BNTang/code-quality/tree/main/src/main/java/top/it6666/单一职责/正例</a></p>\n<p>在这个例子中，User类只负责存储用户的数据，而UserDB类只负责数据库的交互。</p>\n<p>每个类都只有一个原因引起变化：User类可能会因为用户数据的表示方式改变而变化，而UserDB类可能会因为数据库操作的方式改变而变化。</p>\n<h1 id=\"反例\">反例<a title=\"#反例\" href=\"#反例\"></a></h1>\n<p>在反例中，我们将创建一个不遵循单一职责原则的Java类。</p>\n<p>这个类将同时负责表示用户和处理数据库操作。</p>\n<p>代码在：<a href=\"https://github.com/BNTang/code-quality/tree/main/src/main/java/top/it6666/%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3/%E5%8F%8D%E4%BE%8B\" target=\"_blank\">https://github.com/BNTang/code-quality/tree/main/src/main/java/top/it6666/单一职责/反例</a></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231122231128423-999760020.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"代码质量-可维护性","link":"2023/11/26/设计模式/05-代码质量-可维护性"},"next":{"title":"代码质量-开闭原则","link":"2023/11/26/设计模式/04-代码质量-开闭原则"},"plink":"http://example.com/2023/11/26/设计模式/06-代码质量-单一职责/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"正例","title":"正例","index":"2"},{"id":"反例","title":"反例","index":"3"}],"reading_time":"396 words in 3 min"}