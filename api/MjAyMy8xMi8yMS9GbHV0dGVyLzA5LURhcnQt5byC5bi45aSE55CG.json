{"title":"Dart-异常处理","date":"2023-12-20T16:37:31.000Z","date_formatted":{"ll":"Dec 21, 2023","L":"12/21/2023","MM-DD":"12-21"},"link":"2023/12/21/Flutter/09-Dart-异常处理","tags":["Dart"],"updated":"2023-12-26T02:15:21.679Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231221003826089-767261355.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h1>\n<ul>\n<li>在 Dart 中，异常处理是一种重要的错误处理方式</li>\n<li>与 JavaScript 中的异常处理有相似之处，但也有一些差异</li>\n<li>本文将介绍 Dart 中的异常处理</li>\n</ul>\n<h1 id=\"dart-中的异常处理\">Dart 中的异常处理<a title=\"#dart-中的异常处理\" href=\"#dart-中的异常处理\"></a></h1>\n<ul>\n<li>Dart 使用 try, on, catch, 和 finally 关键字来处理异常</li>\n<li>try 块中的代码是可能抛出异常的代码</li>\n<li>如果发生异常，可以使用 on 或 catch 来捕获并处理它</li>\n<li>finally 块中的代码无论是否发生异常都会执行</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">void</span> main() &#123;<br>  <span class=\"hljs-keyword\">try</span> &#123;<br>    <span class=\"hljs-comment\">// 尝试执行的代码</span><br>    <span class=\"hljs-keyword\">throw</span> FormatException(<span class=\"hljs-string\">&#x27;这是一个格式错误。&#x27;</span>);<br>  &#125; <span class=\"hljs-keyword\">on</span> FormatException <span class=\"hljs-keyword\">catch</span> (e) &#123;<br>    <span class=\"hljs-comment\">// 捕获特定类型的异常</span><br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;捕获到格式异常: <span class=\"hljs-subst\">$&#123;e.message&#125;</span>&#x27;</span>);<br>  &#125; <span class=\"hljs-keyword\">catch</span> (e) &#123;<br>    <span class=\"hljs-comment\">// 捕获其他类型的异常</span><br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;未知异常: <span class=\"hljs-subst\">$e</span>&#x27;</span>);<br>  &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>    <span class=\"hljs-comment\">// 无论是否捕获异常，都会执行</span><br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;这是 finally 块，总是执行。&#x27;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231225235425275-556444986.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"javascript-中的异常处理\">JavaScript 中的异常处理<a title=\"#javascript-中的异常处理\" href=\"#javascript-中的异常处理\"></a></h1>\n<ul>\n<li>JavaScript 使用 try, catch, 和 finally 关键字来处理异常</li>\n<li>它没有 on 关键字，通常不区分异常的类型</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">try &#123;<br>  // 尝试执行的代码<br>  throw new Error(&#x27;这是一个错误。&#x27;);<br>&#125; catch (e) &#123;<br>  // 捕获异常<br>  console.log(`捕获到异常: $&#123;e.message&#125;`);<br>&#125; finally &#123;<br>  // 无论是否捕获异常，都会执行<br>  console.log(&#x27;这是 finally 块，总是执行。&#x27;);<br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"异同点\">异同点<a title=\"#异同点\" href=\"#异同点\"></a></h1>\n<ol>\n<li><strong>语法结构</strong>: 两种语言都使用 try, catch, finally 结构，但 Dart 还有 on 关键字来针对特定异常类型进行捕获</li>\n<li><strong>异常类型</strong>: 在 Dart 中，你可以捕获特定类型的异常。而在 JavaScript 中，通常捕获所有类型的异常</li>\n<li><strong>异常对象</strong>: 在 Dart 的 catch 块中，你可以获得异常对象及其堆栈跟踪信息。而在 JavaScript 中，通常只获取异常对象</li>\n</ol>\n<h1 id=\"end\">End<a title=\"#end\" href=\"#end\"></a></h1>\n<ul>\n<li>如果你有任何问题或建议，欢迎在下方留言，我会尽快回复</li>\n<li>如果你觉得本文对你有帮助，欢迎点赞、收藏，你的支持是我写作的最大动力</li>\n</ul>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231211215004818-977875224.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"uni-app-打包成网页","link":"2023/12/21/Uniapp/24-uni-app-打包成网页"},"next":{"title":"Dart-函数(下)","link":"2023/12/20/Flutter/08-Dart-函数(下)"},"plink":"http://example.com/2023/12/21/Flutter/09-Dart-异常处理/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"dart-中的异常处理","title":"Dart 中的异常处理","index":"2"},{"id":"javascript-中的异常处理","title":"JavaScript 中的异常处理","index":"3"},{"id":"异同点","title":"异同点","index":"4"},{"id":"end","title":"End","index":"5"}]}