{"title":"【Java 基础】面向对象开篇","date":"2024-03-04T02:37:38.000Z","date_formatted":{"ll":"Mar 4, 2024","L":"03/04/2024","MM-DD":"03-04"},"link":"2024/03/04/Java/Java 基础/面向对象/01-【Java 基础】面向对象开篇","tags":["Java 基础"],"updated":"2024-03-04T14:07:45.329Z","content":"<h1 id=\"一、前言\">一、前言<a title=\"#一、前言\" href=\"#一、前言\"></a></h1>\n<blockquote>\n<p>本篇文章是『Java 基础』系列文章的第 1 篇，主要介绍『Java 基础』中的面向对象。</p>\n</blockquote>\n<h1 id=\"二、什么是面向对象\">二、什么是面向对象<a title=\"#二、什么是面向对象\" href=\"#二、什么是面向对象\"></a></h1>\n<p>在看什么是面向对象之前，我们先来看看什么是 OOP（Object Oriented Programming）。</p>\n<ul>\n<li>Object：对象</li>\n<li>Oriented：面向</li>\n<li>Programming：编程</li>\n</ul>\n<p>所以 OOP 就是面向对象编程。</p>\n<h1 id=\"三、面向对象的由来\">三、面向对象的由来<a title=\"#三、面向对象的由来\" href=\"#三、面向对象的由来\"></a></h1>\n<p>在计算机发展的早期，计算机的主要任务是处理数值计算，所以计算机的编程语言也是面向过程的。面向过程的编程语言是以过程为中心的，它的基本思想是将一个大的问题分解成一个一个的小问题，然后将这些小问题分别解决。这种编程方式的优点是效率高，缺点是不利于维护和扩展。</p>\n<p>随着计算机的发展，计算机的应用领域越来越广泛，计算机的任务也越来越复杂，这就要求编程语言也要有更好的抽象能力，于是面向对象编程语言就应运而生了。</p>\n<h1 id=\"四、面向对象的特点\">四、面向对象的特点<a title=\"#四、面向对象的特点\" href=\"#四、面向对象的特点\"></a></h1>\n<p>面向对象编程语言的特点是：</p>\n<ul>\n<li>封装</li>\n<li>继承</li>\n<li>多态</li>\n</ul>\n<h1 id=\"五、面向对象核心思想\">五、面向对象核心思想<a title=\"#五、面向对象核心思想\" href=\"#五、面向对象核心思想\"></a></h1>\n<p>面向对象编程的核心思想是将现实世界中的事物抽象成一个个的对象，然后通过对象之间的交互来解决问题。</p>\n<h1 id=\"六、面向对象应该掌握的知识\">六、面向对象应该掌握的知识<a title=\"#六、面向对象应该掌握的知识\" href=\"#六、面向对象应该掌握的知识\"></a></h1>\n<p>学习面向对象编程，主要学习的是：</p>\n<ul>\n<li>类与对象：理解类（class）是如何定义对象（object）的模板或蓝图。学会如何创建对象并理解实例（instance）的概念。</li>\n<li>封装：学习如何将数据（属性）和代码（方法）封装在对象中，并使用访问修饰符（如公共、私有）来控制对对象成员的访问。</li>\n<li>继承：掌握如何通过继承来扩展现有的类。了解子类（subclass）和父类（superclass）间的关系以及如何利用继承来实现代码的重用。</li>\n<li>多态：理解多态性允许以统一的接口使用不同的实例，通过覆盖（overriding）和重载（overloading）方法来实现多态。</li>\n<li>抽象：学习抽象类和接口的概念，以及如何使用它们来定义抽象层和具体实现的分离。</li>\n<li>设计模式：熟悉常用的面向对象设计模式，如单例（Singleton）、工厂（Factory）、观察者（Observer）、策略（Strategy）等。</li>\n<li>UML（统一建模语言）：学习 UML 来设计和可视化面向对象系统。</li>\n<li>S.O.L.I.D 原则：这是五个面向对象设计原则的首字母缩略词，包括单一职责原则、开闭原则、里氏替换原则、接口隔离原则和依赖倒置原则。</li>\n<li>实践与案例分析：通过实践项目和研究现实世界的案例来将理论应用到实践中。</li>\n</ul>\n<p>不同的编程语言如 Java、Python、C++、C# 等都支持面向对象编程，学习 OOP 时可以选择任意一种语言作为学习媒介。理解并掌握面向对象的核心原则（封装 Encapsulation，继承 Inheritance，多态 Polymorphism，抽象 Abstraction）对于成为一名合格的软件开发者至关重要。</p>\n<h1 id=\"七、总结\">七、总结<a title=\"#七、总结\" href=\"#七、总结\"></a></h1>\n<p>通过本文的学习，您将能够掌握以下核心知识点：</p>\n<ul>\n<li>1.了解什么是面向对象</li>\n<li>2.掌握面向对象的由来</li>\n<li>3.了解面向对象的特点</li>\n<li>4.掌握面向对象的核心思想</li>\n<li>5.了解面向对象应该掌握的知识</li>\n</ul>\n<blockquote>\n<p>最后，感谢您对本文的阅读。如果这篇文章对您有所帮助，欢迎点赞、收藏或转发分享。您的每一份支持，都是我持续创作、分享知识热情的源泉。希望我们可以通过不断的学习和交流，一起进步，共享知识的乐趣。</p>\n</blockquote>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231211215004818-977875224.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"【UniApp】自定义组件","link":"2024/03/04/Web/UniApp/【UniApp】自定义组件"},"next":{"title":"【Java 基础】类与对象","link":"2024/03/04/Java/Java 基础/面向对象/02-【Java 基础】类与对象"},"plink":"http://example.com/2024/03/04/Java/Java 基础/面向对象/01-【Java 基础】面向对象开篇/","toc":[{"id":"一、前言","title":"一、前言","index":"1"},{"id":"二、什么是面向对象","title":"二、什么是面向对象","index":"2"},{"id":"三、面向对象的由来","title":"三、面向对象的由来","index":"3"},{"id":"四、面向对象的特点","title":"四、面向对象的特点","index":"4"},{"id":"五、面向对象核心思想","title":"五、面向对象核心思想","index":"5"},{"id":"六、面向对象应该掌握的知识","title":"六、面向对象应该掌握的知识","index":"6"},{"id":"七、总结","title":"七、总结","index":"7"}],"reading_time":"994 words in 7 min"}