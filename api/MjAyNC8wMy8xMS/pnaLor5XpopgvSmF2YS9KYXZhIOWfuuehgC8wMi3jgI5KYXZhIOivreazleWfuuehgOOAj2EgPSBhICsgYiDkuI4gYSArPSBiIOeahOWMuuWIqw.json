{"title":"『Java 语法基础』a = a + b 与 a += b 的区别","date":"2024-03-11T15:31:37.000Z","date_formatted":{"ll":"Mar 11, 2024","L":"03/11/2024","MM-DD":"03-11"},"link":"2024/03/11/面试题/Java/Java 基础/02-『Java 语法基础』a = a + b 与 a += b 的区别","tags":["Java"],"updated":"2024-03-17T16:54:48.173Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202403/2105804-20240312232008437-357736445.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>对于 <code>a = a + b</code>，如果 <code>a</code> 和 <code>b</code> 是 byte、short 或 char 类型的变量，在进行算术运算的时候会首先提升为 int 类型（这称为 <code>类型提升</code>），然后才执行加法运算。</p>\n<p>如果想将结果赋值回 byte、short 或 char 类型的变量，必须进行显式的类型转换，否则编译器会报错，因为 int 类型不能隐式转换为 byte、short 或 char 类型。</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>;<br><span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">20</span>;<br><br><span class=\"hljs-comment\">// 必须显式转换</span><br>a = (<span class=\"hljs-type\">byte</span>)(a + b);<br></code></pre></td></tr></table></figure>\n<p>如果不进行强制类型转换，上述代码会在编译时报错，因为 <code>a + b</code> 的结果是 int 类型。</p>\n<p>而对于 <code>a += b</code>，它是一个复合赋值运算符，它会自动进行类型转换。编译器对于 <code>a += b</code> 运算会自动将赋值操作的结果类型转换为目标变量 <code>a</code> 的类型。因此，使用 <code>+=</code> 进行操作时，不需要显示进行类型转换，哪怕是在处理 byte、short 或 char 类型的变量。</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>;<br><span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">20</span>;<br><br><span class=\"hljs-comment\">// 不需要显式转换，编译器自动处理</span><br>a += b;<br></code></pre></td></tr></table></figure>\n<p>在这个例子中，<code>a += b</code> 实际上是 <code>a = (byte)(a + b)</code> 的简化形式，编译器会隐式地将加法运算的结果转换回 <code>a</code> 的类型（在这个情况下是 byte）。</p>\n<p>因此，总结起来，<code>a = a + b</code> 需要显式的类型转换以避免类型提升带来的问题，而 <code>a += b</code> 则由编译器负责处理类型转换。</p>\n<p>完整代码可在此查阅：<a href=\"https://github.com/BNTang/Java-All/tree/main/java-infrastructural/src/main/java/top/it6666/example\" target=\"_blank\">GitHub</a></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231211215004818-977875224.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"『Java 语法基础』3 * 0.1 == 0.3 将会返回什么？true 还是 false？","link":"2024/03/17/面试题/Java/Java 基础/03-『Java 语法基础』3 乘以 0.1 == 0.3 将会返回什么 true 还是 false"},"next":{"title":"『Java 语法基础』面向对象有哪些特性","link":"2024/03/06/面试题/Java/Java 基础/01-『语法基础』面向对象有哪些特性"},"plink":"http://example.com/2024/03/11/面试题/Java/Java 基础/02-『Java 语法基础』a = a + b 与 a += b 的区别/","reading_time":"418 words in 3 min"}