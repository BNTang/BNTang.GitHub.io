{"title":"「Dart」异步编程","date":"2023-12-28T16:30:25.000Z","date_formatted":{"ll":"Dec 29, 2023","L":"12/29/2023","MM-DD":"12-29"},"link":"2023/12/29/Flutter/13-「Dart」异步编程","tags":["Dart"],"updated":"2024-01-09T05:51:10.857Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231229003124246-216433052.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h1>\n<ul>\n<li>在 JavaScript 和 Dart 中，异步编程是一个 <code>非常重要</code> 的概念</li>\n<li>我将通过一些基本的异步编程示例来展示两种语言的异同</li>\n</ul>\n<h1 id=\"异步函数（async-functions）\">异步函数（Async Functions）<a title=\"#异步函数（async-functions）\" href=\"#异步函数（async-functions）\"></a></h1>\n<h2 id=\"javascript\">JavaScript<a title=\"#javascript\" href=\"#javascript\"></a></h2>\n<p>在 JavaScript 中，异步函数通常通过 <code>async</code> 关键字和 <code>await</code> 表达式来实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fetchData</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> response = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">&#x27;https://api.example.com/data&#x27;</span>);<br>    <span class=\"hljs-keyword\">let</span> data = <span class=\"hljs-keyword\">await</span> response.<span class=\"hljs-title function_\">json</span>();<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);<br>&#125;<br><br><span class=\"hljs-title function_\">fetchData</span>();<br></code></pre></td></tr></table></figure>\n<h2 id=\"dart\">Dart<a title=\"#dart\" href=\"#dart\"></a></h2>\n<p>Dart 也使用 <code>async</code> 和 <code>await</code> 关键字来处理异步操作。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\">Future&lt;<span class=\"hljs-keyword\">void</span>&gt; fetchData() <span class=\"hljs-keyword\">async</span> &#123;<br>    <span class=\"hljs-keyword\">var</span> response = <span class=\"hljs-keyword\">await</span> http.<span class=\"hljs-keyword\">get</span>(<span class=\"hljs-built_in\">Uri</span>.parse(<span class=\"hljs-string\">&#x27;https://api.example.com/data&#x27;</span>));<br>    <span class=\"hljs-keyword\">var</span> data = jsonDecode(response.body);<br>    <span class=\"hljs-built_in\">print</span>(data);<br>&#125;<br><br><span class=\"hljs-keyword\">void</span> main() &#123;<br>    fetchData();<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"异同点\">异同点<a title=\"#异同点\" href=\"#异同点\"></a></h2>\n<ul>\n<li>两种语言都使用 <code>async</code> 和 <code>await</code> 关键字。</li>\n<li>Dart 需要使用 <code>Future</code> 类型来表示异步操作的结果。</li>\n</ul>\n<h1 id=\"事件循环和异步回调\">事件循环和异步回调<a title=\"#事件循环和异步回调\" href=\"#事件循环和异步回调\"></a></h1>\n<h2 id=\"javascript-1\">JavaScript<a title=\"#javascript-1\" href=\"#javascript-1\"></a></h2>\n<p>JavaScript 依赖于事件循环和回调函数来处理异步操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Start&#x27;</span>);<br><br><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Inside timeout&#x27;</span>);<br>&#125;, <span class=\"hljs-number\">1000</span>);<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;End&#x27;</span>);<br></code></pre></td></tr></table></figure>\n<h2 id=\"dart-1\">Dart<a title=\"#dart-1\" href=\"#dart-1\"></a></h2>\n<p>Dart 同样有事件循环，可以使用类似的方式处理异步操作。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">void</span> main() &#123;<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;Start&#x27;</span>);<br><br>    Future.delayed(<span class=\"hljs-built_in\">Duration</span>(seconds: <span class=\"hljs-number\">1</span>), () &#123;<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;Inside timeout&#x27;</span>);<br>    &#125;);<br><br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;End&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"异同点-1\">异同点<a title=\"#异同点-1\" href=\"#异同点-1\"></a></h2>\n<ul>\n<li>两种语言都有事件循环的概念。</li>\n<li>JavaScript 使用 <code>setTimeout</code>，Dart 使用 <code>Future.delayed</code>。</li>\n<li>两者在语法上略有差异，但概念相似。</li>\n</ul>\n<h1 id=\"future\">Future<a title=\"#future\" href=\"#future\"></a></h1>\n<p>在 Dart 中，<code>Future</code> 是一个核心类，用于表示一个异步操作的结果。它与 JavaScript 中的 <code>Promise</code> 相似，代表一个可能在未来某个时刻才会完成的计算。当异步操作完成时，<code>Future</code> 要么成功返回一个值，要么抛出一个错误。</p>\n<h2 id=\"基本概念\">基本概念<a title=\"#基本概念\" href=\"#基本概念\"></a></h2>\n<ul>\n<li><strong>Future</strong>: 用于处理异步操作，可以返回一个值或错误。</li>\n<li><strong>then()</strong>: 当 <code>Future</code> 完成时，<code>then()</code> 方法被调用，用于处理返回的值。</li>\n<li><strong>catchError()</strong>: 用于处理 <code>Future</code> 抛出的错误。</li>\n<li><strong>await</strong>: 在 <code>async</code> 函数中使用，等待 <code>Future</code> 完成并获取其结果。</li>\n<li><strong>async</strong>: 标记一个函数为异步函数，允许在函数内使用 <code>await</code>。</li>\n</ul>\n<h2 id=\"示例代码\">示例代码<a title=\"#示例代码\" href=\"#示例代码\"></a></h2>\n<p>创建和使用 Future：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\">Future&lt;<span class=\"hljs-built_in\">String</span>&gt; fetchUserData() &#123;<br>    <span class=\"hljs-comment\">// 模拟异步操作，例如从服务器获取数据</span><br>    <span class=\"hljs-keyword\">return</span> Future.delayed(<span class=\"hljs-built_in\">Duration</span>(seconds: <span class=\"hljs-number\">2</span>), () &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;User data&quot;</span>;<br>    &#125;);<br>&#125;<br><br><span class=\"hljs-keyword\">void</span> main() &#123;<br>    fetchUserData().then((data) &#123;<br>        <span class=\"hljs-built_in\">print</span>(data); <span class=\"hljs-comment\">// 打印返回的数据</span><br>    &#125;).catchError((error) &#123;<br>        <span class=\"hljs-built_in\">print</span>(error); <span class=\"hljs-comment\">// 处理可能发生的错误</span><br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>使用 async 和 await：</p>\n<p>async 和 await 关键字提供了一种更直观的方式来处理异步操作。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\">Future&lt;<span class=\"hljs-built_in\">String</span>&gt; fetchUserData() &#123;<br>    <span class=\"hljs-keyword\">return</span> Future.delayed(<span class=\"hljs-built_in\">Duration</span>(seconds: <span class=\"hljs-number\">2</span>), () &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;User data&quot;</span>;<br>    &#125;);<br>&#125;<br><br>Future&lt;<span class=\"hljs-keyword\">void</span>&gt; printUserData() <span class=\"hljs-keyword\">async</span> &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-keyword\">var</span> userData = <span class=\"hljs-keyword\">await</span> fetchUserData();<br>        <span class=\"hljs-built_in\">print</span>(userData);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (e) &#123;<br>        <span class=\"hljs-built_in\">print</span>(e);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">void</span> main() &#123;<br>    printUserData();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>在这个例子中，<code>fetchUserData()</code> 返回一个 <code>Future&lt;String&gt;</code>，表示异步获取用户数据的过程。在 <code>printUserData()</code> 函数中，我们使用 <code>await</code> 关键字等待 <code>Future</code> 完成，然后打印结果或捕获并处理错误。</p>\n<p>通过这种方式，Dart 使异步编程更加直观和易于管理，特别是在处理复杂的异步操作和多个 <code>Future</code> 时。</p>\n<blockquote>\n<p>在Dart语言中，“Future”是一种用于表示异步操作的对象。当你需要执行一个耗时操作，比如从网络获取数据、读取文件等，这些操作通常不会立即完成，“Future’就是用来处理这种情况的。使用“Future 可以让你的程序继续执行其他任务，而不必等待这个耗时操作完成。</p>\n</blockquote>\n<h1 id=\"end\">End<a title=\"#end\" href=\"#end\"></a></h1>\n<ul>\n<li>🐤如果您对本文有任何疑问或想法，请在评论区留言，我将很乐意与您交流。</li>\n<li>🐰您的每一条评论对我都至关重要，我会尽快给予回复。</li>\n<li>🎈如果您觉得这篇文章对您有所启发或帮助，请不吝赞赏、收藏或分享。</li>\n<li>🎁您的每一个动作都是对我创作的最大鼓励和支持。</li>\n<li>👍谢谢您的阅读和陪伴！</li>\n</ul>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231211215004818-977875224.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"『Flutter』开发环境搭建","link":"2023/12/30/Flutter/14-「Flutter」开发环境搭建"},"next":{"title":"「Dart」库","link":"2023/12/27/Flutter/12-「Dart」库"},"plink":"http://example.com/2023/12/29/Flutter/13-「Dart」异步编程/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"异步函数（async-functions）","title":"异步函数（Async Functions）","index":"2","children":[{"id":"javascript","title":"JavaScript","index":"2.1"},{"id":"dart","title":"Dart","index":"2.2"},{"id":"异同点","title":"异同点","index":"2.3"}]},{"id":"事件循环和异步回调","title":"事件循环和异步回调","index":"3","children":[{"id":"javascript-1","title":"JavaScript","index":"3.1"},{"id":"dart-1","title":"Dart","index":"3.2"},{"id":"异同点-1","title":"异同点","index":"3.3"}]},{"id":"future","title":"Future","index":"4","children":[{"id":"基本概念","title":"基本概念","index":"4.1"},{"id":"示例代码","title":"示例代码","index":"4.2"}]},{"id":"end","title":"End","index":"5"}]}