{"title":"手撕Vue-Router-实现router-link","date":"2023-11-29T15:21:45.000Z","date_formatted":{"ll":"Nov 29, 2023","L":"11/29/2023","MM-DD":"11-29"},"link":"2023/11/29/手写VueRouter/05-手撕Vue-Router-实现router-link","tags":["手写VueRouter"],"updated":"2023-11-29T17:04:27.181Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231129232311589-67760702.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h1>\n<p>在上一篇 <code>[手撕Vue-Router-添加全局$router属性]</code> 中，实现了将每一个 Vue 实例上挂载一个 <code>$router</code> 属性，这个属性就是我们在上一篇文章中创建的 VueRouter 实例。</p>\n<h1 id=\"开始\">开始<a title=\"#开始\" href=\"#开始\"></a></h1>\n<p>本章节，我们将实现一个 <code>router-link</code> 组件，这个组件可以实现点击跳转到指定的路由。</p>\n<h1 id=\"实现思路\">实现思路<a title=\"#实现思路\" href=\"#实现思路\"></a></h1>\n<p>我们需要实现一个 <code>router-link</code> 组件，这个组件可以实现点击跳转到指定的路由。</p>\n<p>实现 router-link 组件，我们需要注意以下几点：</p>\n<ul>\n<li>只要外界使用了Vue-Router, 那么我们就必须提供两个自定义的组件给外界使用，一个是 <code>router-link</code> 组件，一个是 <code>router-view</code> 组件。</li>\n<li>只要外界通过Vue.use注册了Vue-Router, 就代表外界使用了Vue-Router</li>\n<li>只要外界通过Vue.use注册了Vue-Router, 就会调用插件的install方法</li>\n<li>所以我们只需要在install方法中注册两个全局组件给外界使用即可</li>\n</ul>\n<h1 id=\"代码实现\">代码实现<a title=\"#代码实现\" href=\"#代码实现\"></a></h1>\n<ul>\n<li>只要外界使用了Vue-Router, 那么我们就必须提供两个自定义的组件给外界使用，一个是 <code>router-link</code> 组件，一个是 <code>router-view</code> 组件。首先本章节我们只实现 <code>router-link</code> 组件。</li>\n<li>只要外界通过Vue.use注册了Vue-Router, 就代表外界使用了Vue-Router</li>\n<li>只要外界通过Vue.use注册了Vue-Router, 就会调用插件的install方法</li>\n<li>所以我们只需要在install方法中注册两个全局组件给外界使用即可</li>\n</ul>\n<p>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">NueRouter</span>.<span class=\"hljs-property\">install</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">Vue, options</span>) =&gt;</span> &#123;<br>    ...<br><br>    <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">component</span>(<span class=\"hljs-string\">&#x27;router-link&#x27;</span>, &#123;<br><br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231129233800301-1435099604.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>好了到此为止，就完成了添加 router-link 组件，只是简简单单的添加了一个组件，还没有实现跳转的功能。</p>\n<h1 id=\"实现跳转功能\">实现跳转功能<a title=\"#实现跳转功能\" href=\"#实现跳转功能\"></a></h1>\n<p>通过观察官方的 <code>router-link</code> 组件，我们可以发现，这个组件是一个 <code>&lt;a&gt;</code> 标签，所以我们可以通过 <code>&lt;a&gt;</code> 标签的 <code>href</code> 属性来实现跳转。</p>\n<p>这么一来，在根据 Vue 官方文档中介绍的组件注册方式，我们可以在 component 中使用 render 函数来实现渲染 a 标签。</p>\n<p>a 标签渲染完毕了但是跳转的地址还没有，还需要在 component 中添加一个 props 属性，这个属性就是我们要跳转的地址。</p>\n<blockquote>\n<p>总结：通过 render 函数渲染 a 标签，通过 props 属性传递跳转地址。</p>\n</blockquote>\n<p>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">component</span>(<span class=\"hljs-string\">&#x27;router-link&#x27;</span>, &#123;<br>    <span class=\"hljs-attr\">props</span>: &#123;<br>        <span class=\"hljs-attr\">to</span>: &#123;<br>            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">String</span>,<br>        &#125;<br>    &#125;,<br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&#123;this.to&#125;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<p>写完发现，a 标签渲染了，但是没有内容，我们需要在 a 标签中添加内容，这个内容就是我们在使用 router-link 组件时传入的内容。</p>\n<p>我们可以通过 <code>this.$slots.default</code> 来获取到我们在使用 router-link 组件时传入的内容。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231129235024934-1189844376.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&#123;this.to&#125;</span>&gt;</span>&#123;this.$slots.default&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n<p>测试自己写的 router-link 组件，发现可以改变了，发现还有一个问题，就是路由的 mode 为 hash 时，生成的 a 标签的 href 属性是 <code>/#/xxx</code>，如果 mode 为 history 时，生成的 a 标签的 href 属性是 <code>/xxx</code>, 这个问题我们还需要解决。</p>\n<p>那么怎么获取到路由的 mode 呢？我们可以通过 <code>this.$router.mode</code> 来获取到路由的 mode。</p>\n<p>这里有一个注意点：</p>\n<blockquote>\n<p>render 方法中的 this 并不是当前实例对象, 而是一个代理对象, 如果我们想拿到当前实例对象，那么可以通过 <code>this._self</code> 获取</p>\n</blockquote>\n<p>知道了这些内容之后，我们就可以通过 <code>this._self.$router.mode</code> 来获取到路由的 mode 了。根据路由的 mode 来判断生成的 a 标签的 href 属性。</p>\n<p>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> path = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">to</span>;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_self</span>.<span class=\"hljs-property\">$router</span>.<span class=\"hljs-property\">mode</span> === <span class=\"hljs-string\">&#x27;hash&#x27;</span>) &#123;<br>        path = <span class=\"hljs-string\">&#x27;#&#x27;</span> + path;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&#123;path&#125;</span>&gt;</span>&#123;this.$slots.default&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>测试一下，发现可以了。好了，到此为止，我们就完成了 <code>router-link</code> 组件的实现。</p>\n<h1 id=\"最后\">最后<a title=\"#最后\" href=\"#最后\"></a></h1>\n<p>大家好我是 BNTang, 一个热爱分享的技术的开发者，如果大家觉得我的文章对你有帮助的话，可以关注我的公众号 <code>JavaBoyL</code>，我会在公众号中分享一些IT技术和一些个人的见解，谢谢大家的支持。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231129232539490-1458223711.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"手撕Vue-Router-实现router-view","link":"2023/11/30/手写VueRouter/06-手撕Vue-Router-实现router-view"},"next":{"title":"草稿模板文章","link":"2023/11/27/草稿/01-草稿模板文章"},"plink":"http://example.com/2023/11/29/手写VueRouter/05-手撕Vue-Router-实现router-link/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"开始","title":"开始","index":"2"},{"id":"实现思路","title":"实现思路","index":"3"},{"id":"代码实现","title":"代码实现","index":"4"},{"id":"实现跳转功能","title":"实现跳转功能","index":"5"},{"id":"最后","title":"最后","index":"6"}],"reading_time":"1125 words in 8 min"}