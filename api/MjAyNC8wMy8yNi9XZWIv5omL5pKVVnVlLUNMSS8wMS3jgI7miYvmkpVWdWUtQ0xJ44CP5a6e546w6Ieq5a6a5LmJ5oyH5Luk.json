{"title":"『手撕Vue-CLI』实现自定义指令","date":"2024-03-26T15:15:22.000Z","date_formatted":{"ll":"Mar 26, 2024","L":"03/26/2024","MM-DD":"03-26"},"link":"2024/03/26/Web/手撕Vue-CLI/01-『手撕Vue-CLI』实现自定义指令","tags":["手撕Vue-CLI"],"updated":"2024-03-27T15:47:02.593Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202403/2105804-20240326231654290-2012457231.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h1>\n<p>经过前面文章的分享，实现了 VueRouter，实现了 VueRouter 之后，到此为止，Vue，Vuex，VueRouter 就都已经搞定了。</p>\n<p>在 Vue 全家桶中还有 Vue-CLI（Vue 脚手架）所以说，从本篇开始，给大家分享一下实现 Vue-CLI 脚手架的整个过程。</p>\n<h1 id=\"正文\">正文<a title=\"#正文\" href=\"#正文\"></a></h1>\n<p>核心内容开始之前，先回顾一下 Vue-CLI 是如何使用的，访问 VueCLI 脚手架官方网站：<a href=\"https://cli.vuejs.org/zh/\" target=\"_blank\">https://cli.vuejs.org/zh/</a></p>\n<p>打开官方地址之后可以看到，官方告诉我们如果想要使用 Vue 脚手架，必须先进行安装（全局安装）：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202403/2105804-20240327213925486-918262850.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>在全局安装好了脚手架之后，就相当于我们的指令库中又多了一个自定义指令，然后再通过这个自定义指令，我们就能够创建一个 Vue 项目。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202403/2105804-20240327213945387-24913065.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>从上述我所讲的内容来看，想要实现一个 Vue 脚手架，首先要实现自定义指令，然后再通过这个自定义指令，我们就能够创建一个 Vue 项目。</p>\n<h2 id=\"如何实现自定义指令\">如何实现自定义指令<a title=\"#如何实现自定义指令\" href=\"#如何实现自定义指令\"></a></h2>\n<p>在之前分享的 Node.js 核心原理系列中，我详细介绍了如何手写 Node.js 的模块系统，并且解释了自定义模块指令的方法。因此，接下来的内容将会更加容易理解。如果您对此还不太熟悉，请参考我之前的分享。</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/BNTang/p/13674486.html\" target=\"_blank\">https://www.cnblogs.com/BNTang/p/13674486.html</a></li>\n</ul>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202403/2105804-20240327230359239-1102786836.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"实现自定义指令\">实现自定义指令<a title=\"#实现自定义指令\" href=\"#实现自定义指令\"></a></h2>\n<p>好了，介绍了这么多，开干吧，在我的项目中新建了一个文件夹，命名为 <code>Nue-cli</code>，当然这是一个 node 项目，所以需要利用 <code>npm init -y</code> 初始化一下。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202403/2105804-20240327233444423-797067578.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>到此项目初始化完成。接下来创建一个 JS 文件，在 NueCli 文件夹下，新建一个 <code>bin</code> 文件夹，然后在 <code>bin</code> 文件夹下新建一个 <code>index.js</code> 文件。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202403/2105804-20240327233538149-545152257.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>在 <code>index.js</code> 文件中，我编写了一段代码，在头部通过 <code>#! /usr/bin/env node</code> 告诉系统将来这个文件需要在 NodeJS 环境下执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-meta\">#! /usr/bin/env node</span><br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202403/2105804-20240327232954157-1497866908.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>然后在 <code>package.json</code> 文件中，新增一个名为 <code>bin</code> 的 key，这个 Key 的作用是告诉系统，当我执行 <code>nue-cli</code> 这个指令的时候，系统应该去执行哪个文件。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-attr\">&quot;bin&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>  <span class=\"hljs-attr\">&quot;nue-cli&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;./bin/index.js&quot;</span><br><span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202403/2105804-20240327233653784-680883119.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>Key 新增好了之后再通过 <code>npm link</code> 命令将这个指令链接到全局：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202403/2105804-20240327233750441-1165484954.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>这样我们就可以在全局使用这个指令了。为了待会我执行指令的时候能够看到效果，我在 <code>index.js</code> 文件中写了一段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;neo 6666&#x27;</span>);<br></code></pre></td></tr></table></figure>\n<p>然后我在终端中执行 <code>nue-cli</code> 指令，看看效果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202403/2105804-20240327234029588-890545292.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>可以看到，我们的指令已经生效了。</p>\n<p>完成，本篇文章就到这里了，下一篇继续往下，总结一下总体流程其实就几步：</p>\n<p>1.通过 npm init -y 初始化一个项目<br>\n2.在项目中新建一个 bin 文件夹，然后在 bin 文件夹下新建一个 index.js 文件<br>\n3.在 index.js 文件中写入代码，通过 <code>#! /usr/bin/env node</code> 告诉系统这个文件需要在 NodeJS 环境下执行<br>\n4.在 package.json 文件中新增一个 bin 的 key，告诉系统当执行 <code>nue-cli</code> 指令的时候，系统应该去执行哪个文件<br>\n5.通过 npm link 命令将这个指令链接到全局</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231211215004818-977875224.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","next":{"title":"『Echarts』完结","link":"2024/03/24/Web/ECharts/07-『Echarts』完结"},"plink":"http://example.com/2024/03/26/Web/手撕Vue-CLI/01-『手撕Vue-CLI』实现自定义指令/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"正文","title":"正文","index":"2","children":[{"id":"如何实现自定义指令","title":"如何实现自定义指令","index":"2.1"},{"id":"实现自定义指令","title":"实现自定义指令","index":"2.2"}]}],"reading_time":"973 words in 6 min"}