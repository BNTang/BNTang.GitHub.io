{"title":"『Flutter』命名路由","date":"2024-01-05T17:16:23.000Z","date_formatted":{"ll":"Jan 6, 2024","L":"01/06/2024","MM-DD":"01-06"},"link":"2024/01/06/Flutter/24-『Flutter』命名路由","tags":["Flutter"],"updated":"2024-01-09T05:51:10.858Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240106092714292-1438465540.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"1.前言\">1.前言<a title=\"#1.前言\" href=\"#1.前言\"></a></h1>\n<p>在上一篇文章中，我们介绍了如何使用 Flutter 中的导航器进行路由跳转，但是在实际开发中，我们往往会使用命名路由的方式进行跳转，本文将介绍如何使用命名路由进行跳转。</p>\n<h1 id=\"2.命名路由\">2.命名路由<a title=\"#2.命名路由\" href=\"#2.命名路由\"></a></h1>\n<h2 id=\"2.1.命名路由简介\">2.1.命名路由简介<a title=\"#2.1.命名路由简介\" href=\"#2.1.命名路由简介\"></a></h2>\n<p>在 Flutter 中，命名路由（Named Routes）是一种使用预定义名称来管理和访问路由的机制。这种方法使代码更易于理解和维护，特别是在具有多个页面的复杂应用程序中。</p>\n<h2 id=\"2.2.常用属性\">2.2.常用属性<a title=\"#2.2.常用属性\" href=\"#2.2.常用属性\"></a></h2>\n<ol>\n<li><strong>routes</strong>: 在 <code>MaterialApp</code> 或 <code>CupertinoApp</code> 中定义的路由表。它是一个映射，将字符串（即路由的名称）映射到对应的构建器函数。</li>\n<li><strong>onGenerateRoute</strong>: 当通过 <code>Navigator.pushNamed</code> 访问的路由名称在路由表中不存在时，这个回调函数被调用。</li>\n<li><strong>initialRoute</strong>: 应用程序启动时使用的首个路由的名称。</li>\n<li><strong>onUnknownRoute</strong>: 当 <code>onGenerateRoute</code> 也无法生成路由时调用的回调。</li>\n</ol>\n<h2 id=\"2.3.示例\">2.3.示例<a title=\"#2.3.示例\" href=\"#2.3.示例\"></a></h2>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class=\"hljs-keyword\">void</span> main() =&gt; runApp(MyApp());<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>&#123;<br>  <span class=\"hljs-meta\">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class=\"hljs-keyword\">return</span> MaterialApp(<br>      title: <span class=\"hljs-string\">&#x27;Flutter Demo&#x27;</span>,<br>      initialRoute: <span class=\"hljs-string\">&#x27;/second&#x27;</span>,<br>      routes: &#123;<br>        <span class=\"hljs-string\">&#x27;/&#x27;</span>: (context) =&gt; FirstScreen(),<br>        <span class=\"hljs-string\">&#x27;/second&#x27;</span>: (context) =&gt; SecondScreen(),<br>      &#125;,<br>    );<br>  &#125;<br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FirstScreen</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>&#123;<br>  <span class=\"hljs-meta\">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class=\"hljs-keyword\">return</span> Scaffold(<br>      appBar: AppBar(title: Text(<span class=\"hljs-string\">&#x27;First Screen&#x27;</span>)),<br>      body: Center(<br>        child: ElevatedButton(<br>          child: Text(<span class=\"hljs-string\">&#x27;Navigate to second screen&#x27;</span>),<br>          onPressed: () &#123;<br>            Navigator.pushNamed(context, <span class=\"hljs-string\">&#x27;/second&#x27;</span>);<br>          &#125;,<br>        ),<br>      ),<br>    );<br>  &#125;<br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SecondScreen</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>&#123;<br>  <span class=\"hljs-meta\">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class=\"hljs-keyword\">return</span> Scaffold(<br>      appBar: AppBar(title: Text(<span class=\"hljs-string\">&#x27;Second Screen&#x27;</span>)),<br>      body: Center(<br>        child: ElevatedButton(<br>          child: Text(<span class=\"hljs-string\">&#x27;Go back&#x27;</span>),<br>          onPressed: () &#123;<br>            Navigator.pop(context);<br>          &#125;,<br>        ),<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>在这个示例中，MaterialApp 的 routes 属性定义了两个路由：‘/’ 和 ‘/second’。点击按钮时，会使用 Navigator.pushNamed 方法跳转到第二个页面。</p>\n<p>之前导航器的路由跳转示例中，我们使用的是 Navigator.push 方法，它需要传入一个 Route 对象，而 Navigator.pushNamed 方法则不需要传入 Route 对象，只需要传入路由名称即可。</p>\n<blockquote>\n<p>注意：在使用命名路由时，如果没有指定 initialRoute 属性，则默认使用 ‘/’ 作为初始路由。</p>\n</blockquote>\n<p>如上的代码我来分别解释一下：</p>\n<ol>\n<li>initialRoute: ‘/second’，这里指定了初始路由为 ‘/second’，所以应用启动后会直接跳转到第二个页面。(默认显示哪个标识对应的页面)</li>\n<li>routes: <code>&#123;...&#125;</code>，这里定义了两个路由，‘/’ 和 ‘/second’，它们分别对应 FirstScreen 和 SecondScreen。(前面的是一个独一无二的标识，通过这个标识就能找到对应的页面)</li>\n</ol>\n<h1 id=\"3.参考资料\">3.参考资料<a title=\"#3.参考资料\" href=\"#3.参考资料\"></a></h1>\n<ul>\n<li><a href=\"https://docs.flutter.dev/cookbook/navigation/named-routes\" target=\"_blank\">https://docs.flutter.dev/cookbook/navigation/named-routes</a></li>\n</ul>\n<h1 id=\"end\">End<a title=\"#end\" href=\"#end\"></a></h1>\n<ul>\n<li>🐤如果您对本文有任何疑问或想法，请在评论区留言，我将很乐意与您交流。</li>\n<li>🐰您的每一条评论对我都至关重要，我会尽快给予回复。</li>\n<li>🎈如果您觉得这篇文章对您有所启发或帮助，请不吝赞赏、收藏或分享。</li>\n<li>🎁您的每一个动作都是对我创作的最大鼓励和支持。</li>\n<li>👍谢谢您的阅读和陪伴！</li>\n</ul>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231211215004818-977875224.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"『Flutter』导航器","link":"2024/01/06/Flutter/23-『Flutter』导航器"},"next":{"title":"『Flutter』常用组件 表单","link":"2024/01/05/Flutter/22-「Flutter」常用组件 表单"},"plink":"http://example.com/2024/01/06/Flutter/24-『Flutter』命名路由/","toc":[{"id":"1.前言","title":"1.前言","index":"1"},{"id":"2.命名路由","title":"2.命名路由","index":"2","children":[{"id":"2.1.命名路由简介","title":"2.1.命名路由简介","index":"2.1"},{"id":"2.2.常用属性","title":"2.2.常用属性","index":"2.2"},{"id":"2.3.示例","title":"2.3.示例","index":"2.3"}]},{"id":"3.参考资料","title":"3.参考资料","index":"3"},{"id":"end","title":"End","index":"4"}]}