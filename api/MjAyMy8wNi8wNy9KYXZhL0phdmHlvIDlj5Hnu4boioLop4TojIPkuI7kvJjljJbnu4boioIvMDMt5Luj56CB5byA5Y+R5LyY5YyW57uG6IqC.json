{"title":"代码开发优化细节","date":"2023-06-07T15:16:09.000Z","date_formatted":{"ll":"Jun 7, 2023","L":"06/07/2023","MM-DD":"06-07"},"link":"2023/06/07/Java/Java开发细节规范与优化细节/03-代码开发优化细节","tags":["Java开发细节规范与优化细节"],"updated":"2023-06-07T15:19:23.297Z","content":"<h1 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h1>\n<p>?&gt; 代码优化的目标是</p>\n<ul>\n<li>减小代码的体积</li>\n<li>提高代码运行的效率</li>\n</ul>\n<h1 id=\"代码优化细节\">代码优化细节<a title=\"#代码优化细节\" href=\"#代码优化细节\"></a></h1>\n<h2 id=\"尽量指定类、方法的final修饰符\">尽量指定类、方法的final修饰符<a title=\"#尽量指定类、方法的final修饰符\" href=\"#尽量指定类、方法的final修饰符\"></a></h2>\n<p>带有final修饰符的类是不可派生的。在Java核心API中，有许多应用final的例子，例如java.lang.String，整个类都是final的。为类指定final修饰符可以让类不可以被继承，为方法指定final修饰符可以让方法不可以被重写。如果指定了一个类为final，则该类所有的方法都是final的。Java编译器会寻找机会内联所有的final方法，内联对于提升Java运行效率作用重大，具体参见Java运行期优化。此举能够使性能平均提高50% 。</p>\n<h2 id=\"尽量重用对象\">尽量重用对象<a title=\"#尽量重用对象\" href=\"#尽量重用对象\"></a></h2>\n<p>特别是String对象的使用，出现字符串连接时应该使用StringBuilder/StringBuffer代替。由于Java虚拟机不仅要花时间生成对象，以后可能还需要花时间对这些对象进行垃圾回收和处理，因此，生成过多的对象将会给程序的性能带来很大的影响。</p>\n<h2 id=\"尽可能使用局部变量\">尽可能使用局部变量<a title=\"#尽可能使用局部变量\" href=\"#尽可能使用局部变量\"></a></h2>\n<p>调用方法时传递的参数以及在调用中创建的临时变量都保存在栈中速度较快，其他变量，如静态变量、实例变量等，都在堆中创建，速度较慢。另外，栈中创建的变量，随着方法的运行结束，这些内容就没了，不需要额外的垃圾回收。</p>\n<h2 id=\"及时关闭流\">及时关闭流<a title=\"#及时关闭流\" href=\"#及时关闭流\"></a></h2>\n<p>Java编程过程中，进行数据库连接、I/O流操作时务必小心，在使用完毕后，及时关闭以释放资源。因为对这些大对象的操作会造成系统大的开销，稍有不慎，将会导致严重的后果。</p>\n<h2 id=\"尽量减少对变量的重复计算\">尽量减少对变量的重复计算<a title=\"#尽量减少对变量的重复计算\" href=\"#尽量减少对变量的重复计算\"></a></h2>\n<p>明确一个概念，对方法的调用，即使方法中只有一句语句，也是有消耗的，包括创建栈帧、调用方法时保护现场、调用方法完毕时恢复现场等。所以例如下面的操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; list.size(); i++)&#123;...&#125;<br></code></pre></td></tr></table></figure>\n<p>建议替换为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> list.size(); i &lt; length; i++)&#123;...&#125;<br></code></pre></td></tr></table></figure>\n<p>这样，在list.size()很大的时候，就减少了很多的消耗</p>\n<h2 id=\"尽量采用懒加载的策略，即在需要的时候才创建\">尽量采用懒加载的策略，即在需要的时候才创建<a title=\"#尽量采用懒加载的策略，即在需要的时候才创建\" href=\"#尽量采用懒加载的策略，即在需要的时候才创建\"></a></h2>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;aaa&quot;</span>;<br><span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">1</span>)&#123;<br>\tlist.add(str);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>建议替换为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">1</span>)&#123;<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;aaa&quot;</span>;<br>    list.add(str);<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"慎用异常\">慎用异常<a title=\"#慎用异常\" href=\"#慎用异常\"></a></h2>\n<p>异常对性能不利。抛出异常首先要创建一个新的对象，Throwable接口的构造函数调用名为fillInStackTrace()的本地同步方法，fillInStackTrace()方法检查堆栈，收集调用跟踪信息。只要有异常被抛出，Java虚拟机就必须调整调用堆栈，因为在处理过程中创建了一个新的对象。异常只能用于错误处理，不应该用来控制程序流程。</p>\n<h2 id=\"不要在循环中使用try…catch…，应该把其放在最外层\">不要在循环中使用try…catch…，应该把其放在最外层<a title=\"#不要在循环中使用try…catch…，应该把其放在最外层\" href=\"#不要在循环中使用try…catch…，应该把其放在最外层\"></a></h2>\n<h2 id=\"如果能估计到待添加的内容长度，为底层以数组方式实现的集合、工具类指定初始长度\">如果能估计到待添加的内容长度，为底层以数组方式实现的集合、工具类指定初始长度<a title=\"#如果能估计到待添加的内容长度，为底层以数组方式实现的集合、工具类指定初始长度\" href=\"#如果能估计到待添加的内容长度，为底层以数组方式实现的集合、工具类指定初始长度\"></a></h2>\n<p>比如ArrayList、LinkedLlist、StringBuilder、StringBuffer、HashMap、HashSet等等，以StringBuilder为例：</p>\n<ol>\n<li>StringBuilder() // 默认分配16个字符的空间</li>\n<li>StringBuilder(int size) // 默认分配size个字符的空间</li>\n<li>StringBuilder(String str) // 默认分配16个字符+str.length()个字符空间</li>\n</ol>\n<p>可以通过类（这里指的不仅仅是上面的StringBuilder）的来设定它的初始化容量，这样可以明显地提升性能。比如StringBuilder吧，length表示当前的StringBuilder能保持的字符数量。因为当StringBuilder达到最大容量的时候，它会将自身容量增加到当前的2倍再加2，无论何时只要StringBuilder达到它的最大容量，它就不得不创建一个新的字符数组然后将旧的字符数组内容拷贝到新字符数组中—-这是十分耗费性能的一个操作。试想，如果能预估到字符数组中大概要存放5000个字符而不指定长度，最接近5000的2次幂是4096，每次扩容加的2不管，那么：</p>\n<ol>\n<li>在4096 的基础上，再申请8194个大小的字符数组，加起来相当于一次申请了12290个大小的字符数组，如果一开始能指定5000个大小的字符数组，就节省了一倍以上的空间；</li>\n<li>把原来的4096个字符拷贝到新的的字符数组中去。</li>\n</ol>\n<p>这样，既浪费内存空间又降低代码运行效率。所以，给底层以数组实现的集合、工具类设置一个合理的初始化容量是错不了的，这会带来立竿见影的效果。但是，注意，像HashMap这种是以数组+链表实现的集合，别把初始大小和估计的大小设置得一样，因为一个table上只连接一个对象的可能性几乎为0。初始大小建议设置为2的N次幂，如果能估计到有2000个元素，设置成new HashMap(128)、new HashMap(256)都可以。</p>\n<h2 id=\"当复制大量数据时，使用system.arraycopy()命令\">当复制大量数据时，使用System.arraycopy()命令<a title=\"#当复制大量数据时，使用system.arraycopy()命令\" href=\"#当复制大量数据时，使用system.arraycopy()命令\"></a></h2>\n<h2 id=\"乘法和除法使用移位操作\">乘法和除法使用移位操作<a title=\"#乘法和除法使用移位操作\" href=\"#乘法和除法使用移位操作\"></a></h2>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">for</span> (val = <span class=\"hljs-number\">0</span>; val &lt; <span class=\"hljs-number\">100000</span>; val += <span class=\"hljs-number\">5</span>)&#123;<br>    a = val * <span class=\"hljs-number\">8</span>;<br>    b = val / <span class=\"hljs-number\">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>用移位操作可以极大地提高性能，因为在计算机底层，对位的操作是最方便、最快的，因此建议修改为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">for</span> (val = <span class=\"hljs-number\">0</span>; val &lt; <span class=\"hljs-number\">100000</span>; val += <span class=\"hljs-number\">5</span>)&#123;<br>    a = val &lt;&lt; <span class=\"hljs-number\">3</span>;<br>    b = val &gt;&gt; <span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>移位操作虽然快，但是可能会使代码不太好理解，因此最好加上相应的注释。</p>\n<h2 id=\"循环内不要不断创建对象引用\">循环内不要不断创建对象引用<a title=\"#循环内不要不断创建对象引用\" href=\"#循环内不要不断创建对象引用\"></a></h2>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt;= count; i++)&#123;<br>    <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">obj</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这种做法会导致内存中有count份Object对象引用存在，count很大的话，就耗费内存了，建议为改为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">obj</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt;= count; i++) &#123; <br>    obj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>(); <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这样的话，内存中只有一份Object对象引用，每次new Object()的时候，Object对象引用指向不同的Object罢了，但是内存中只有一份，这样就大大节省了内存空间了。</p>\n<h2 id=\"基于效率和类型检查的考虑，应该尽可能使用array，无法确定数组大小时才使用arraylist\">基于效率和类型检查的考虑，应该尽可能使用array，无法确定数组大小时才使用ArrayList<a title=\"#基于效率和类型检查的考虑，应该尽可能使用array，无法确定数组大小时才使用arraylist\" href=\"#基于效率和类型检查的考虑，应该尽可能使用array，无法确定数组大小时才使用arraylist\"></a></h2>\n<h2 id=\"尽量使用hashmap、arraylist、stringbuilder，除非线程安全需要，否则不推荐使用hashtable、vector、stringbuffer，后三者由于使用同步机制而导致了性能开销\">尽量使用HashMap、ArrayList、StringBuilder，除非线程安全需要，否则不推荐使用Hashtable、Vector、StringBuffer，后三者由于使用同步机制而导致了性能开销<a title=\"#尽量使用hashmap、arraylist、stringbuilder，除非线程安全需要，否则不推荐使用hashtable、vector、stringbuffer，后三者由于使用同步机制而导致了性能开销\" href=\"#尽量使用hashmap、arraylist、stringbuilder，除非线程安全需要，否则不推荐使用hashtable、vector、stringbuffer，后三者由于使用同步机制而导致了性能开销\"></a></h2>\n<h2 id=\"不要将数组声明为public-static-final\">不要将数组声明为public static final<a title=\"#不要将数组声明为public-static-final\" href=\"#不要将数组声明为public-static-final\"></a></h2>\n<p>因为这毫无意义，这样只是定义了引用为static final，数组的内容还是可以随意改变的，将数组声明为public更是一个安全漏洞，这意味着这个数组可以被外部类所改变。</p>\n<h2 id=\"尽量在合适的场合使用单例\">尽量在合适的场合使用单例<a title=\"#尽量在合适的场合使用单例\" href=\"#尽量在合适的场合使用单例\"></a></h2>\n<p>使用单例可以减轻加载的负担、缩短加载的时间、提高加载的效率，但并不是所有地方都适用于单例，简单来说，单例主要适用于以下三个方面：</p>\n<ol>\n<li>控制资源的使用，通过线程同步来控制资源的并发访问</li>\n<li>控制实例的产生，以达到节约资源的目的</li>\n<li>控制数据的共享，在不建立直接关联的条件下，让多个不相关的进程或线程之间实现通信</li>\n</ol>\n<h2 id=\"尽量避免随意使用静态变量\">尽量避免随意使用静态变量<a title=\"#尽量避免随意使用静态变量\" href=\"#尽量避免随意使用静态变量\"></a></h2>\n<p>要知道，当某个对象被定义为static的变量所引用，那么gc通常是不会回收这个对象所占有的堆内存的，如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A</span>&#123;<br>\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">B</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">B</span>();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>此时静态变量b的生命周期与A类相同，如果A类不被卸载，那么引用B指向的B对象会常驻内存，直到程序终止</p>\n<h2 id=\"及时清除不再需要的会话\">及时清除不再需要的会话<a title=\"#及时清除不再需要的会话\" href=\"#及时清除不再需要的会话\"></a></h2>\n<p>为了清除不再活动的会话，许多应用服务器都有默认的会话超时时间，一般为30分钟。当应用服务器需要保存更多的会话时，如果内存不足，那么操作系统会把部分数据转移到磁盘，应用服务器也可能根据MRU（最近最频繁使用）算法把部分不活跃的会话转储到磁盘，甚至可能抛出内存不足的异常。如果会话要被转储到磁盘，那么必须要先被序列化，在大规模集群中，对对象进行序列化的代价是很昂贵的。因此，当会话不再需要时，应当及时调用HttpSession的invalidate()方法清除会话。</p>\n<h2 id=\"实现randomaccess接口的集合比如arraylist，应当使用最普通的for循环而不是foreach循环来遍历\">实现RandomAccess接口的集合比如ArrayList，应当使用最普通的for循环而不是foreach循环来遍历<a title=\"#实现randomaccess接口的集合比如arraylist，应当使用最普通的for循环而不是foreach循环来遍历\" href=\"#实现randomaccess接口的集合比如arraylist，应当使用最普通的for循环而不是foreach循环来遍历\"></a></h2>\n<p>这是JDK推荐给用户的。JDK API对于RandomAccess接口的解释是：实现RandomAccess接口用来表明其支持快速随机访问，此接口的主要目的是允许一般的算法更改其行为，从而将其应用到随机或连续访问列表时能提供良好的性能。实际经验表明，实现RandomAccess接口的类实例，假如是随机访问的，使用普通for循环效率将高于使用foreach循环；反过来，如果是顺序访问的，则使用Iterator会效率更高。可以使用类似如下的代码作判断：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">if</span> (list <span class=\"hljs-keyword\">instanceof</span> RandomAccess)&#123; <br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; list.size(); i++)&#123;&#125;<br>&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>\tIterator&lt;?&gt; iterator = list.iterable(); <br>    <span class=\"hljs-keyword\">while</span> (iterator.hasNext())&#123;<br>        iterator.next()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>foreach循环的底层实现原理就是迭代器Iterator，参见Java语法糖1：可变长度参数以及foreach循环原理。所以后半句”反过来，如果是顺序访问的，则使用Iterator会效率更高”的意思就是顺序访问的那些类实例，使用foreach循环去遍历。</p>\n<h2 id=\"使用同步代码块替代同步方法\">使用同步代码块替代同步方法<a title=\"#使用同步代码块替代同步方法\" href=\"#使用同步代码块替代同步方法\"></a></h2>\n<p>这点在多线程模块中的synchronized锁方法块一文中已经讲得很清楚了，除非能确定一整个方法都是需要进行同步的，否则尽量使用同步代码块，避免对那些不需要进行同步的代码也进行了同步，影响了代码执行效率。</p>\n<h2 id=\"将常量声明为static-final，并以大写命名\">将常量声明为static final，并以大写命名<a title=\"#将常量声明为static-final，并以大写命名\" href=\"#将常量声明为static-final，并以大写命名\"></a></h2>\n<p>这样在编译期间就可以把这些内容放入常量池中，避免运行期间计算生成常量的值。另外，将常量的名字以大写命名也可以方便区分出常量与变量</p>\n<h2 id=\"不要创建一些不使用的对象，不要导入一些不使用的类\">不要创建一些不使用的对象，不要导入一些不使用的类<a title=\"#不要创建一些不使用的对象，不要导入一些不使用的类\" href=\"#不要创建一些不使用的对象，不要导入一些不使用的类\"></a></h2>\n<p>这毫无意义，如果代码中出现”The value of the local variable i is not used”、”The import java.util is never used”，那么请删除这些无用的</p>\n<h2 id=\"程序运行过程中避免使用反射\">程序运行过程中避免使用反射<a title=\"#程序运行过程中避免使用反射\" href=\"#程序运行过程中避免使用反射\"></a></h2>\n<p>关于，请参见反射。反射是Java提供给用户一个很强大的功能，功能强大往往意味着效率不高。不建议在程序运行过程中使用尤其是频繁使用反射机制，特别是Method的invoke方法，如果确实有必要，一种建议性的做法是将那些需要通过反射加载的类在项目启动的时候通过反射实例化出一个对象并放入内存—-用户只关心和对端交互的时候获取最快的响应速度，并不关心对端的项目启动花多久时间。</p>\n<h2 id=\"使用数据库连接池和线程池\">使用数据库连接池和线程池<a title=\"#使用数据库连接池和线程池\" href=\"#使用数据库连接池和线程池\"></a></h2>\n<p>这两个池都是用于重用对象的，前者可以避免频繁地打开和关闭连接，后者可以避免频繁地创建和销毁线程</p>\n<h2 id=\"使用带缓冲的输入输出流进行io操作\">使用带缓冲的输入输出流进行IO操作<a title=\"#使用带缓冲的输入输出流进行io操作\" href=\"#使用带缓冲的输入输出流进行io操作\"></a></h2>\n<p>带缓冲的输入输出流，即BufferedReader、BufferedWriter、BufferedInputStream、BufferedOutputStream，这可以极大地提升IO效率</p>\n<h2 id=\"顺序插入和随机访问比较多的场景使用arraylist，元素删除和中间插入比较多的场景使用linkedlist这个，理解arraylist和linkedlist的原理就知道了\">顺序插入和随机访问比较多的场景使用ArrayList，元素删除和中间插入比较多的场景使用LinkedList这个，理解ArrayList和LinkedList的原理就知道了<a title=\"#顺序插入和随机访问比较多的场景使用arraylist，元素删除和中间插入比较多的场景使用linkedlist这个，理解arraylist和linkedlist的原理就知道了\" href=\"#顺序插入和随机访问比较多的场景使用arraylist，元素删除和中间插入比较多的场景使用linkedlist这个，理解arraylist和linkedlist的原理就知道了\"></a></h2>\n<h2 id=\"不要让public方法中有太多的形参\">不要让public方法中有太多的形参<a title=\"#不要让public方法中有太多的形参\" href=\"#不要让public方法中有太多的形参\"></a></h2>\n<p>public方法即对外提供的方法，如果给这些方法太多形参的话主要有两点坏处：</p>\n<ol>\n<li>违反了面向对象的编程思想，Java讲求一切都是对象，太多的形参，和面向对象的编程思想并不契合</li>\n<li>参数太多势必导致方法调用的出错概率增加</li>\n</ol>\n<p>至于这个”太多”指的是多少个，3、4个吧。比如用JDBC写一个insertStudentInfo方法，有10个学生信息字段要插如Student表中，可以把这10个参数封装在一个实体类中，作为insert方法的形参。</p>\n<h2 id=\"字符串变量和字符串常量equals的时候将字符串常量写在前面\">字符串变量和字符串常量equals的时候将字符串常量写在前面<a title=\"#字符串变量和字符串常量equals的时候将字符串常量写在前面\" href=\"#字符串变量和字符串常量equals的时候将字符串常量写在前面\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;123&quot;</span>;<br><span class=\"hljs-keyword\">if</span> (str.equals(<span class=\"hljs-string\">&quot;123&quot;</span>)) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>建议修改为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;123&quot;</span>;<br><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;123&quot;</span>.equals(str))&#123;<br>\t...<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这么做主要是可以避免空指针异常</p>\n<h2 id=\"在java中if-(i-==-1)和if-(1-==-i)是没有区别的，但从阅读习惯上讲，建议使用前者\">在java中if (i == 1)和if (1 == i)是没有区别的，但从阅读习惯上讲，建议使用前者<a title=\"#在java中if-(i-==-1)和if-(1-==-i)是没有区别的，但从阅读习惯上讲，建议使用前者\" href=\"#在java中if-(i-==-1)和if-(1-==-i)是没有区别的，但从阅读习惯上讲，建议使用前者\"></a></h2>\n<p>&quot;if (i == 1)&quot;和&quot;if (1== i)&quot;有没有区别，这就要从C/C++讲起。</p>\n<p>在C/C++中，“if (i == 1)&quot;判断条件成立，是以0与非0为基准的，0表示false，非0表示true，如果有这么一段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">1</span>)&#123;<br>\t...<br>&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>\t...<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>C/C++判断&quot;i==1&quot;不成立，所以以0表示，即false。但是如果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">if</span> (i = <span class=\"hljs-number\">1</span>) &#123; <br>    ... <br>    &#125;<span class=\"hljs-keyword\">else</span>&#123; <br>    ... <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>万一一个不小心，把&quot;if (i == 1)“写成&quot;if (i = 1)”，这样就有问题了。在if之内将i赋值为1，if判断里面的内容非0，返回的就是true了，但是明明i为2，比较的值是1，应该返回的false。这种情况在C/C++的开发中是很可能发生的并且会导致一些难以理解的错误产生，所以，为了避免开发者在if语句中不正确的赋值操作，建议将if语句写为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">1</span> == i) &#123; <br>    ... <br>    &#125;<span class=\"hljs-keyword\">else</span>&#123; <br>    ... <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这样，即使不小心写成了“1 = i”，编译器也可以第一时间检查出来，因为可以对一个变量赋值i为1，但是不能对一个常量赋值1为i。</p>\n<p>但是，在Java中，C/C++这种”if (i = 1)”的语法是不可能出现的，因为一旦写了这种语法，Java就会编译报错”Type mismatch: cannot convert from int to boolean”。但是，尽管Java的”if (i == 1)”和”if (1 == i)”在语义上没有任何区别，但是从阅读习惯上讲，建议使用前者会更好些。</p>\n<h2 id=\"不要对数组使用tostring()方法\">不要对数组使用toString()方法<a title=\"#不要对数组使用tostring()方法\" href=\"#不要对数组使用tostring()方法\"></a></h2>\n<p>看一下对数组使用toString()打印出来的是什么：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span>&#123; <br>    <span class=\"hljs-type\">int</span>[] is = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[]&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>&#125;;<br>\tSystem.out.println(is.toString());<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>结果是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">[I@18a992f<br></code></pre></td></tr></table></figure>\n<p>本意是想打印出数组内容，却有可能因为数组引用is为空而导致空指针异常。不过虽然对数组toString()没有意义，但是对集合toString()是可以打印出集合里面的内容的，因为集合的父类AbstractCollections重写了Object的toString()方法。</p>\n<h2 id=\"不要对超出范围的基本数据类型做向下强制转型\">不要对超出范围的基本数据类型做向下强制转型<a title=\"#不要对超出范围的基本数据类型做向下强制转型\" href=\"#不要对超出范围的基本数据类型做向下强制转型\"></a></h2>\n<p>这绝不会得到想要的结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span>&#123;<br>    <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">l</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">12345678901234L</span>;<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-type\">int</span>)l;<br>    System.out.println(i);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>可能期望得到其中的某几位，但是结果却是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">1942892530<br></code></pre></td></tr></table></figure>\n<p>解释一下。Java中long是8个字节64位的，所以12345678901234在计算机中的表示应该是：</p>\n<p>0000 0000 0000 0000 0000 1011 0011 1010 0111 0011 1100 1110 0010 1111 1111 0010</p>\n<p>一个int型数据是4个字节32位的，从低位取出上面这串二进制数据的前32位是：</p>\n<p>0111 0011 1100 1110 0010 1111 1111 0010</p>\n<p>这串二进制表示为十进制1942892530，所以就是上面的控制台上输出的内容。从这个例子上还能顺便得到两个结论：</p>\n<ol>\n<li>整型默认的数据类型是int，long l = 12345678901234L，这个数字已经超出了int的范围了，所以最后有一个L，表示这是一个long型数。顺便，浮点型的默认类型是double，所以定义float的时候要写成””float f = 3.5f”</li>\n<li>接下来再写一句”int ii = l + i;”会报错，因为long + int是一个long，不能赋值给int</li>\n</ol>\n<h2 id=\"公用的集合类中不使用的数据一定要及时remove掉\">公用的集合类中不使用的数据一定要及时remove掉<a title=\"#公用的集合类中不使用的数据一定要及时remove掉\" href=\"#公用的集合类中不使用的数据一定要及时remove掉\"></a></h2>\n<p>如果一个集合类是公用的（也就是说不是方法里面的属性），那么这个集合里面的元素是不会自动释放的，因为始终有引用指向它们。所以，如果公用集合里面的某些数据不使用而不去remove掉它们，那么将会造成这个公用集合不断增大，使得系统有内存泄露的隐患。</p>\n<h2 id=\"基本数据类型转为字符串效率\"><strong>基本数据类型转为字符串效率</strong><a title=\"#基本数据类型转为字符串效率\" href=\"#基本数据类型转为字符串效率\"></a></h2>\n<p>把一个基本数据类型转为字符串，基本数据类型.toString()是最快的方式、String.valueOf(数据)次之、数据+“”最慢</p>\n<p>把一个基本数据类型转为一般有三种方式，有一个Integer型数据i，可以使用i.toString()、String.valueOf(i)、i+“”三种方式，三种方式的效率如何，看一个测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span>&#123;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">loopTime</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">50000</span>;<br>    <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">startTime</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis(); <br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; loopTime; j++)&#123;<br>\t\t<span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str</span> <span class=\"hljs-operator\">=</span> String.valueOf(i);<br>    &#125;<br>    System.out.println(<span class=\"hljs-string\">&quot;String.valueOf()：&quot;</span> + (System.currentTimeMillis() - startTime) + <span class=\"hljs-string\">&quot;ms&quot;</span>);<br>    startTime = System.currentTimeMillis(); <br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; loopTime; j++)&#123;<br>\t\t<span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str</span> <span class=\"hljs-operator\">=</span> i.toString();<br>\t&#125;<br>    System.out.println(<span class=\"hljs-string\">&quot;Integer.toString()：&quot;</span> + (System.currentTimeMillis() - startTime) + <span class=\"hljs-string\">&quot;ms&quot;</span>);<br>    startTime = System.currentTimeMillis(); <br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; loopTime; j++)&#123;<br>\t\t<span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str</span> <span class=\"hljs-operator\">=</span> i + <span class=\"hljs-string\">&quot;&quot;</span>;<br>\t&#125;<br>\tSystem.out.println(<span class=\"hljs-string\">&quot;i + \\&quot;\\&quot;：&quot;</span> + (System.currentTimeMillis() - startTime) + <span class=\"hljs-string\">&quot;ms&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>运行结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">String.valueOf()：11ms Integer.toString()：5ms i + &quot;&quot;：25ms<br></code></pre></td></tr></table></figure>\n<p>所以以后遇到把一个基本数据类型转为String的时候，优先考虑使用toString()方法。至于为什么，很简单：</p>\n<ol>\n<li>String.valueOf()方法底层调用了Integer.toString()方法，但是会在调用前做空判断</li>\n<li>Integer.toString()方法就不说了，直接调用了</li>\n<li>i + “”底层使用了StringBuilder实现，先用append方法拼接，再用toString()方法获取字符串</li>\n</ol>\n<p>三者对比下来，明显是2最快、1次之、3最慢</p>\n<p>循环体内不要使用&quot;<code>+</code>&quot;进行字符串拼接，而直接使用<code>StringBuilder</code>不断append。</p>\n<p>虚拟机碰到&quot;+&quot;这个操作符对字符串进行拼接的时候，会new出一个StringBuilder，然后调用append方法。</p>\n<p>最后调用toString()方法转换字符串赋值给oriStr对象，即<code>循环多少次</code>，就会<code>new出多少个StringBuilder()</code>来，这对于内存是一种浪费。</p>\n<h2 id=\"使用最有效率的方式去遍历map\">使用最有效率的方式去遍历Map<a title=\"#使用最有效率的方式去遍历map\" href=\"#使用最有效率的方式去遍历map\"></a></h2>\n<p>遍历Map的方式有很多，通常场景下需要的是遍历Map中的Key和Value，那么推荐使用的、效率最高的方式是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span>&#123;<br>    HashMap&lt;String, String&gt; hm = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;String, String&gt;();<br>    hm.put(<span class=\"hljs-string\">&quot;111&quot;</span>, <span class=\"hljs-string\">&quot;222&quot;</span>);Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = hm.entrySet();<br>    Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iter = entrySet.iterator(); <br>    <span class=\"hljs-keyword\">while</span> (iter.hasNext())&#123;<br>    \tMap.Entry&lt;String, String&gt; entry = iter.next();<br>    \tSystem.out.println(entry.getKey() + <span class=\"hljs-string\">&quot;\\t&quot;</span> + entry.getValue());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>如果只是想遍历一下这个Map的key值，那用 <code>Set keySet = hm.keySet();</code> 会比较合适一些</p>\n<h2 id=\"对资源的close()建议分开操作\">对资源的close()建议分开操作<a title=\"#对资源的close()建议分开操作\" href=\"#对资源的close()建议分开操作\"></a></h2>\n<p>比如有这么一段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">try</span>&#123;<br>    XXX.close();<br>    YYY.close();<br>&#125;<span class=\"hljs-keyword\">catch</span> (Exception e)&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>建议修改为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">try</span>&#123; <br>    XXX.close(); <br>&#125;<span class=\"hljs-keyword\">catch</span> (Exception e) &#123; <br>    ... <br>&#125;<br><span class=\"hljs-keyword\">try</span>&#123; <br>    YYY.close(); <br>&#125;<span class=\"hljs-keyword\">catch</span> (Exception e) &#123; <br>    ... <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>虽然有些麻烦，却能避免资源泄露。如果没有修改过的代码，万一XXX.close()抛异常了，那么就进入了cath块中了，YYY.close()不会执行，YYY这块资源就不会回收了，一直占用着，这样的代码一多，是可能引起资源句柄泄露的。而改为上面的写法之后，就保证了无论如何XXX和YYY都会被close掉。</p>\n<h2 id=\"threadlocal使用前或者使用后一定要先remove\">ThreadLocal使用前或者使用后一定要先remove<a title=\"#threadlocal使用前或者使用后一定要先remove\" href=\"#threadlocal使用前或者使用后一定要先remove\"></a></h2>\n<p>线程池技术做的是一个线程重用，这意味着代码运行过程中，一条线程使用完毕，并不会被销毁而是等待下一次的使用。看一下Thread类中，持有ThreadLocal.ThreadLocalMap的引用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/* ThreadLocal values pertaining to this thread. This map is maintained</span><br><span class=\"hljs-comment\"> * by the ThreadLocal class. */</span><br>ThreadLocal.<span class=\"hljs-type\">ThreadLocalMap</span> <span class=\"hljs-variable\">threadLocals</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br></code></pre></td></tr></table></figure>\n<p>线程不销毁意味着上条线程set的ThreadLocal.ThreadLocalMap中的数据依然存在，那么在下一条线程重用这个Thread的时候，很可能get到的是上条线程set的数据而不是自己想要的内容。</p>\n<p>这个问题非常隐晦，一旦出现这个原因导致的错误，没有相关经验或者没有扎实的基础非常难发现这个问题，因此在写代码的时候就要注意这一点，这将给后续减少很多的工作量。</p>\n<h2 id=\"重写方法必须保留@override注解\">重写方法必须保留@Override注解<a title=\"#重写方法必须保留@override注解\" href=\"#重写方法必须保留@override注解\"></a></h2>\n<ul>\n<li>可以清楚地知道这个方法由父类继承而来</li>\n<li>getObject()和get0bject()方法，前者第四个字母是&quot;O&quot;，后者第四个子母是&quot;0&quot;，加了@Override注解可以马上判断是否重写成功</li>\n<li>在抽象类中对方法签名进行修改，实现类会马上报出编译错误</li>\n</ul>\n","prev":{"title":"Java开发中PO、VO、DAO、BO、DTO、POJO 含义","link":"2023/06/08/Java/Java开发细节规范与优化细节/04-Java开发中PO、VO、DAO、BO、DTO、POJO 含义"},"next":{"title":"Java常用重构技巧","link":"2023/06/05/Java/Java开发细节规范与优化细节/02-Java常用重构技巧"},"plink":"http://example.com/2023/06/07/Java/Java开发细节规范与优化细节/03-代码开发优化细节/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"代码优化细节","title":"代码优化细节","index":"2","children":[{"id":"尽量指定类、方法的final修饰符","title":"尽量指定类、方法的final修饰符","index":"2.1"},{"id":"尽量重用对象","title":"尽量重用对象","index":"2.2"},{"id":"尽可能使用局部变量","title":"尽可能使用局部变量","index":"2.3"},{"id":"及时关闭流","title":"及时关闭流","index":"2.4"},{"id":"尽量减少对变量的重复计算","title":"尽量减少对变量的重复计算","index":"2.5"},{"id":"尽量采用懒加载的策略，即在需要的时候才创建","title":"尽量采用懒加载的策略，即在需要的时候才创建","index":"2.6"},{"id":"慎用异常","title":"慎用异常","index":"2.7"},{"id":"不要在循环中使用try…catch…，应该把其放在最外层","title":"不要在循环中使用try…catch…，应该把其放在最外层","index":"2.8"},{"id":"如果能估计到待添加的内容长度，为底层以数组方式实现的集合、工具类指定初始长度","title":"如果能估计到待添加的内容长度，为底层以数组方式实现的集合、工具类指定初始长度","index":"2.9"},{"id":"当复制大量数据时，使用system.arraycopy()命令","title":"当复制大量数据时，使用System.arraycopy()命令","index":"2.10"},{"id":"乘法和除法使用移位操作","title":"乘法和除法使用移位操作","index":"2.11"},{"id":"循环内不要不断创建对象引用","title":"循环内不要不断创建对象引用","index":"2.12"},{"id":"基于效率和类型检查的考虑，应该尽可能使用array，无法确定数组大小时才使用arraylist","title":"基于效率和类型检查的考虑，应该尽可能使用array，无法确定数组大小时才使用ArrayList","index":"2.13"},{"id":"尽量使用hashmap、arraylist、stringbuilder，除非线程安全需要，否则不推荐使用hashtable、vector、stringbuffer，后三者由于使用同步机制而导致了性能开销","title":"尽量使用HashMap、ArrayList、StringBuilder，除非线程安全需要，否则不推荐使用Hashtable、Vector、StringBuffer，后三者由于使用同步机制而导致了性能开销","index":"2.14"},{"id":"不要将数组声明为public-static-final","title":"不要将数组声明为public static final","index":"2.15"},{"id":"尽量在合适的场合使用单例","title":"尽量在合适的场合使用单例","index":"2.16"},{"id":"尽量避免随意使用静态变量","title":"尽量避免随意使用静态变量","index":"2.17"},{"id":"及时清除不再需要的会话","title":"及时清除不再需要的会话","index":"2.18"},{"id":"实现randomaccess接口的集合比如arraylist，应当使用最普通的for循环而不是foreach循环来遍历","title":"实现RandomAccess接口的集合比如ArrayList，应当使用最普通的for循环而不是foreach循环来遍历","index":"2.19"},{"id":"使用同步代码块替代同步方法","title":"使用同步代码块替代同步方法","index":"2.20"},{"id":"将常量声明为static-final，并以大写命名","title":"将常量声明为static final，并以大写命名","index":"2.21"},{"id":"不要创建一些不使用的对象，不要导入一些不使用的类","title":"不要创建一些不使用的对象，不要导入一些不使用的类","index":"2.22"},{"id":"程序运行过程中避免使用反射","title":"程序运行过程中避免使用反射","index":"2.23"},{"id":"使用数据库连接池和线程池","title":"使用数据库连接池和线程池","index":"2.24"},{"id":"使用带缓冲的输入输出流进行io操作","title":"使用带缓冲的输入输出流进行IO操作","index":"2.25"},{"id":"顺序插入和随机访问比较多的场景使用arraylist，元素删除和中间插入比较多的场景使用linkedlist这个，理解arraylist和linkedlist的原理就知道了","title":"顺序插入和随机访问比较多的场景使用ArrayList，元素删除和中间插入比较多的场景使用LinkedList这个，理解ArrayList和LinkedList的原理就知道了","index":"2.26"},{"id":"不要让public方法中有太多的形参","title":"不要让public方法中有太多的形参","index":"2.27"},{"id":"字符串变量和字符串常量equals的时候将字符串常量写在前面","title":"字符串变量和字符串常量equals的时候将字符串常量写在前面","index":"2.28"},{"id":"在java中if-(i-==-1)和if-(1-==-i)是没有区别的，但从阅读习惯上讲，建议使用前者","title":"在java中if (i &#x3D;&#x3D; 1)和if (1 &#x3D;&#x3D; i)是没有区别的，但从阅读习惯上讲，建议使用前者","index":"2.29"},{"id":"不要对数组使用tostring()方法","title":"不要对数组使用toString()方法","index":"2.30"},{"id":"不要对超出范围的基本数据类型做向下强制转型","title":"不要对超出范围的基本数据类型做向下强制转型","index":"2.31"},{"id":"公用的集合类中不使用的数据一定要及时remove掉","title":"公用的集合类中不使用的数据一定要及时remove掉","index":"2.32"},{"id":"基本数据类型转为字符串效率","title":"基本数据类型转为字符串效率","index":"2.33"},{"id":"使用最有效率的方式去遍历map","title":"使用最有效率的方式去遍历Map","index":"2.34"},{"id":"对资源的close()建议分开操作","title":"对资源的close()建议分开操作","index":"2.35"},{"id":"threadlocal使用前或者使用后一定要先remove","title":"ThreadLocal使用前或者使用后一定要先remove","index":"2.36"},{"id":"重写方法必须保留@override注解","title":"重写方法必须保留@Override注解","index":"2.37"}]}],"reading_time":"5394 words in 36 min"}