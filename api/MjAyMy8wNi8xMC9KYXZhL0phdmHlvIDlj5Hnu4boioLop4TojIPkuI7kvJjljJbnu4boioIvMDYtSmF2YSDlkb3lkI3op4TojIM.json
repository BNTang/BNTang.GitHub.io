{"title":"Java 命名规范","date":"2023-06-10T01:58:28.000Z","date_formatted":{"ll":"Jun 10, 2023","L":"06/10/2023","MM-DD":"06-10"},"link":"2023/06/10/Java/Java开发细节规范与优化细节/06-Java 命名规范","tags":["Java开发细节规范与优化细节"],"updated":"2023-06-10T16:18:01.929Z","content":"<h1 id=\"包命名规范\">包命名规范<a title=\"#包命名规范\" href=\"#包命名规范\"></a></h1>\n<p>包(Package) 的作用是将功能相似或相关的类或者接口进行分组管理，便于类的定位和查找，同时也可以使用包来避免类名的冲突和访问控制，使代码更容易维护。通常，包名使用小写英文字母进行命名，并使用 <code>“.”</code> 进行分割，每个被分割的单元只能包含一个 <code>名词</code>。</p>\n<p>一般地，包命名常采用顶级域名作为前缀，例如 com，net，org，edu，gov，cn，io 等，随后紧跟公司/组织/个人名称以及功能模块名称。下面是一些包命名示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.springframework.boot.autoconfigure.cloud<br><span class=\"hljs-keyword\">package</span> org.springframework.boot.util<br><br><span class=\"hljs-keyword\">package</span> org.hibernate.action<br><span class=\"hljs-keyword\">package</span> org.hibernate.cfg<br><br><span class=\"hljs-keyword\">package</span> com.alibaba.druid<br><span class=\"hljs-keyword\">package</span> com.alibaba.druid.filter<br><span class=\"hljs-keyword\">package</span> com.alibaba.nacos.client.config<br><br><span class=\"hljs-keyword\">package</span> com.ramostear.blog.web<br></code></pre></td></tr></table></figure>\n<p>下面是 Oracle Java 的一些常见包命名例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> java.beans<br><span class=\"hljs-keyword\">package</span> java.io<br><span class=\"hljs-keyword\">package</span> java.lang<br><span class=\"hljs-keyword\">package</span> java.net<br><span class=\"hljs-keyword\">package</span> java.util<br><br><span class=\"hljs-keyword\">package</span> javax.annotation<br></code></pre></td></tr></table></figure>\n<h1 id=\"类命名规范\">类命名规范<a title=\"#类命名规范\" href=\"#类命名规范\"></a></h1>\n<p>类(Class) 通常采用 <code>名词</code> 进行命名，且 <code>首字母大写</code>，如果一个类名包含两个以上名词，建议使用 <code>驼峰命名</code>(Camel-Case) 法书写类名, 每个名词 <code>首字母也应该大写</code>。一般地，类名的书写尽量使其保持简单和描述的完整性，因此在书写类名时不建议使用缩写(一些约定俗成的命名除外)。</p>\n<p>例如 Internationalization and Localization 缩写成 i18n, Uniform Resource Identifier 缩写成 URI，Data Access Object 缩写成 DAO，JSON Web Token 缩写成 JWT，HyperText Markup Language 缩写成 HTML 等等。下列是一些常见的类命名示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EmployeeService</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StudentDAO</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OrderItemEntity</span> &#123;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserDTO</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserServiceImpl</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OrderItemController</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>下面是 Oracle Java 中的一些标准命名示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HTMLEditorKit</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ArrayIndexOutOfBoundsException</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">enum</span> Thread.State &#123;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HttpContext</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">ImageObserver</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"接口命名规范\">接口命名规范<a title=\"#接口命名规范\" href=\"#接口命名规范\"></a></h2>\n<p>首先，接口(Interface) 是一种表述某一类型对象 <code>动作</code> 的特殊类；简单来说，接口也是类(不太严谨)，所以，接口的名称的书写也应该符合类名书写规范，<code>首字母应该大写</code>，与普通类名不同的是，接口命名时通常采用 <code>形容词</code> 或 <code>动词</code> 来描述接口的 <code>动作行为</code>。下列是 Oracle Java 中一些标准库的接口使用 <code>形容词</code> 命名示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Closeable</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Cloneable</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Runnable</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt; &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">CompletionService</span>&lt;V&gt; &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Iterable</span>&lt;T&gt; &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">EventListener</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>在 Spring Framework 标准库中，通常采用 <code>名词 + 动词/形容词</code> 的组合方式来命名接口，下列是 Spring Framework 中一些接口命名示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">AfterAdvice</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">TargetClassAware</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">ApplicationContextAware</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">MessageSourceResolvable</span> &#123;   <br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"抽象类命名规范\">抽象类命名规范<a title=\"#抽象类命名规范\" href=\"#抽象类命名规范\"></a></h2>\n<p>抽象类(Abstract Class) 是一种特殊的类，其命名与普通类的命名规范相当。一般地，为了将抽象类与普通类和接口做出区别，提高抽象类的可读性，在命名抽象类时，会以 <code>“Abstract” / “Base”</code> 作为类名的前缀。下面是编程中一些常规的命名示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AbstractRepository</span>&lt;T&gt; &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AbstractController</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BaseDao</span>&lt;T, ID&gt; &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AbstractCommonService</span>&lt;T&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>以下是 Spring Framework 中常见的抽象类示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AbstractAspectJAdvice</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AbstractSingletonProxyFactoryBean</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AbstractBeanFactoryPointcutAdvisor</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AbstractCachingConfiguration</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AbstractContextLoaderInitializer</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"异常类命名规范\">异常类命名规范<a title=\"#异常类命名规范\" href=\"#异常类命名规范\"></a></h2>\n<p>异常类(Exception Class) 也是类的一种，但与普通类命名不同的是，异常类在命名时需要使用 <code>“Exception”</code> 作为其 <code>后缀</code>。下面是常见的异常类命名示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FileNotFoundException</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserAlreadyExistException</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TransactionException</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ClassNotFoundException</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">IllegalArgumentException</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">IndexOutOfBoundsException</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>另外，在 Java 中还有另外一类异常类，它们属于系统异常，这一类异常类的命名使用 <code>“Error”</code> 作为其 <code>后缀</code>，以区分 Exception(编码，环境，操作等异常)。下面是系统异常(非检查异常) 的命名示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">VirtualMachineError</span> &#123;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StackOverflowError</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OutOfMemoryError</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">IllegalAccessError</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NoClassDefFoundError</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NoSuchFieldError</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NoSuchMethodError</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"方法命名规范\">方法命名规范<a title=\"#方法命名规范\" href=\"#方法命名规范\"></a></h1>\n<p>方法(Method) 命名时, 其 <code>首字母应该小写</code>，如果方法签名由多个单词组成，则从第二个单词起，使用驼峰命名法进行书写。一般地，在对方法进行命名时，通常采用 <code>动词 + 名词</code> 的组合，下面是方法命名的一些常见示例。</p>\n<h2 id=\"表述获取\">表述获取<a title=\"#表述获取\" href=\"#表述获取\"></a></h2>\n<p>如果一个方法用于获取某个值，通常使用 <code>“get”</code> 作为其 <code>前缀</code>，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getUserName</span><span class=\"hljs-params\">()</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> List&lt;Integer&gt; <span class=\"hljs-title function_\">getUserIds</span><span class=\"hljs-params\">()</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">getOne</span><span class=\"hljs-params\">()</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"表述查询\">表述查询<a title=\"#表述查询\" href=\"#表述查询\"></a></h2>\n<p>如果方法需要通过查询或筛选的方式获取某个数据，通常使用 <code>“find” / “query”</code> 作为其 <code>前缀</code>，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> List&lt;User&gt; <span class=\"hljs-title function_\">findOne</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> List&lt;Integer&gt; <span class=\"hljs-title function_\">findAll</span><span class=\"hljs-params\">()</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> List&lt;String&gt; <span class=\"hljs-title function_\">queryOrders</span><span class=\"hljs-params\">()</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"表述条件\">表述条件<a title=\"#表述条件\" href=\"#表述条件\"></a></h2>\n<p>如果一个方法需要一些条件参数，则可以使用 <code>“by” / “with”</code> 等字符作为方法名中条件的连接符，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">findByUsername</span><span class=\"hljs-params\">(String username)</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> List&lt;Integer&gt; <span class=\"hljs-title function_\">getUserIdsWithState</span><span class=\"hljs-params\">(<span class=\"hljs-type\">boolean</span> state)</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> List&lt;User&gt; <span class=\"hljs-title function_\">findAllByUsernameOrderByIdDesc</span><span class=\"hljs-params\">(String username)</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"表述设置\">表述设置<a title=\"#表述设置\" href=\"#表述设置\"></a></h2>\n<p>如果一个方法是要设置，插入，修改，删除等操作，应该将对应的 <code>动词</code>(set, insert, update, delete)作为其名词的 <code>前缀</code>，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(User user)</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">update</span><span class=\"hljs-params\">(User user)</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">clearAll</span><span class=\"hljs-params\">()</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"其它规范\">其它规范<a title=\"#其它规范\" href=\"#其它规范\"></a></h2>\n<p>如果一个方法用于获取某组数据的长度或数量，则该方法应该使用 <code>length</code> 或 <code>size</code> 命名；如果方法的返回值为布尔类型(Boolean)，则该方法应该使用 <code>“is”</code> 或 <code>“has”</code> 作为 <code>前缀</code>;</p>\n<p>如果方法用于将一种类型的数据转换为另一种数据数类型，则可以使用 <code>“to”</code> 作为 <code>前缀</code>。</p>\n<p>下面是综合示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">length</span><span class=\"hljs-params\">()</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">()</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isOpen</span><span class=\"hljs-params\">()</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isNotEmpty</span><span class=\"hljs-params\">()</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">hasLength</span><span class=\"hljs-params\">()</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> Set&lt;Integer&gt; <span class=\"hljs-title function_\">mapToSet</span><span class=\"hljs-params\">(Map map)</span> &#123; <br>&#125;<br><span class=\"hljs-keyword\">public</span> UserDto <span class=\"hljs-title function_\">convertTo</span><span class=\"hljs-params\">(User user)</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">(Object obj)</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"变量命名规范\">变量命名规范<a title=\"#变量命名规范\" href=\"#变量命名规范\"></a></h1>\n<p>变量(Variable) 命名包括参数名称，成员变量和局部变量。变量命名通常以 <code>小写字母开头</code>，如果变量名由多个单词构成，则从 <code>第二个单词起</code> <code>首字母需要大写</code>，在变量命名过程中，不建议使用 <code>“_”</code> 作为 <code>前缀</code> 或者 <code>单词之间的分割符号</code>。下面是一些常见的变量命名示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> String nickName;<br><span class=\"hljs-keyword\">private</span> String mobileNumber;<br><span class=\"hljs-keyword\">private</span> Long id;<br><span class=\"hljs-keyword\">private</span> String username;<br><span class=\"hljs-keyword\">private</span> Long orderId;<br><span class=\"hljs-keyword\">private</span> Long orderItemId;<br></code></pre></td></tr></table></figure>\n<h1 id=\"常量命名规范\">常量命名规范<a title=\"#常量命名规范\" href=\"#常量命名规范\"></a></h1>\n<p>一般地，常量名称采用全部大写的英文单词书写，如果常量名称由多个单词组成，则单词之间统一使用 <code>“_”</code> 进行分割，下面是常量命名示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">LOGIN_USER_SESSION_KEY</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;current_login_user&quot;</span>;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">MAX_AGE_VALUE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">120</span>;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">DEFAULT_PAGE_NO</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">MAX_PAGE_SIZE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1000</span>;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">HAS_LICENSE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">IS_CHECKED</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;<br></code></pre></td></tr></table></figure>\n<h1 id=\"枚举命名规范\">枚举命名规范<a title=\"#枚举命名规范\" href=\"#枚举命名规范\"></a></h1>\n<p>枚举(Enum) 类是一种特殊的类，其命名规范遵循普通类的命名约束条件，首字母大写，采用驼峰命名法；枚举类中定义的值的名称遵循常量的命名规范，且枚举值的名称需要与类名有一定的关联性，下面是枚举的一些示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Color</span> &#123;<br>    RED,<br>    YELLOW,<br>    BLUE,<br>    GREEN,<br>    WHITE;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">PhysicalSize</span> &#123;<br>    TINY,<br>    SMALL,<br>    MEDIUM,<br>    LARGE,<br>    HUGE,<br>    GIGANTIC;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>下面是 Oracle Java 标准库中的一个示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">ElementType</span> &#123;<br>    TYPE,<br>    FIELD,<br>    METHOD,<br>    PARAMETER,<br>    CONSTRUCTOR,<br>    LOCAL_VARIABLE,<br>    ANNOTATION_TYPE,<br>    PACKAGE,<br>    TYPE_PARAMETER,<br>    TYPE_USE;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"其它命名规范\">其它命名规范<a title=\"#其它命名规范\" href=\"#其它命名规范\"></a></h1>\n<h2 id=\"数组\">数组<a title=\"#数组\" href=\"#数组\"></a></h2>\n<p>在定义数组时，为了便于阅读，尽量保持以下的书写规范：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span>[] array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-number\">10</span>];<br><span class=\"hljs-type\">int</span>[] idArray = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>&#125;;<br>String[] nameArray = &#123;<span class=\"hljs-string\">&quot;First&quot;</span>, <span class=\"hljs-string\">&quot;Yellow&quot;</span>, <span class=\"hljs-string\">&quot;Big&quot;</span>&#125;<br><br><span class=\"hljs-keyword\">public</span> List&lt;String&gt; <span class=\"hljs-title function_\">getNameById</span><span class=\"hljs-params\">(Integer[] ids)</span> &#123;   <br>&#125;<br><span class=\"hljs-keyword\">public</span> List&lt;String&gt; <span class=\"hljs-title function_\">getNameById</span><span class=\"hljs-params\">(Integer... ids)</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"表述复数或者集合\">表述复数或者集合<a title=\"#表述复数或者集合\" href=\"#表述复数或者集合\"></a></h2>\n<p>如果一个变量用于描述多个数据时，尽量使用 <code>单词</code> 的 <code>复数</code> 形式进行书写，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Collection&lt;Order&gt; orders;<br><span class=\"hljs-type\">int</span>[] values;<br>List&lt;Item&gt; items;<br></code></pre></td></tr></table></figure>\n<p>另外，如果表述的是一个 Map 数据，则应使用 <code>“map”</code> 作为其 <code>后缀</code>，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Map&lt;String,User&gt; userMap;<br>Map&lt;String,List&lt;Object&gt;&gt; listMap;<br></code></pre></td></tr></table></figure>\n<h2 id=\"泛型类\">泛型类<a title=\"#泛型类\" href=\"#泛型类\"></a></h2>\n<p>在书写泛型类时，通常做以下的约定：</p>\n<ul>\n<li>E: 表示 Element，通常用在集合中;</li>\n<li>ID: 用于表示对象的唯一标识符类型;</li>\n<li>T: 表示 Type(类型)，通常指代类;</li>\n<li>K: 表示 Key(键), 通常用于 Map 中;</li>\n<li>V: 表示 Value(值), 通常用于 Map 中，与 K 结对出现;</li>\n<li>N: 表示 Number, 通常用于表示数值类型;</li>\n<li>?: 表示不确定的 Java 类型;</li>\n<li>X: 用于表示异常;</li>\n<li>U, S: 表示任意的类型;</li>\n</ul>\n<p>下面是泛型类的书写示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HashSet</span>&lt;E&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AbstractSet</span>&lt;E&gt; &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HashMap</span>&lt;K, V&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AbstractMap</span>&lt;K, V&gt; &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ThreadLocal</span>&lt;T&gt; &#123;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Container</span>&lt;K,V&gt; &#123;<br>    <span class=\"hljs-keyword\">private</span> K key;<br>    <span class=\"hljs-keyword\">private</span> V value;<br><br>    Container(K key, V value) &#123;<br>        <span class=\"hljs-built_in\">this</span>.key = key;<br>        <span class=\"hljs-built_in\">this</span>.value = value;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Functor</span>&lt;T, X <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Throwable</span>&gt; &#123;<br>    T <span class=\"hljs-title function_\">val</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> X;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">BaseRepository</span>&lt;T,ID&gt; &#123;<br>    T <span class=\"hljs-title function_\">findById</span><span class=\"hljs-params\">(ID id)</span>;<br><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">update</span><span class=\"hljs-params\">(T t)</span>;<br><br>    List&lt;T&gt; <span class=\"hljs-title function_\">findByIds</span><span class=\"hljs-params\">(ID... ids)</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; List&lt;T&gt; <span class=\"hljs-title function_\">methodName</span><span class=\"hljs-params\">(Class&lt;T&gt; clz)</span> &#123;<br>    List&lt;T&gt; dataList = getByClz(clz);<br>    <span class=\"hljs-keyword\">return</span> dataList;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"接口实现类\">接口实现类<a title=\"#接口实现类\" href=\"#接口实现类\"></a></h2>\n<p>为了便于阅读，在通常情况下，建议接口实现类使用 <code>“Impl”</code> 作为 <code>后缀</code>，不建议使用大写的 <code>“I”</code> 作为接口 <code>前缀</code>，下面是接口和接口实现类的书写示例。</p>\n<p>推荐写法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">OrderService</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OrderServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">OrderService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>不建议的写法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">IOrderService</span> &#123;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OrderService</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">IOrderService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"测试类和测试方法\">测试类和测试方法<a title=\"#测试类和测试方法\" href=\"#测试类和测试方法\"></a></h2>\n<p>在项目中，测试类采用被测试业务模块 <code>名/被测试接口/被测试类</code> + <code>“Test”</code> 的方法进行书写，测试类中的测试函数采用 <code>“test”</code> + <code>用例操作_状态</code> 的组合方式进行书写，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserServiceTest</span> &#123;<br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testFindByUsernameAndPassword</span><span class=\"hljs-params\">()</span> &#123;<br>  &#125;<br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUsernameExist_notExist</span><span class=\"hljs-params\">()</span> &#123;<br>  &#125;<br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testDeleteById_isOk</span><span class=\"hljs-params\">()</span> &#123;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"扩展：速记-java-开发中的各种-o\">扩展：速记 Java 开发中的各种 O<a title=\"#扩展：速记-java-开发中的各种-o\" href=\"#扩展：速记-java-开发中的各种-o\"></a></h1>\n<p>最后，通过一张表和图快速对 Java 中的 BO, DTO, DAO, PO, POJO, VO 之间的含义，区别以及联系进行梳理。</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th>名称</th>\n<th>使用范围</th>\n<th>解释说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>BO</td>\n<td>用于Service,Manager,Business等业务相关类的命名</td>\n<td>Business Object业务处理对象，主要作用是把业务逻辑封装成一个对象。</td>\n</tr>\n<tr>\n<td>DTO</td>\n<td>经过加工后的PO对象，其内部属性可能增加或减少</td>\n<td>Data Transfer Object数据传输对象，主要用于远程调用等需要大量传输数据的地方，例如，可以将一个或多个PO类的部分或全部属性封装为DTO进行传输</td>\n</tr>\n<tr>\n<td>DAO</td>\n<td>用于对数据库进行读写操作的类进行命名</td>\n<td>Data Access Object数据访问对象，主要用来封装对数据库的访问，通过DAO可以将POJO持久化为PO，也可以利用PO封装出VO和DTO</td>\n</tr>\n<tr>\n<td>PO</td>\n<td>Bean,Entity等类的命名</td>\n<td>Persistant Object持久化对象，数据库表中的数据在Java对象中的映射状态，可以简单的理解为一个PO对象即为数据库表中的一条记录</td>\n</tr>\n<tr>\n<td>POJO</td>\n<td>POJO是DO/DTO/BO/VO的统称</td>\n<td>Plain Ordinary Java Object 简单Java对象，它是一个简单的普通Java对象，禁止将类命名为XxxxPOJO</td>\n</tr>\n<tr>\n<td>VO</td>\n<td>通常是视图控制层和模板引擎之间传递的数据对象</td>\n<td>Value Object 值对象，主要用于视图层，视图控制器将视图层所需的属性封装成一个对象，然后用一个VO对象在视图控制器和视图之间进行数据传输。</td>\n</tr>\n<tr>\n<td>AO</td>\n<td>应用层对象</td>\n<td>Application Object，在Web层与Service层之间抽象的复用对象模型，很少用。</td>\n</tr>\n</tbody>\n</table></div></div><p>下面将通过一张图来理解上述几种 O 之间相互转换的关系：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202306/2105804-20230610134052221-25499234.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"项目-已完成","link":"2023/06/10/项目/01-项目-已完成"},"next":{"title":"常量接口 vs 常量类 vs 枚举区别","link":"2023/06/09/Java/Java开发细节规范与优化细节/05-常量接口 vs 常量类 vs 枚举区别"},"plink":"http://example.com/2023/06/10/Java/Java开发细节规范与优化细节/06-Java 命名规范/","toc":[{"id":"包命名规范","title":"包命名规范","index":"1"},{"id":"类命名规范","title":"类命名规范","index":"2","children":[{"id":"接口命名规范","title":"接口命名规范","index":"2.1"},{"id":"抽象类命名规范","title":"抽象类命名规范","index":"2.2"},{"id":"异常类命名规范","title":"异常类命名规范","index":"2.3"}]},{"id":"方法命名规范","title":"方法命名规范","index":"3","children":[{"id":"表述获取","title":"表述获取","index":"3.1"},{"id":"表述查询","title":"表述查询","index":"3.2"},{"id":"表述条件","title":"表述条件","index":"3.3"},{"id":"表述设置","title":"表述设置","index":"3.4"},{"id":"其它规范","title":"其它规范","index":"3.5"}]},{"id":"变量命名规范","title":"变量命名规范","index":"4"},{"id":"常量命名规范","title":"常量命名规范","index":"5"},{"id":"枚举命名规范","title":"枚举命名规范","index":"6"},{"id":"其它命名规范","title":"其它命名规范","index":"7","children":[{"id":"数组","title":"数组","index":"7.1"},{"id":"表述复数或者集合","title":"表述复数或者集合","index":"7.2"},{"id":"泛型类","title":"泛型类","index":"7.3"},{"id":"接口实现类","title":"接口实现类","index":"7.4"},{"id":"测试类和测试方法","title":"测试类和测试方法","index":"7.5"}]},{"id":"扩展：速记-java-开发中的各种-o","title":"扩展：速记 Java 开发中的各种 O","index":"8"}],"reading_time":"3046 words in 20 min"}