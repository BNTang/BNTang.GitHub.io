{"title":"uni-app-网络请求","date":"2023-12-17T06:25:20.000Z","date_formatted":{"ll":"Dec 17, 2023","L":"12/17/2023","MM-DD":"12-17"},"link":"2023/12/17/Uniapp/18-uni-app-网络请求","tags":["Uniapp"],"updated":"2023-12-17T09:39:14.712Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231203182056274-624091530.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h1>\n<ul>\n<li>经过上个章节的介绍，大家可以了解到 uni-app-pinia存储数据的基本使用方法</li>\n<li>那本章节来给大家介绍一下 uni-app-网络请求 的基本使用方法</li>\n</ul>\n<h1 id=\"步入正题\">步入正题<a title=\"#步入正题\" href=\"#步入正题\"></a></h1>\n<ul>\n<li>首先我们打开官方文档，我先带着大家看一下官方文档的介绍：<a href=\"https://uniapp.dcloud.net.cn/api/request/request.html\" target=\"_blank\">https://uniapp.dcloud.net.cn/api/request/request.html</a></li>\n<li>从官方文档中我们可以看到，可以通过 <code>uni.request(OBJECT)</code> 来发起网络请求</li>\n</ul>\n<p>好，那么废话不多说，我们直接来看一下代码，搭建一个普通模板的项目，自行去搭建，大家都有相关的经验了，我就不多说了。</p>\n<p>在首页页面，编写两个按钮分别发送 get 请求和 post 请求，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>\t&lt;view&gt;<br>\t\t&lt;button type=&quot;primary&quot; @click=&quot;reqGetFn&quot;&gt;发送Get请求&lt;/button&gt;<br>\t\t&lt;button type=&quot;primary&quot; @click=&quot;reqPostFn&quot;&gt;发送Post请求&lt;/button&gt;<br>\t&lt;/view&gt;<br>&lt;/template&gt;<br><br>&lt;script setup&gt;<br>\tfunction reqGetFn() &#123;<br>\t\tuni.request(&#123;<br>\t\t\turl: &#x27;https://jsonplaceholder.typicode.com/posts&#x27;,<br>\t\t\tdata: &#123;<br>\t\t\t\ttext: &#x27;BNTang&#x27;<br>\t\t\t&#125;,<br>\t\t\tmethod: &quot;GET&quot;,<br>\t\t\theader: &#123;<br>\t\t\t\t// 自定义请求头信息<br>\t\t\t\t&#x27;custom-header&#x27;: &#x27;hello&#x27;<br>\t\t\t&#125;,<br>\t\t\tsuccess: (res) =&gt; &#123;<br>\t\t\t\tconsole.log(res);<br>\t\t\t\tconsole.log(res.data);<br>\t\t\t&#125;<br>\t\t&#125;);<br>\t&#125;<br><br>\tfunction reqPostFn() &#123;<br>\t\tuni.request(&#123;<br>\t\t\turl: &#x27;https://jsonplaceholder.typicode.com/posts&#x27;,<br>\t\t\tdata: &#123;<br>\t\t\t\ttext: &#x27;BNTang&#x27;<br>\t\t\t&#125;,<br>\t\t\tmethod: &quot;POST&quot;,<br>\t\t\theader: &#123;<br>\t\t\t\t// 自定义请求头信息<br>\t\t\t\t&#x27;custom-header&#x27;: &#x27;hello&#x27;<br>\t\t\t&#125;,<br>\t\t\tsuccess: (res) =&gt; &#123;<br>\t\t\t\tconsole.log(res);<br>\t\t\t\tconsole.log(res.data);<br>\t\t\t&#125;<br>\t\t&#125;);<br>\t&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>代码中，通过 <code>uni.request(OBJECT)</code> 来发起网络请求，<code>OBJECT</code> 是一个对象，其属性有：</li>\n<li><code>url</code>：开发者服务器接口地址</li>\n<li><code>data</code>：请求的参数</li>\n<li><code>method</code>：请求方法，有效值：<code>GET</code>，<code>POST</code>，<code>PUT</code>，<code>DELETE</code>，<code>CONNECT</code>，<code>HEAD</code>，<code>OPTIONS</code>，<code>TRACE</code>，<code>UPLOAD</code>，比较常用的是 <code>GET</code> 和 <code>POST</code></li>\n<li><code>header</code>：自定义请求头信息</li>\n<li><code>success</code>：接口调用成功的回调函数</li>\n<li><code>fail</code>：接口调用失败的回调函数</li>\n</ul>\n<p>好，我们来运行一下，看一下效果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231217173320304-1679916389.gif\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>通过如上的示例，我觉得大家唯一有疑问的可能就是这个请求地址了，这个请求地址是我在网上搜索的一个在线的接口，可以用于测试学习使用：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231217173428812-498029689.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>我这里使用的是 JSON Placeholder：<a href=\"https://jsonplaceholder.typicode.com\" target=\"_blank\">https://jsonplaceholder.typicode.com</a></p>\n<h1 id=\"封装网络请求\">封装网络请求<a title=\"#封装网络请求\" href=\"#封装网络请求\"></a></h1>\n<ul>\n<li>通过如上的示例，我们可以看到，通过 <code>uni.request(OBJECT)</code> 来发起网络请求，是非常简单的，只需要传入相关的参数即可</li>\n<li>但是，我们在实际开发中，肯定是需要封装一下的，这样才能更好的使用，那么我们来封装一下</li>\n</ul>\n<p>新建一个 tools 文件夹，然后在 tools 文件夹下新建一个 network.js 文件，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ITRequest</span>&#123;<br>\t<span class=\"hljs-title function_\">request</span>(<span class=\"hljs-params\">url, method, data</span>)&#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>)=&gt;</span>&#123;<br>\t\t\tuni.<span class=\"hljs-title function_\">request</span>(&#123;<br>\t\t\t\t<span class=\"hljs-attr\">url</span>: url,<br>\t\t\t\t<span class=\"hljs-attr\">method</span>: method,<br>\t\t\t\t<span class=\"hljs-attr\">data</span>: data,<br>\t\t\t\t<span class=\"hljs-attr\">timeout</span>: <span class=\"hljs-number\">3000</span>,<br>\t\t\t\t<span class=\"hljs-attr\">success</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>)&#123;<br>\t\t\t\t\t<span class=\"hljs-title function_\">resolve</span>(res.<span class=\"hljs-property\">data</span>);<br>\t\t\t\t&#125;,<br>\t\t\t\t<span class=\"hljs-attr\">fail</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>)&#123;<br>\t\t\t\t\t<span class=\"hljs-title function_\">reject</span>(err);<br>\t\t\t\t&#125;<br>\t\t\t&#125;)<br>\t\t&#125;)<br>\t&#125;<br>\t<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\">url, data</span>)&#123;<br>\t\t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">request</span>(url, <span class=\"hljs-string\">&quot;GET&quot;</span>, data);<br>\t&#125;,<br>\t<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-params\">url, data</span>)&#123;<br>\t\t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">request</span>(url, <span class=\"hljs-string\">&quot;POST&quot;</span>, data);<br>\t&#125;,<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ITRequest</span>();<br></code></pre></td></tr></table></figure>\n<p>我封装好了，大家直接用即可非常的简单，因为在之前我也封装过对应原生的与 axios 等等相关的，都是一样的，好了本文就先介绍到这里，下一篇我再来给大家写一个项目(苹果计算器)，给这个系列画上一个句号。</p>\n<h1 id=\"end\">End<a title=\"#end\" href=\"#end\"></a></h1>\n<ul>\n<li>如果你有任何问题或建议，欢迎在下方留言，我会尽快回复</li>\n<li>如果你觉得本文对你有帮助，欢迎点赞、收藏，你的支持是我写作的最大动力</li>\n</ul>\n<blockquote>\n<p><a href=\"https://cloud.tencent.com/developer/article/2366050?from_column=20421&amp;from=20421\" target=\"_blank\">我正在参与2023腾讯技术创作特训营第四期有奖征文，快来和我瓜分大奖！</a></p>\n</blockquote>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202311/2105804-20231129232539490-1458223711.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"uni-app-自定义组件","link":"2023/12/17/Uniapp/19-uni-app-自定义组件"},"next":{"title":"uni-app-pinia存储数据","link":"2023/12/17/Uniapp/17-uni-app-pinia存储数据"},"plink":"http://example.com/2023/12/17/Uniapp/18-uni-app-网络请求/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"步入正题","title":"步入正题","index":"2"},{"id":"封装网络请求","title":"封装网络请求","index":"3"},{"id":"end","title":"End","index":"4"}],"reading_time":"938 words in 6 min"}