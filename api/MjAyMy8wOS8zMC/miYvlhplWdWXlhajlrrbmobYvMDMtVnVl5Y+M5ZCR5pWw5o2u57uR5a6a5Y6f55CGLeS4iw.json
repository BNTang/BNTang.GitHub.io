{"title":"Vue双向数据绑定原理-下","date":"2023-09-30T12:43:48.000Z","date_formatted":{"ll":"Sep 30, 2023","L":"09/30/2023","MM-DD":"09-30"},"link":"2023/09/30/手写Vue全家桶/03-Vue双向数据绑定原理-下","tags":["手写Vue全家桶"],"updated":"2023-10-03T02:44:59.010Z","content":"<p>Vue双向数据绑定原理-下这一篇文章主要讲解Vue双向数据绑定的原理，主要是通过Object.defineProperty()来实现的，这里我们手写Vue双向数据绑定的原理。</p>\n<p>首先我提出一个需求，我的需求是，<code>快速监听对象中所有属性的变化</code>。</p>\n<p>首先得要有一个对象，对象的定义代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&lt;script&gt;<br>    <span class=\"hljs-keyword\">let</span> obj = &#123;<br>        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;BNTang&#x27;</span>,<br>        <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">33</span><br>    &#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<p>然后我们需要监听这个对象中所有属性的变化，最最最简单的做法如下，这里我们可以使用<code>Object.defineProperty()</code>来实现，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(obj, <span class=\"hljs-string\">&#x27;name&#x27;</span>, &#123;<br>    <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;BNTang&#x27;</span>;<br>    &#125;,<br>    <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-params\">newValue</span>) &#123;<br>    &#125;<br>&#125;);<br><br><span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(obj, <span class=\"hljs-string\">&#x27;age&#x27;</span>, &#123;<br>    <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">18</span>;<br>    &#125;,<br>    <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-params\">newValue</span>) &#123;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<p>这样我们就可以监听到对象中所有属性的变化了，但是这样写的话，代码量太大了，如果有100个属性，那么就要写100次，这样的话，代码量太大了，所以我们需要写一个函数来实现这个功能（例如自定义类）。</p>\n<p>博主这里采用的是自定义类的方式来实现，首先定义一个类，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Observer</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>只要将需要监听的那个对象传递给Observer这个类，这个类就可以快速的给传入的对象的所有属性都添加get/set方法, 该类的主要功能就是给传入的对象的所有属性都添加get/set方法。</p>\n<p>首先我定义了一个构造函数，绑定了一个形参，就是需要监听的对象，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">data</span>) &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>在然后我定义了一个 observer 方法，将需要监听的对象传递给 observer 方法，遍历取出传入对象的所有属性，给遍历到的属性都增加get/set方法，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title function_\">observer</span>(<span class=\"hljs-params\">obj</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (obj &amp;&amp; <span class=\"hljs-keyword\">typeof</span> obj === <span class=\"hljs-string\">&#x27;object&#x27;</span>) &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> obj) &#123;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>在 for 循环中，我使用了 defineReactive 方法（自定义一个方法单独来处理），该方法的作用是给传入的对象的所有属性都添加get/set方法，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title function_\">defineReactive</span>(<span class=\"hljs-params\">obj, attr, value</span>) &#123;<br>    <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(obj, attr, &#123;<br>        <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\"></span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> value;<br>        &#125;,<br>        <span class=\"hljs-attr\">set</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">newValue</span>) =&gt;</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (value !== newValue) &#123;<br>                value = newValue;<br>                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;监听到数据的变化, 需要去更新UI&#x27;</span>);<br>            &#125;<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>好了，现在我们已经定义了一个类，该类的主要功能就是给传入的对象的所有属性都添加get/set方法，那么我们就可以使用这个类了（Test 阶段），代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Observer</span>(obj);<br>obj.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&#x27;Example&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202309/2105804-20230930210837667-657899088.png\" alt=\"image-20230930210837470\" loading=\"lazy\" class=\"φbp\"></p>\n<p>查看打印结果，可以看到，我们已经监听到了数据的变化，但是这里有一个问题，就是我们只能监听到对象中已经存在的属性的变化，不能监听对象中属性的对象的属性的变化，例如下面的对象代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> obj = &#123;<br>    <span class=\"hljs-attr\">name</span>: &#123;<span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&#x27;abc&#x27;</span>&#125;,<br>    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">33</span><br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>就是对象中的属性值又是一个对象，而这个属性的对象的属性值发生改变，我们自定义的 Observer 是无法进行监听到的。所以我们需要对这个问题进行处理(如果属性的取值又是一个对象, 那么也需要给这个对象的所有属性添加get/set方法)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">observer</span>(value);<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202309/2105804-20230930211955192-232853371.png\" alt=\"image-20230930211954721\" loading=\"lazy\" class=\"φbp\"></p>\n<p>测试一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">obj.<span class=\"hljs-property\">name</span>.<span class=\"hljs-property\">a</span> = <span class=\"hljs-string\">&#x27;Example&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202309/2105804-20230930212158302-1833793100.png\" alt=\"image-20230930212158329\" loading=\"lazy\" class=\"φbp\"></p>\n<p>可以看到，我们已经可以监听到对象中属性的对象的属性值的变化了。</p>\n<p>但是这里还有一个问题，就是如果对象中的属性值是一个基本数据类型，我们在给这个对象绑定完毕get/set方法之后，再给这个对象赋值的时候, 赋值成了引用类型, 新赋值的属性的对象的值是不会被监听到的。例如下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&lt;script&gt;<br>    <span class=\"hljs-keyword\">let</span> obj = &#123;<br>        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;BNTang&#x27;</span>,<br>        <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">33</span><br>    &#125;;<br><br>    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Observer</span> &#123;<br>        <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">data</span>) &#123;<br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">observer</span>(data);<br>        &#125;<br><br>        <span class=\"hljs-title function_\">observer</span>(<span class=\"hljs-params\">obj</span>) &#123;<br>            <span class=\"hljs-keyword\">if</span> (obj &amp;&amp; <span class=\"hljs-keyword\">typeof</span> obj === <span class=\"hljs-string\">&#x27;object&#x27;</span>) &#123;<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> obj) &#123;<br>                    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">defineReactive</span>(obj, key, obj[key]);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class=\"hljs-title function_\">defineReactive</span>(<span class=\"hljs-params\">obj, attr, value</span>) &#123;<br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">observer</span>(value);<br>            <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(obj, attr, &#123;<br>                <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\"></span>) &#123;<br>                    <span class=\"hljs-keyword\">return</span> value;<br>                &#125;,<br>                <span class=\"hljs-attr\">set</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">newValue</span>) =&gt;</span> &#123;<br>                    <span class=\"hljs-keyword\">if</span> (value !== newValue) &#123;<br>                        value = newValue;<br>                        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;监听到数据的变化, 需要去更新UI&#x27;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;)<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Observer</span>(obj);<br>    obj.<span class=\"hljs-property\">name</span> = &#123;<span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&#x27;abc&#x27;</span>&#125;;<br>    obj.<span class=\"hljs-property\">name</span>.<span class=\"hljs-property\">a</span> = <span class=\"hljs-string\">&#x27;BNTang&#x27;</span>;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231002100148714-1358979172.png\" alt=\"image-20231002100147828\" loading=\"lazy\" class=\"φbp\"></p>\n<p>可以看到，只能监听到对象属性值初始化的时候的变化，不能监听到对象属性值重新赋值的为对象的属性值的变化。</p>\n<p>所以我们需要对这个问题进行处理，我们需要在给对象属性值重新赋值的时候，给这个对象属性值重新绑定get/set方法(如果给属性赋值的新值又是一个对象, 那么也需要给这个对象的所有属性添加get/set方法)，代码如下：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231002100635009-48364003.png\" alt=\"image-20231002100634235\" loading=\"lazy\" class=\"φbp\"></p>\n<p>运行结果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202310/2105804-20231002100655975-479895156.png\" alt=\"image-20231002100655409\" loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"手撕Vue-构建Vue实例","link":"2023/10/14/手写Vue全家桶/04-手撕Vue-构建Vue实例"},"next":{"title":"Vue双向数据绑定原理-中","link":"2023/09/30/手写Vue全家桶/02-Vue双向数据绑定原理-中"},"plink":"http://example.com/2023/09/30/手写Vue全家桶/03-Vue双向数据绑定原理-下/","reading_time":"1332 words in 9 min"}