{"title":"Dart-数据类型","date":"2023-12-12T16:06:48.000Z","date_formatted":{"ll":"Dec 13, 2023","L":"12/13/2023","MM-DD":"12-13"},"link":"2023/12/13/Flutter/04-Dart-数据类型","tags":["Dart"],"updated":"2023-12-26T02:15:21.659Z","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231213000811186-1364260366.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h1>\n<ul>\n<li>在 Dart 中，数据类型是编程的基础概念</li>\n<li>用于定义变量或函数可以处理的数据的种类</li>\n</ul>\n<p>Dart 是一种 <code>静态类型</code> 语言，支持以下主要数据类型：</p>\n<h1 id=\"dart-在线运行平台\">Dart 在线运行平台<a title=\"#dart-在线运行平台\" href=\"#dart-在线运行平台\"></a></h1>\n<p>重新推荐一下 Dart 在线运行平台：<a href=\"https://dart.dev\" target=\"_blank\">https://dart.dev</a> 这个比较好用，更准确，更专业。</p>\n<h1 id=\"dart-中的数据类型\">Dart 中的数据类型<a title=\"#dart-中的数据类型\" href=\"#dart-中的数据类型\"></a></h1>\n<h2 id=\"基本数据类型\">基本数据类型<a title=\"#基本数据类型\" href=\"#基本数据类型\"></a></h2>\n<h3 id=\"数值类型\">数值类型<a title=\"#数值类型\" href=\"#数值类型\"></a></h3>\n<ul>\n<li><code>int</code>：用于表示整数值</li>\n<li><code>double</code>：用于表示双精度浮点数</li>\n</ul>\n<h3 id=\"布尔类型\">布尔类型<a title=\"#布尔类型\" href=\"#布尔类型\"></a></h3>\n<ul>\n<li><code>bool</code>：表示布尔值，即 <code>true</code> 或 <code>false</code></li>\n</ul>\n<h3 id=\"字符串\">字符串<a title=\"#字符串\" href=\"#字符串\"></a></h3>\n<ul>\n<li><code>String</code>：用于表示一系列字符</li>\n</ul>\n<p>我们来看一下代码：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">void</span> main() &#123;<br>  <span class=\"hljs-comment\">// 整数, 也就是没有小数点的数字</span><br>  <span class=\"hljs-built_in\">int</span> age = <span class=\"hljs-number\">30</span>;<br>  <span class=\"hljs-built_in\">print</span>(age);<br>  <span class=\"hljs-built_in\">print</span>(age.runtimeType);<br>  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;=================&quot;</span>);<br><br>  <span class=\"hljs-comment\">// 双精度浮点数, 也就是小数</span><br>  <span class=\"hljs-built_in\">double</span> height = <span class=\"hljs-number\">1.80</span>;<br>  <span class=\"hljs-built_in\">print</span>(height);<br>  <span class=\"hljs-built_in\">print</span>(height.runtimeType);<br>  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;=================&quot;</span>);<br><br>  <span class=\"hljs-comment\">// 布尔值, true 或 false，不能是 0 或 1</span><br>  <span class=\"hljs-built_in\">bool</span> isAdult = <span class=\"hljs-keyword\">true</span>;<br>  <span class=\"hljs-built_in\">print</span>(isAdult);<br>  <span class=\"hljs-built_in\">print</span>(isAdult.runtimeType);<br>  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;=================&quot;</span>);<br><br>  <span class=\"hljs-comment\">// 字符串，可以是单引号，也可以是双引号</span><br>  <span class=\"hljs-built_in\">String</span> name = <span class=\"hljs-string\">&#x27;Alice&#x27;</span>;<br>  <span class=\"hljs-built_in\">print</span>(name);<br>  <span class=\"hljs-built_in\">print</span>(name.runtimeType);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">30<br>int<br>=================<br>1.8<br>double<br>=================<br>true<br>bool<br>=================<br>Alice<br>String<br></code></pre></td></tr></table></figure>\n<h2 id=\"高级数据类型\">高级数据类型<a title=\"#高级数据类型\" href=\"#高级数据类型\"></a></h2>\n<h3 id=\"列表（list）\">列表（List）<a title=\"#列表（list）\" href=\"#列表（list）\"></a></h3>\n<ul>\n<li>类似于数组，用于表示一系列有序的对象</li>\n</ul>\n<h3 id=\"集合（set）\">集合（Set）<a title=\"#集合（set）\" href=\"#集合（set）\"></a></h3>\n<ul>\n<li>用于表示一组无序且唯一的对象</li>\n</ul>\n<h3 id=\"映射（map）\">映射（Map）<a title=\"#映射（map）\" href=\"#映射（map）\"></a></h3>\n<ul>\n<li>表示键值对的集合，其中每个键映射到一个值</li>\n</ul>\n<p>我们来看一下代码：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">void</span> main() &#123;<br>  <span class=\"hljs-comment\">// 列表, 也就是数组, 有序的对象, 可以重复, &lt;int&gt; 表示列表中的元素类型为 int, 也就是整数, 也可以是其他类型, 比如 &lt;String&gt; 表示列表中的元素类型为 String, 也就是字符串, 以此类推</span><br>  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];<br>  <span class=\"hljs-built_in\">print</span>(numbers);<br>  <span class=\"hljs-built_in\">print</span>(numbers.runtimeType);<br>  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;=================&quot;</span>);<br>  <br>  <span class=\"hljs-comment\">// 集合, 也就是 Set, 无序的对象, 不可重复, &lt;String&gt; 表示集合中的元素类型为 String, 也就是字符串, 也可以是其他类型, 比如 &lt;int&gt; 表示集合中的元素类型为 int, 也就是整数, 以此类推</span><br>  <span class=\"hljs-built_in\">Set</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; names = &#123;<span class=\"hljs-string\">&#x27;Alice&#x27;</span>, <span class=\"hljs-string\">&#x27;Bob&#x27;</span>, <span class=\"hljs-string\">&#x27;Charlie&#x27;</span>&#125;;<br>  <span class=\"hljs-built_in\">print</span>(names);<br>  <span class=\"hljs-built_in\">print</span>(names.runtimeType);<br>  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;=================&quot;</span>);<br>  <br>  <span class=\"hljs-comment\">// 映射, 也就是 Map, 键值对的集合, 其中每个键映射到一个值, &lt;String, dynamic&gt; 表示键的类型为 String, 值的类型为 dynamic, 也就是动态类型, 也可以是其他类型, 比如 &lt;String, int&gt; 表示键的类型为 String, 值的类型为 int, 也就是整数, 以此类推</span><br>  <span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">dynamic</span>&gt; person = &#123;<br>    <span class=\"hljs-string\">&#x27;name&#x27;</span>: <span class=\"hljs-string\">&#x27;Alice&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;age&#x27;</span>: <span class=\"hljs-number\">30</span>,<br>    <span class=\"hljs-string\">&#x27;isAdult&#x27;</span>: <span class=\"hljs-keyword\">true</span><br>  &#125;;<br>  <span class=\"hljs-built_in\">print</span>(person);<br>  <span class=\"hljs-built_in\">print</span>(person.runtimeType);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">[1, 2, 3, 4, 5]<br>JSArray&lt;int&gt;<br>=================<br>&#123;Alice, Bob, Charlie&#125;<br><span class=\"hljs-built_in\">_</span>LinkedHashSet&lt;String&gt;<br>=================<br>&#123;name: Alice, age: 30, isAdult: true&#125;<br>JsLinkedHashMap&lt;String, dynamic&gt;<br></code></pre></td></tr></table></figure>\n<h2 id=\"特殊数据类型\">特殊数据类型<a title=\"#特殊数据类型\" href=\"#特殊数据类型\"></a></h2>\n<h3 id=\"dynamic\">dynamic<a title=\"#dynamic\" href=\"#dynamic\"></a></h3>\n<ul>\n<li>可以是任意类型的对象</li>\n<li>使用 dynamic 类型可以绕过静态类型检查，但通常不建议这样做，因为它会失去 Dart 强类型语言的优势</li>\n</ul>\n<h3 id=\"var\">var<a title=\"#var\" href=\"#var\"></a></h3>\n<ul>\n<li>使用 var 声明变量时，类型会被推断为赋值给变量的初始值的类型</li>\n</ul>\n<h3 id=\"object\">Object<a title=\"#object\" href=\"#object\"></a></h3>\n<ul>\n<li>所有 Dart 类的基类</li>\n</ul>\n<p>我们来看一下代码：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">void</span> main() &#123;<br>  <span class=\"hljs-comment\">// 动态类型，可以是任意类型的对象，但通常不建议这样做，因为它会失去 Dart 强类型语言的优势，比如下面的例子，变量 variable 的类型是 dynamic，可以改变为不同类型，这样会导致代码的可读性变差，不建议这样做</span><br>  <span class=\"hljs-built_in\">dynamic</span> variable = <span class=\"hljs-string\">&#x27;Hello&#x27;</span>;<br>  <span class=\"hljs-comment\">// 可以改变为不同类型</span><br>  variable = <span class=\"hljs-number\">100</span>;<br>  <span class=\"hljs-built_in\">print</span>(variable);<br>  <span class=\"hljs-built_in\">print</span>(variable.runtimeType);<br>  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;=================&quot;</span>);<br><br>  <span class=\"hljs-comment\">// 类型被推断为 String，不能改变为其他类型，这样会导致代码的可读性变好，建议这样做，比如下面的例子，变量 anotherVariable 的类型是 var，不能改变为其他类型，这样会导致代码的可读性变好，建议这样做</span><br>  <span class=\"hljs-keyword\">var</span> anotherVariable = <span class=\"hljs-string\">&#x27;Hello&#x27;</span>;<br>  <span class=\"hljs-comment\">// 错误，因为 anotherVariable 已被推断为 String 类型</span><br>  <span class=\"hljs-comment\">// anotherVariable = 100;</span><br>  <span class=\"hljs-built_in\">print</span>(anotherVariable);<br>  <span class=\"hljs-built_in\">print</span>(anotherVariable.runtimeType);<br>  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;=================&quot;</span>);<br><br>  <span class=\"hljs-comment\">// Object 类型，所有 Dart 类的基类，比如下面的例子，变量 obj 的类型是 Object，可以改变为任何类型，这样会导致代码的可读性变差，不建议这样做</span><br>  <span class=\"hljs-built_in\">Object</span> obj = <span class=\"hljs-string\">&#x27;I am an object&#x27;</span>;<br>  <span class=\"hljs-comment\">// 可以改变为任何类型</span><br>  obj = <span class=\"hljs-number\">123</span>;<br>  <span class=\"hljs-built_in\">print</span>(obj);<br>  <span class=\"hljs-built_in\">print</span>(obj.runtimeType);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">100<br>int<br>=================<br>Hello<br>String<br>=================<br>123<br>int<br></code></pre></td></tr></table></figure>\n<h1 id=\"end\">End<a title=\"#end\" href=\"#end\"></a></h1>\n<ul>\n<li>本文介绍了 Dart 中的数据类型</li>\n<li>理解和使用这些数据类型是 Dart 编程的基础</li>\n<li>每种类型都有其特定的用途和操作方式，选择适当的类型可以增加代码的清晰度和效率</li>\n<li>如果你有任何问题或建议，欢迎在下方留言，我会尽快回复</li>\n<li>如果你觉得本文对你有帮助，欢迎点赞、收藏，你的支持是我写作的最大动力</li>\n</ul>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231211215004818-977875224.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"Dart-流程控制语句","link":"2023/12/15/Flutter/06-Dart-流程控制语句"},"next":{"title":"Dart-操作符","link":"2023/12/13/Flutter/05-Dart-操作符"},"plink":"http://example.com/2023/12/13/Flutter/04-Dart-数据类型/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"dart-在线运行平台","title":"Dart 在线运行平台","index":"2"},{"id":"dart-中的数据类型","title":"Dart 中的数据类型","index":"3","children":[{"id":"基本数据类型","title":"基本数据类型","index":"3.1","children":[{"id":"数值类型","title":"数值类型","index":"3.1.1"},{"id":"布尔类型","title":"布尔类型","index":"3.1.2"},{"id":"字符串","title":"字符串","index":"3.1.3"}]},{"id":"高级数据类型","title":"高级数据类型","index":"3.2","children":[{"id":"列表（list）","title":"列表（List）","index":"3.2.1"},{"id":"集合（set）","title":"集合（Set）","index":"3.2.2"},{"id":"映射（map）","title":"映射（Map）","index":"3.2.3"}]},{"id":"特殊数据类型","title":"特殊数据类型","index":"3.3","children":[{"id":"dynamic","title":"dynamic","index":"3.3.1"},{"id":"var","title":"var","index":"3.3.2"},{"id":"object","title":"Object","index":"3.3.3"}]}]},{"id":"end","title":"End","index":"4"}]}