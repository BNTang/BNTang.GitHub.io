{"title":"MongoDB-稀疏索引","date":"2022-08-28T05:37:33.000Z","date_formatted":{"ll":"Aug 28, 2022","L":"08/28/2022","MM-DD":"08-28"},"link":"2022/08/28/MongoDB/索引/06-MongoDB-稀疏索引","tags":["MongoDB"],"updated":"2022-08-28T07:51:53.503Z","content":"<h1 id=\"索引的稀疏性\">索引的稀疏性<a title=\"#索引的稀疏性\" href=\"#索引的稀疏性\"></a></h1>\n<p>默认情况下 MongoDB 会给每一个文档都创建索引, 哪怕这个文档中没有指定索引的字段或者字段的取值是 Null，但是这样大大增加了索引的体积, 所以为了进一步优化索引占用的存储空间, 我们可以创建稀疏索引，也就是只会为存在索引字段, 并且索引字段取值不是 null 的文档创建索引。</p>\n<p>书写格式：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">db.&lt;collection&gt;.createIndex(<span class=\"hljs-punctuation\">&#123;</span>&lt;field&gt;<span class=\"hljs-punctuation\">:</span>&lt;<span class=\"hljs-number\">1</span> or <span class=\"hljs-number\">-1</span>&gt;<span class=\"hljs-punctuation\">,</span> ...<span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-punctuation\">&#123;</span>sparse<span class=\"hljs-punctuation\">:</span><span class=\"hljs-keyword\">true</span><span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">&#125;</span>)<br></code></pre></td></tr></table></figure>\n<p>插入测试数据：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">db.person.insert(<span class=\"hljs-punctuation\">[</span><br><span class=\"hljs-punctuation\">&#123;</span>name<span class=\"hljs-punctuation\">:</span>&#x27;cs&#x27;<span class=\"hljs-punctuation\">,</span> age<span class=\"hljs-punctuation\">:</span><span class=\"hljs-number\">19</span><span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br><span class=\"hljs-punctuation\">&#123;</span>name<span class=\"hljs-punctuation\">:</span>&#x27;as&#x27;<span class=\"hljs-punctuation\">,</span> age<span class=\"hljs-punctuation\">:</span><span class=\"hljs-number\">18</span><span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br><span class=\"hljs-punctuation\">&#123;</span>name<span class=\"hljs-punctuation\">:</span>&#x27;bs&#x27;<span class=\"hljs-punctuation\">,</span> age<span class=\"hljs-punctuation\">:</span><span class=\"hljs-number\">17</span><span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">]</span>)<br></code></pre></td></tr></table></figure>\n<p>首先先创建一个唯一索引：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">db.person.createIndex(<span class=\"hljs-punctuation\">&#123;</span>age<span class=\"hljs-punctuation\">:</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-punctuation\">&#123;</span>unique<span class=\"hljs-punctuation\">:</span><span class=\"hljs-keyword\">true</span><span class=\"hljs-punctuation\">&#125;</span>)<br></code></pre></td></tr></table></figure>\n<p>然后插入数据测试：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">db.person.insert(<span class=\"hljs-punctuation\">&#123;</span>name<span class=\"hljs-punctuation\">:</span>&#x27;BNTang&#x27;<span class=\"hljs-punctuation\">&#125;</span>)<br></code></pre></td></tr></table></figure>\n<p>第一次插入是不会报错，但是在第二次进行插入是会报错的，因为两次插入的数据结构如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">BNTang null<br>BNTang null<br></code></pre></td></tr></table></figure>\n<p>所以在我们创建的唯一索引他会认为这是两个相同的数据，那么这个时候就可以利用我这次要介绍的索引的稀疏索引来解决该问题，如果索引具备了唯一性又具备了稀疏性, 那么就可以多次添加缺失了索引字段的文档了。</p>\n<p>创建唯一索引与稀疏索引：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">db.person.createIndex(<span class=\"hljs-punctuation\">&#123;</span>age<span class=\"hljs-punctuation\">:</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-punctuation\">&#123;</span>unique<span class=\"hljs-punctuation\">:</span><span class=\"hljs-keyword\">true</span><span class=\"hljs-punctuation\">,</span> sparse<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span><span class=\"hljs-punctuation\">&#125;</span>)<br></code></pre></td></tr></table></figure>\n<p>多次运行插入，你会发现都成功了，在创建唯一索引与稀疏索引之前需要将之前的唯一索引先删除了在添加:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">db.person.insert(<span class=\"hljs-punctuation\">&#123;</span>name<span class=\"hljs-punctuation\">:</span>&#x27;BNTang&#x27;<span class=\"hljs-punctuation\">&#125;</span>)<br></code></pre></td></tr></table></figure>\n<p>!&gt; 如果索引字段既具备唯一性又具备稀疏性, 那么就可以在集合中保存多个缺失唯一索引字段的文档，<strong>原因</strong>：如果索引具备了稀疏性, 那么就不会为缺失了索引字段或者索引字段取值是 null 的文档创建索引了, 所以就不会冲突了。</p>\n","prev":{"title":"MongoDB-索引生存时间","link":"2022/08/28/MongoDB/索引/07-MongoDB-索引生存时间"},"next":{"title":"MongoDB-唯一索引","link":"2022/08/28/MongoDB/索引/05-MongoDB-唯一索引"},"plink":"http://example.com/2022/08/28/MongoDB/索引/06-MongoDB-稀疏索引/","toc":[{"id":"索引的稀疏性","title":"索引的稀疏性","index":"1"}],"reading_time":"496 words in 3 min"}