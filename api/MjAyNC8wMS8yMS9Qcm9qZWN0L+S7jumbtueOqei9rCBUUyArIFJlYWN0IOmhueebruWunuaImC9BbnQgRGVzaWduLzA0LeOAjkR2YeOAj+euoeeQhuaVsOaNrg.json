{"title":"『Dva』管理数据","date":"2024-01-21T04:04:07.000Z","date_formatted":{"ll":"Jan 21, 2024","L":"01/21/2024","MM-DD":"01-21"},"link":"2024/01/21/Project/从零玩转 TS + React 项目实战/Ant Design/04-『Dva』管理数据","tags":["Dva"],"updated":"2024-01-22T01:13:56.974Z","content":"<p>[toc]</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240121120419154-814575546.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"一、前言\">一、前言<a title=\"#一、前言\" href=\"#一、前言\"></a></h1>\n<blockquote>\n<ul>\n<li>🐤本篇文章是『从零玩转 TypeScript + React 项目实战』系列文章的第 4 篇，主要介绍『Dva』管理数据</li>\n</ul>\n</blockquote>\n<p>通过上一篇文章的学习，我们已经知道了『Dva』是什么，以及『Dva』的使用方式，如何使用『Dva』来渲染我们的组件，其实 dva 的主用作用并不是用来渲染组件的，它的主要作用是对 redux、redux-saga 进行封装，它的作用就是用来管理数据的，那么我们就来看一下『Dva』是如何管理数据的。</p>\n<h1 id=\"二、管理数据\">二、管理数据<a title=\"#二、管理数据\" href=\"#二、管理数据\"></a></h1>\n<p>那么如何使用『Dva』来管理数据呢？要想使用『Dva』来管理数据，我们需要先了解一下『Dva』的核心，『Dva』的核心有三个，分别是：</p>\n<ul>\n<li>\n<ol>\n<li><code>model</code>，也就是说我们可以给每一个组件定义一个 model，然后在这个 model 中就可以保存对应组件的数据，就可以保存对应组件的 reducer、就可以保存对应组件的负作用，就可以保存对应组件订阅的内容：</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240121131131649-194443262.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>所以说知道了这个 model 之后要想使用 dva 来管理数据，那么我们就需要先定义一个 model。</p>\n<h2 id=\"1.定义-model\">1.定义 Model<a title=\"#1.定义-model\" href=\"#1.定义-model\"></a></h2>\n<p>那么如何定义一个 model 呢？我先不管三七二十一，我先定义一个 Home 组件：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">/* index.js */<br><span class=\"hljs-addition\">+ function Home() &#123;</span><br><span class=\"hljs-addition\">+     return (</span><br><span class=\"hljs-addition\">+         &lt;div&gt;</span><br><span class=\"hljs-addition\">+             Home</span><br><span class=\"hljs-addition\">+         &lt;/div&gt;</span><br><span class=\"hljs-addition\">+     )</span><br><span class=\"hljs-addition\">+ &#125;</span><br></code></pre></td></tr></table></figure>\n<p>接下来我的要求是定义一个 model，用这个 model 来保存 Home 组件的数据，来保存 Home 组件的 reducer、来保存 Home 组件的负作用、来保存 Home 组件订阅的内容，那么如何定义呢？</p>\n<blockquote>\n<p>指定命名空间</p>\n</blockquote>\n<p>model 其实就是一个特殊的对象，那特殊在哪里呢？特殊在他有一些特殊的 key，比如说它里面，有一个叫做 namespace 的这么一个 key，通过这个 key，我们可以指定对应 model 的命名空间，这里我定义一个叫 homeModel 的 model，然后我在这个 model 中通过 namespace 来指定这个 model 的命名空间是 <code>home</code>：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">/* index.js */<br><span class=\"hljs-addition\">+ let homeModel = &#123;</span><br><span class=\"hljs-addition\">+     namespace: &#x27;home&#x27;</span><br><span class=\"hljs-addition\">+ &#125;</span><br></code></pre></td></tr></table></figure>\n<p>为什么要指定命名空间呢？因为将来我们是可以定义多个 model 的，例如这里我在新增一个 model 叫做 aboutModel，然后我在这个 model 中通过 namespace 来指定这个 model 的命名空间是 <code>about</code>：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">/* index.js */<br><span class=\"hljs-addition\">+ let aboutModel = &#123;</span><br><span class=\"hljs-addition\">+     namespace: &#x27;about&#x27;</span><br><span class=\"hljs-addition\">+ &#125;</span><br></code></pre></td></tr></table></figure>\n<p>将来呢，我们就可以通过命名空间来区分当前使用的到底是哪一个 model，反正你只需要知道 model 就是一个特殊的对象，这个对象里面有一个特殊的 key，叫做 namespace，通过这个 key，我们可以指定对应 model 的命名空间，命名空间的作用就是用来区分不同的 model。</p>\n<blockquote>\n<p>保存数据</p>\n</blockquote>\n<p>那么接下来呢，我们就可以在这个 model 中保存数据了，那么如何保存数据呢？在这个特殊的对象中，还有一个特殊的 key，叫做 state，通过这个 key，我们可以保存对应 model 的数据，例如我在 homeModel 中定义一个 state，然后我在这个 state 中定义一个 count，这个 count 的值是 0：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">/* index.js */<br> let homeModel = &#123;<br>     namespace: &#x27;home&#x27;,<br><span class=\"hljs-addition\">+    state: &#123;</span><br><span class=\"hljs-addition\">+        count: 0</span><br><span class=\"hljs-addition\">+    &#125;,</span><br> &#125;<br></code></pre></td></tr></table></figure>\n<p>如果说这里要写上一段注释信息的话，那么就是：指定当前命名空间保存的数据。</p>\n<blockquote>\n<p>处理数据</p>\n</blockquote>\n<p>保存完毕数据之后我们还要干嘛？是不是要处理数据，这里可以通过 reducer 来处理，所以说这里我就要给当前的 model 定义一个 reducer，那么如何定义呢？在这个特殊的对象中，还有一个特殊的 key，叫做 reducers，通过这个 key，我们可以定义对应 model 的 reducer，例如我在 homeModel 中定义一个 reducer：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">/* index.js */<br> let homeModel = &#123;<br>     namespace: &#x27;home&#x27;,<br>     state: &#123;<br>         count: 0<br>     &#125;,<br><span class=\"hljs-addition\">+    reducers: &#123;</span><br><span class=\"hljs-addition\">+    &#125;</span><br> &#125;<br></code></pre></td></tr></table></figure>\n<p>reducers 定义好了，那么 reducers 中是不是要定义一些处理方法，比如说我在这里定义一个叫做 add 的处理方法，这个方法对应一个函数，这个函数接收两个参数，第一个参数是 state，第二个参数是 action，state 是过去的状态，也就是过去的值，action 是当前的动作，也就是当前派发的动作，和过去中的 reducer 是一样的。</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">/* index.js */<br> let homeModel = &#123;<br>     namespace: &#x27;home&#x27;,<br>     state: &#123;<br>         count: 0<br>     &#125;,<br>     reducers: &#123;<br><span class=\"hljs-addition\">+        add(state, action) &#123;</span><br><span class=\"hljs-addition\">+        &#125;</span><br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure>\n<p>那么 reducer 中的 key 有什么作用呢？reducer 中 key 的作用，其实是用来指定当前 reducer 的处理方法的，也就是类型，例如我上面定义的一个 key 叫做 add，代表着将来别人派发 type 是 add playload 是什么 xx 的时候 <code>&#123;type: add, playload: xxx&#125;</code>，这个时候就会去 reducers 中找到 key 是 add 的这个哥们来去执行。</p>\n<p>再比如说，别人派发一个 sub，这个时候就会去 reducers 中找到 key 是 sub 的这个哥们来去执行，发现没有，那么就不会执行任何操作，如果说有，它就会执行对应的操作，所以说 reducers 中的 key 的作用，其实是用来指定当前 reducer 的处理方法的，也就是类型。</p>\n<p>好介绍清楚了，那么接下来我们就可以在这个 add 方法中处理数据了，在 add 中需要干什么呢？我这里就简单的将 count 加 1，然后将这个 count 返回出去，代码的写法就是：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">/* index.js */<br>let homeModel = &#123;<br>    namespace: &#x27;home&#x27;,<br>    state: &#123;<br>        count: 0<br>    &#125;,<br>    reducers: &#123;<br>        add: (state, action) =&gt; &#123;<br><span class=\"hljs-addition\">+           return &#123;</span><br><span class=\"hljs-addition\">+               count: state.count + action.count</span><br><span class=\"hljs-addition\">+           &#125;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>我就添加了三行代码，返回了一个对象，这个对象中有一个 count，这个 count 的值是上一次的 count 加上这一次 action 当中你带过来你让他递增的数，这样就可以了。</p>\n<p>紧接着再添加一个 sub 方法，这个方法的作用就是将 count 减 1，然后将这个 count 返回出去，代码的写法就是：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">/* index.js */<br>let homeModel = &#123;<br>    namespace: &#x27;home&#x27;,<br>    state: &#123;<br>        count: 0<br>    &#125;,<br>    reducers: &#123;<br>        add: (state, action) =&gt; &#123;<br>            return &#123;<br>                count: state.count + action.count<br>            &#125;<br>        &#125;,<br><span class=\"hljs-addition\">+       sub: (state, action) =&gt; &#123;</span><br><span class=\"hljs-addition\">+           return &#123;</span><br><span class=\"hljs-addition\">+               count: state.count - action.count</span><br><span class=\"hljs-addition\">+           &#125;</span><br><span class=\"hljs-addition\">+       &#125;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>只需要将加法改成减法就可以了，到此为止关于 model 的定义就结束了，那么接下来我们就可以使用这个 model 了。</p>\n<h2 id=\"2.注册-model\">2.注册 Model<a title=\"#2.注册-model\" href=\"#2.注册-model\"></a></h2>\n<p>定义好了之后我们要在哪里使用这个 model 呢？是不是要在 dva 中进行使用，那怎么告诉 dva 我们要使用这个 model 呢？</p>\n<p>很简单，通过 dva 创建出来的实例当中有一个 model 方法，这一步我称之为告诉 dva 需要使用哪个 model，那么如何告诉呢？就是通过 dva 创建出来的实例当中的 model 方法，这个方法接收一个对象，这个对象就是我们定义的 model，例如我在这里告诉 dva 我要使用 homeModel：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">/* index.js */<br><span class=\"hljs-addition\">+ app.model(homeModel)</span><br></code></pre></td></tr></table></figure>\n<p><code>app.model</code> 是可以多次调用的，例如我在这里再调用一次，告诉 dva 我既要使用 homeModel，也要使用 aboutModel：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">/* index.js */<br><span class=\"hljs-addition\">+ app.model(aboutModel)</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"3.连接-model\">3.连接 Model<a title=\"#3.连接-model\" href=\"#3.连接-model\"></a></h2>\n<p>本文简单点只来一个，通过如上的介绍我是不是已经告诉 dva 我要在 dva 中使用 homeModel 了，那么接下来我们就可以在 dva 中使用 homeModel 了。</p>\n<p>接下来我又要说到 dva 的本质了，dva 的本质是对 redux、redux-saga 进行封装，那既然是对 redux 进行封装，这个时候在 saga 中想要使用保存在 homeModel 中的数据，想要使用 homeModel 中的 reducer，是不是要通过 connect 连接起来，在回到我前面介绍的那张图：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240121141605216-820840215.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>再次观察上图，我们的 model 已经定义好了，在从图中可以看到是不是还要通过 saga 的 connect 把 model 和组件连接起来，这个时候才能在组件里面使用 Model 当中保存的数据，这个时候才能在组件当中派发任务，派发 action，去修改 Model 当中保存的数据。</p>\n<p>所以接下来就是通过 connect 把 homeModel 和 Home 组件关联起来，过去讲解 saga 的时候已经介绍过了，是不是需要分别定义 mapStateToProps 和 mapDispatchToProps：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">  /* index.js */<br><span class=\"hljs-addition\">+ // 在mapStateToProps方法中告诉React-Redux, 需要将store中保存的哪些数据映射到当前组件的props上</span><br><span class=\"hljs-addition\">+ const mapStateToProps = (state) =&gt; &#123;</span><br><span class=\"hljs-addition\">+     return &#123;</span><br><span class=\"hljs-addition\">+     &#125;</span><br><span class=\"hljs-addition\">+ &#125;;</span><br><span class=\"hljs-addition\">+ // 在mapDispatchToProps方法中告诉React-Redux, 需要将哪些派发的任务映射到当前组件的props上</span><br><span class=\"hljs-addition\">+ const mapDispatchToProps = (dispatch) =&gt; &#123;</span><br><span class=\"hljs-addition\">+     return &#123;</span><br><span class=\"hljs-addition\">+     &#125;</span><br><span class=\"hljs-addition\">+ &#125;;</span><br></code></pre></td></tr></table></figure>\n<p>然后通过 connect 把 mapStateToProps 和 mapDispatchToProps 和 Home 组件关联起来，要使用 connect 首先需要导入 connect，前面说了 dva 是对 redux、redux-saga 进行封装，所以说 connect 是从 redux 中导入的，这里可以直接从 dva 中导入 connect：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">/* index.js */<br><span class=\"hljs-addition\">+ import &#123;connect&#125; from &#x27;dva&#x27;;</span><br></code></pre></td></tr></table></figure>\n<p>然后通过 connect 把 mapStateToProps 和 mapDispatchToProps 和 Home 组件关联起来：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">/* index.js */<br><span class=\"hljs-addition\">+ st AdvHome = connect(mapStateToProps, mapDispatchToProps)(Home);</span><br></code></pre></td></tr></table></figure>\n<p>connect 需要调用两次，后面一次是要连接的那个组件，前面一次要把 mapStateToProps 和 mapDispatchToProps 传给他，传给他之后，他就会把 mapStateToProps 和 mapDispatchToProps 传给你。</p>\n<p>然后你就可以从 state 里面获取 count，在这里有一个注意点，在前面我说过将来我们是有可能定义多个 model，多个 model 中，是不是都有可能保存数据，例如，我在项目中在加一个 aboutModel：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> aboutModel = &#123;<br>    <span class=\"hljs-attr\">namespace</span>: <span class=\"hljs-string\">&#x27;about&#x27;</span>,<br>    <span class=\"hljs-attr\">state</span>: &#123;<br>        <span class=\"hljs-attr\">num</span>: <span class=\"hljs-number\">0</span><br>    &#125;,<br>    <span class=\"hljs-attr\">reducers</span>: &#123;<br>        <span class=\"hljs-attr\">add</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">state, action</span>) =&gt;</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> &#123;<br>                <span class=\"hljs-attr\">num</span>: state.<span class=\"hljs-property\">num</span> + action.<span class=\"hljs-property\">num</span><br>            &#125;<br>        &#125;,<br>        <span class=\"hljs-attr\">sub</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">state, action</span>) =&gt;</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> &#123;<br>                <span class=\"hljs-attr\">num</span>: state.<span class=\"hljs-property\">num</span> - action.<span class=\"hljs-property\">num</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>我在 model 中定义了一个 num，并且定义了对应的 reducers，然后在 dva 中注册一下 model，告诉 dva 我要使用 aboutModel：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">/* index.js */<br><span class=\"hljs-addition\">+ app.model(aboutModel)</span><br></code></pre></td></tr></table></figure>\n<p>现在我们是不是在 dva 中弄了多个 model，那么在 mapStateToProps 中映射数据，我怎么知道当前映射的这个数据是 homeModel 的还是 aboutModel 当中的呢？很简单，在 homeModel 与 aboutModel 中是不是都有一个 namespace，所以我们在获取的时候该如何获取呢？</p>\n<h2 id=\"4.使用-model\">4.使用 Model<a title=\"#4.使用-model\" href=\"#4.使用-model\"></a></h2>\n<p>在 mapStateToProps 中会给我一个 state，要从 state 中的 namespace 中拿到我们的数据所以 mapStateToProps 的写法就是：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">/* index.js */<br>  const mapStateToProps = (state) =&gt; &#123;<br><span class=\"hljs-addition\">+     return &#123;</span><br><span class=\"hljs-addition\">+         count: state.home.count</span><br><span class=\"hljs-addition\">+     &#125;</span><br>  &#125;;<br></code></pre></td></tr></table></figure>\n<p>改造为如上的写法，这个步骤总结下来就是需要从传入的 state 命名空间中拿到对应 Model 保存的数据。<code>state.home.count</code> 就代表着我现在要拿到的是命名空间是 home 的这个 model 当中保存的 count 这个数据。</p>\n<p>经过了这一步我们的数据就已经有了，接下来就是完善一下派发的方法了，更改 mapDispatchToProps，在当中定义一个 increment 方法，mapDispatchToProps 中默认会传递一个 dispatch，这个 dispatch 就是用来派发任务的，然后在 increment 方法中利用 dispatch 派发一个任务，这个任务的 type 是 add：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">/* index.js */<br>const mapDispatchToProps = (dispatch) =&gt; &#123;<br>    return &#123;<br><span class=\"hljs-addition\">+        increment() &#123;</span><br><span class=\"hljs-addition\">+            dispatch(&#123;type: &#x27;add&#x27;&#125;);</span><br><span class=\"hljs-addition\">+        &#125;</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>将来在组件中调用 increment 方法的时候，就会派发一个 type 是 add 的任务，然后找到 homeModel 当中的 reducers，在 reducers 中找到 key 是 add 的这个哥们来去执行，然后在这个哥们中就可以修改 count 了，当然还要给这个派发的任务传递一些数据还要改造一下：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">/* index.js */<br>const mapDispatchToProps = (dispatch) =&gt; &#123;<br>    return &#123;<br>        increment() &#123;<br><span class=\"hljs-addition\">+            dispatch(&#123;type: &#x27;add&#x27;, count: 1&#125;);</span><br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>好了除了有 increment 方法之外，还有一个 decrement 方法，这个方法的作用就是派发一个 type 是 sub 的任务，然后在 reducers 中找到 key 是 sub 的这个哥们来去执行，然后在这个哥们中就可以修改 count 了：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">/* index.js */<br>const mapDispatchToProps = (dispatch) =&gt; &#123;<br>    return &#123;<br>        increment() &#123;<br>            dispatch(&#123;type: &#x27;add&#x27;, count: 1&#125;);<br>        &#125;,<br><span class=\"hljs-addition\">+        decrement() &#123;</span><br><span class=\"hljs-addition\">+            dispatch(&#123;type: &#x27;sub&#x27;, count: 1&#125;);</span><br><span class=\"hljs-addition\">+        &#125;</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>到此为止，我们是不是就已经将 model 映射到 Home 组件了，映射到了 Home 组件，他是不是就可以传递给 Home 的 props 了，然后在 Home 组件中就可以使用了，例如在 Home 组件中我想要使用 count，那么我就可以通过 this.props.count 来获取：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">/* index.js */<br><span class=\"hljs-addition\">+ function Home(props) &#123;</span><br>    return (<br>        &lt;div&gt;<br><span class=\"hljs-addition\">+            &lt;p&gt;&#123;props.count&#125;&lt;/p&gt;</span><br>        &lt;/div&gt;<br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>我是不是就可以编写两个按钮，一个按钮是加，一个按钮是减，然后在点击的时候调用 increment 和 decrement 方法，这个时候就可以修改 count 了，例如我在这里编写一个按钮，按钮的内容是 +，然后在点击的时候调用 increment 方法：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">/* index.js */<br>function Home(props) &#123;<br>    return (<br>        &lt;div&gt;<br>            &lt;p&gt;&#123;props.count&#125;&lt;/p&gt;<br><span class=\"hljs-addition\">+            &lt;button onClick=&#123;props.increment()&#125;&gt;+&lt;/button&gt;</span><br>        &lt;/div&gt;<br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后再编写一个按钮，按钮的内容是 -，然后在点击的时候调用 decrement 方法：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">/* index.js */<br>function Home(props) &#123;<br>    return (<br>        &lt;div&gt;<br>            &lt;p&gt;&#123;props.count&#125;&lt;/p&gt;<br>            &lt;button onClick=&#123;props.increment()&#125;&gt;+&lt;/button&gt;<br><span class=\"hljs-addition\">+            &lt;button onClick=&#123;props.decrement()&#125;&gt;-&lt;/button&gt;</span><br>        &lt;/div&gt;<br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>现在的这个代码是不是就会过去的代码一样，过去使用 reduxSage 的时候是不是也是这样的，那么现在我们使用 dva 的时候是不是就可以这样使用了，那么接下来我们来回顾一下，在回顾之前还需要完善一下代码，通过 connect 连接好了对应的组件之后返回了一个新的组件，这个组件就是 AdvHome，需要使用 AdvHome 组件，所以说在 App 组件中使用 AdvHome 组件：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">function App() &#123;<br>    return (<br>        &lt;div&gt;<br><span class=\"hljs-addition\">+            &lt;AdvHome/&gt;</span><br>        &lt;/div&gt;<br>    );<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>最终的代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> dva, &#123;connect&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;dva&#x27;</span>;<br><br><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">dva</span>();<br><br><span class=\"hljs-keyword\">let</span> homeModel = &#123;<br>    <span class=\"hljs-attr\">namespace</span>: <span class=\"hljs-string\">&#x27;home&#x27;</span>,<br>    <span class=\"hljs-attr\">state</span>: &#123;<br>        <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">666</span><br>    &#125;,<br>    <span class=\"hljs-attr\">reducers</span>: &#123;<br>        <span class=\"hljs-attr\">add</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">state, action</span>) =&gt;</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> &#123;<br>                <span class=\"hljs-attr\">count</span>: state.<span class=\"hljs-property\">count</span> + action.<span class=\"hljs-property\">count</span><br>            &#125;<br>        &#125;,<br>        <span class=\"hljs-attr\">sub</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">state, action</span>) =&gt;</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> &#123;<br>                <span class=\"hljs-attr\">count</span>: state.<span class=\"hljs-property\">count</span> - action.<span class=\"hljs-property\">count</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">let</span> aboutModel = &#123;<br>    <span class=\"hljs-attr\">namespace</span>: <span class=\"hljs-string\">&#x27;about&#x27;</span>,<br>    <span class=\"hljs-attr\">state</span>: &#123;<br>        <span class=\"hljs-attr\">num</span>: <span class=\"hljs-number\">0</span><br>    &#125;,<br>    <span class=\"hljs-attr\">reducers</span>: &#123;<br>        <span class=\"hljs-attr\">add</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">state, action</span>) =&gt;</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> &#123;<br>                <span class=\"hljs-attr\">num</span>: state.<span class=\"hljs-property\">num</span> + action.<span class=\"hljs-property\">num</span><br>            &#125;<br>        &#125;,<br>        <span class=\"hljs-attr\">sub</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">state, action</span>) =&gt;</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> &#123;<br>                <span class=\"hljs-attr\">num</span>: state.<span class=\"hljs-property\">num</span> - action.<span class=\"hljs-property\">num</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br>app.<span class=\"hljs-title function_\">model</span>(homeModel);<br>app.<span class=\"hljs-title function_\">model</span>(aboutModel);<br><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">mapStateToProps</span> = (<span class=\"hljs-params\">state</span>) =&gt; &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>        <span class=\"hljs-attr\">count</span>: state.<span class=\"hljs-property\">home</span>.<span class=\"hljs-property\">count</span><br>    &#125;<br>&#125;;<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">mapDispatchToProps</span> = (<span class=\"hljs-params\">dispatch</span>) =&gt; &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>        <span class=\"hljs-title function_\">increment</span>(<span class=\"hljs-params\"></span>) &#123;<br>            <span class=\"hljs-title function_\">dispatch</span>(&#123;<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;add&#x27;</span>, <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">1</span>&#125;);<br>        &#125;,<br>        <span class=\"hljs-title function_\">decrement</span>(<span class=\"hljs-params\"></span>) &#123;<br>            <span class=\"hljs-title function_\">dispatch</span>(&#123;<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;sub&#x27;</span>, <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">1</span>&#125;);<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Home</span>(<span class=\"hljs-params\">props</span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;props.count&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> &#123;</span><br><span class=\"language-xml\">                props.increment()</span><br><span class=\"language-xml\">            &#125;&#125;&gt;+</span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> &#123;</span><br><span class=\"language-xml\">                props.decrement()</span><br><span class=\"language-xml\">            &#125;&#125;&gt;-</span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>&#125;<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">AdvHome</span> = <span class=\"hljs-title function_\">connect</span>(mapStateToProps, mapDispatchToProps)(<span class=\"hljs-title class_\">Home</span>);<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AdvHome</span>/&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    );<br>&#125;<br><br>app.<span class=\"hljs-title function_\">router</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span>/&gt;</span></span>);<br>app.<span class=\"hljs-title function_\">start</span>(<span class=\"hljs-string\">&#x27;#root&#x27;</span>);<br></code></pre></td></tr></table></figure>\n<p>运行项目，打开浏览器，可以看到如下的效果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240121171545619-872611029.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"5.回顾\">5.回顾<a title=\"#5.回顾\" href=\"#5.回顾\"></a></h2>\n<p>将上面的内容简单的回顾一下：</p>\n<ol>\n<li>首先定义 Model，指定了 Model 对应的命名空间，指定了 Model 保存的数据，指定了 Model 的 reducer</li>\n<li>在 Model 的 reducer 中定义了 add 与 sub 方法将来只要派发了 add 与 sub 这两个任务，就会去执行对应的方法</li>\n<li>在 dva 中注册 Model，告诉 dva 我要使用哪个 Model，通过 dva 实例 <code>.</code>model 方法来注册 Model</li>\n<li>在 dva 中连接 Model，通过 connect 方法将 Model 与组件连接起来，然后在组件中就可以使用 Model 中保存的数据了，在 connect 中将保存的数据与保存的方法映射到了 Home 中就是 <code>const AdvHome = connect(mapStateToProps, mapDispatchToProps)(Home);</code> 这行代码</li>\n<li>定义了一个 mapStateToProps 方法，这个方法的作用就是将 Model 中保存的数据映射到当前组件的 props 上，然后在组件中就可以通过 this.props.count 来获取到 Model 中保存的数据了</li>\n<li>定义了一个 mapDispatchToProps 方法，这个方法的作用就是将 Model 中保存的方法映射到当前组件的 props 上，然后在组件中就可以通过 this.props.increment() 来调用 Model 中保存的方法了</li>\n</ol>\n<p>好了回顾完毕之后再继续往下看，我们运行项目之后页面显示的是 666，原因很简单就是我 homeModel 中的 count 我修改为了 666，为什么会显示 666 呢，就是因为我在 mapStateToProps 中明确的指定了我要拿到的是 homeModel 中的 count，所以说这里是不是就是 homeModel 中的 count，那么如果说我想要拿到 aboutModel 中的 num，那么我是不是就可以在 mapStateToProps 中修改为：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">/* index.js */<br>const mapStateToProps = (state) =&gt; &#123;<br>    return &#123;<br><span class=\"hljs-addition\">+        count: state.about.num</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>回到浏览器刷新页面，可以看到页面显示的是 0：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240121172337313-1699711609.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>显示没问题了，再分别点击 + 和 - 按钮，发现不行，那么为什么不行呢？原因很简单，获取数据的时候, 我们需要指定从哪一个命名空间的 Model 中获取, 但是在派发任务的时候, 我们没有指定派发到哪一个命名空间的 Model 中, 所以说问题就出现在这里，同理在派发任务的时候, 我们也需要指定要派发给哪一个命名空间的 Model。</p>\n<p>就以我们现在的代码来看，他怎么知道 add 与 sub 这两个任务是派发到 Model 中的呢？所以说在派发任务的时候，我们也需要指定要派发给哪一个命名空间的 Model，那么如何指定呢？很简单，在 type 取值前面加上命名空间就可以了，例如我在这里指定 type 为 <code>home/add</code>：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">/* index.js */<br>const mapDispatchToProps = (dispatch) =&gt; &#123;<br>    return &#123;<br>        increment() &#123;<br><span class=\"hljs-deletion\">-            dispatch(&#123;type: &#x27;add&#x27;, count: 1&#125;);</span><br><span class=\"hljs-addition\">+            dispatch(&#123;type: &#x27;home/add&#x27;, count: 1&#125;);</span><br>        &#125;,<br>        decrement() &#123;<br><span class=\"hljs-deletion\">-            dispatch(&#123;type: &#x27;sub&#x27;, count: 1&#125;);</span><br><span class=\"hljs-addition\">+            dispatch(&#123;type: &#x27;home/sub&#x27;, count: 1&#125;);</span><br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>记得将 mapStateToProps 中代码改为 homeModel，本文基于 homeModel 进行效果测试演示，运行项目，打开浏览器，可以看到如下的效果：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202401/2105804-20240121173506413-257080539.gif\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>最后附上完整代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> dva, &#123;connect&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;dva&#x27;</span>;<br><br><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">dva</span>();<br><br><span class=\"hljs-keyword\">let</span> homeModel = &#123;<br>    <span class=\"hljs-attr\">namespace</span>: <span class=\"hljs-string\">&#x27;home&#x27;</span>,<br>    <span class=\"hljs-attr\">state</span>: &#123;<br>        <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">666</span><br>    &#125;,<br>    <span class=\"hljs-attr\">reducers</span>: &#123;<br>        <span class=\"hljs-attr\">add</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">state, action</span>) =&gt;</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> &#123;<br>                <span class=\"hljs-attr\">count</span>: state.<span class=\"hljs-property\">count</span> + action.<span class=\"hljs-property\">count</span><br>            &#125;<br>        &#125;,<br>        <span class=\"hljs-attr\">sub</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">state, action</span>) =&gt;</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> &#123;<br>                <span class=\"hljs-attr\">count</span>: state.<span class=\"hljs-property\">count</span> - action.<span class=\"hljs-property\">count</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">let</span> aboutModel = &#123;<br>    <span class=\"hljs-attr\">namespace</span>: <span class=\"hljs-string\">&#x27;about&#x27;</span>,<br>    <span class=\"hljs-attr\">state</span>: &#123;<br>        <span class=\"hljs-attr\">num</span>: <span class=\"hljs-number\">0</span><br>    &#125;,<br>    <span class=\"hljs-attr\">reducers</span>: &#123;<br>        <span class=\"hljs-attr\">add</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">state, action</span>) =&gt;</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> &#123;<br>                <span class=\"hljs-attr\">num</span>: state.<span class=\"hljs-property\">num</span> + action.<span class=\"hljs-property\">num</span><br>            &#125;<br>        &#125;,<br>        <span class=\"hljs-attr\">sub</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">state, action</span>) =&gt;</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> &#123;<br>                <span class=\"hljs-attr\">num</span>: state.<span class=\"hljs-property\">num</span> - action.<span class=\"hljs-property\">num</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br>app.<span class=\"hljs-title function_\">model</span>(homeModel);<br>app.<span class=\"hljs-title function_\">model</span>(aboutModel);<br><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">mapStateToProps</span> = (<span class=\"hljs-params\">state</span>) =&gt; &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>        <span class=\"hljs-attr\">count</span>: state.<span class=\"hljs-property\">home</span>.<span class=\"hljs-property\">count</span><br>    &#125;<br>&#125;;<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">mapDispatchToProps</span> = (<span class=\"hljs-params\">dispatch</span>) =&gt; &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>        <span class=\"hljs-title function_\">increment</span>(<span class=\"hljs-params\"></span>) &#123;<br>            <span class=\"hljs-title function_\">dispatch</span>(&#123;<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;home/add&#x27;</span>, <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">1</span>&#125;);<br>        &#125;,<br>        <span class=\"hljs-title function_\">decrement</span>(<span class=\"hljs-params\"></span>) &#123;<br>            <span class=\"hljs-title function_\">dispatch</span>(&#123;<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;home/sub&#x27;</span>, <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">1</span>&#125;);<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Home</span>(<span class=\"hljs-params\">props</span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;props.count&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> &#123;</span><br><span class=\"language-xml\">                props.increment()</span><br><span class=\"language-xml\">            &#125;&#125;&gt;+</span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> &#123;</span><br><span class=\"language-xml\">                props.decrement()</span><br><span class=\"language-xml\">            &#125;&#125;&gt;-</span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>&#125;<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">AdvHome</span> = <span class=\"hljs-title function_\">connect</span>(mapStateToProps, mapDispatchToProps)(<span class=\"hljs-title class_\">Home</span>);<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AdvHome</span>/&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    );<br>&#125;<br><br>app.<span class=\"hljs-title function_\">router</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span>/&gt;</span></span>);<br>app.<span class=\"hljs-title function_\">start</span>(<span class=\"hljs-string\">&#x27;#root&#x27;</span>);<br></code></pre></td></tr></table></figure>\n<h1 id=\"三、总结\">三、总结<a title=\"#三、总结\" href=\"#三、总结\"></a></h1>\n<p>通过本文的学习，您可以掌握以下知识点：</p>\n<ul>\n<li>\n<ol>\n<li>了解『Dva』的核心</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>了解如何定义 Model</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>了解如何注册 Model</li>\n</ol>\n</li>\n<li>\n<ol start=\"4\">\n<li>了解如何连接 Model</li>\n</ol>\n</li>\n<li>\n<ol start=\"5\">\n<li>了解如何使用 Model</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>🐤如果您觉得本文对您有所帮助，欢迎点赞、收藏或分享，您的支持是我创作的最大动力！</p>\n</blockquote>\n<p>这篇文章的内容就介绍到这里，期待我们下次的相遇。感谢您花时间阅读，如果有任何问题或想法，欢迎在评论区留言。</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202312/2105804-20231211215004818-977875224.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"『Echarts』简介","link":"2024/01/24/Web/ECharts/01-『Echarts』简介"},"next":{"title":"『Dva』使用","link":"2024/01/20/Project/从零玩转 TS + React 项目实战/Ant Design/03-『Dva』使用"},"plink":"http://example.com/2024/01/21/Project/从零玩转 TS + React 项目实战/Ant Design/04-『Dva』管理数据/","toc":[{"id":"一、前言","title":"一、前言","index":"1"},{"id":"二、管理数据","title":"二、管理数据","index":"2","children":[{"id":"1.定义-model","title":"1.定义 Model","index":"2.1"},{"id":"2.注册-model","title":"2.注册 Model","index":"2.2"},{"id":"3.连接-model","title":"3.连接 Model","index":"2.3"},{"id":"4.使用-model","title":"4.使用 Model","index":"2.4"},{"id":"5.回顾","title":"5.回顾","index":"2.5"}]},{"id":"三、总结","title":"三、总结","index":"3"}]}