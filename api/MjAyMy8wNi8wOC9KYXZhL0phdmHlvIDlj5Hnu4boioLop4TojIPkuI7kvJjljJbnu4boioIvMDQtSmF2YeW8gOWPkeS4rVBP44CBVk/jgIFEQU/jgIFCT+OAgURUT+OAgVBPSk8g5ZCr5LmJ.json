{"title":"Java开发中PO、VO、DAO、BO、DTO、POJO 含义","date":"2023-06-08T15:57:35.000Z","date_formatted":{"ll":"Jun 8, 2023","L":"06/08/2023","MM-DD":"06-08"},"link":"2023/06/08/Java/Java开发细节规范与优化细节/04-Java开发中PO、VO、DAO、BO、DTO、POJO 含义","tags":["Java开发细节规范与优化细节"],"updated":"2023-06-10T16:18:01.928Z","content":"<h1 id=\"po(persistant-object)-持久对象\">PO(persistant object) 持久对象<a title=\"#po(persistant-object)-持久对象\" href=\"#po(persistant-object)-持久对象\"></a></h1>\n<p>可以看成是与数据库中的表相映射的java对象。使用 Mybatis 来生成 PO 是不错的选择。</p>\n<h1 id=\"vo(value-object)-值对象\">VO(value object) 值对象<a title=\"#vo(value-object)-值对象\" href=\"#vo(value-object)-值对象\"></a></h1>\n<p>通常用于业务层之间的数据传递，和 PO 一样也是仅仅包含数据而已。但应是抽象出的业务对象，可以和表对应，也可以不，这根据业务的需要。</p>\n<p>PO只能用在数据层，VO用在商业逻辑层和表示层。各层操作属于该层自己的数据对象，这样就可以降低各层之间的耦合，便于以后系统的维护和扩展。</p>\n<h1 id=\"dao(data-access-objects)-数据访问对象接口\">DAO(Data Access Objects) 数据访问对象接口<a title=\"#dao(data-access-objects)-数据访问对象接口\" href=\"#dao(data-access-objects)-数据访问对象接口\"></a></h1>\n<p>DAO是Data Access Object数据访问接口，数据访问：顾名思义就是与数据库打交道。夹在业务逻辑与数据库资源中间。</p>\n<p>J2EE开发人员使用数据访问对象（DAO）设计模式把底层的数据访问逻辑和高层的商务逻辑分开。实现DAO模式能够更加专注于编写数据访问代码。</p>\n<p>DAO模式是标准的J2EE设计模式之一。开发人员使用这个模式把底层的数据访问操作和上层的商务逻辑分开。一个典型的DAO实现有下列几个组件：</p>\n<ol>\n<li>一个DAO工厂类；</li>\n<li>一个DAO接口；</li>\n<li>一个实现DAO接口的具体类；</li>\n<li>数据传递对象（有些时候叫做值对象）。</li>\n</ol>\n<p>具体的DAO类包含了从特定的数据源访问数据的逻辑。</p>\n<h1 id=\"bo(business-object)—业务对象层\">BO(Business Object)—业务对象层<a title=\"#bo(business-object)—业务对象层\" href=\"#bo(business-object)—业务对象层\"></a></h1>\n<p>表示应用程序领域内“事物”的所有实体类。这些实体类驻留在服务器上，并利用服务类来协助完成它们的职责。</p>\n<h1 id=\"dto(data-transfer-object)-数据传输对象\">DTO(Data Transfer Object) 数据传输对象<a title=\"#dto(data-transfer-object)-数据传输对象\" href=\"#dto(data-transfer-object)-数据传输对象\"></a></h1>\n<p>主要用于远程调用等需要大量传输对象的地方。比如一张表有100个字段，那么对应的PO就有100个属性。但是界面上只要显示10个字段，客户端用WEB service来获取数据，没有必要把整个PO对象传递到客户端，这时就可以用只有这10个属性的DTO来传递结果到客户端，这样也不会暴露服务端表结构。到达客户端以后，如果用这个对象来对应界面显示，那此时它的身份就转为VO。</p>\n<h1 id=\"pojo(plain-old-java-objects)-简单的java对象\">POJO(Plain Old Java Objects) 简单的Java对象<a title=\"#pojo(plain-old-java-objects)-简单的java对象\" href=\"#pojo(plain-old-java-objects)-简单的java对象\"></a></h1>\n<p>实际就是普通JavaBeans，使用POJO名称是为了避免和EJB混淆起来，而且简称比较直接。其中有一些属性及其getter、setter方法的类，有时可以作为value object或dto(Data Transform Object)来使用。当然,如果有一个简单的运算属性也是可以的，但不允许有业务方法，也不能携带有connection之类的方法。</p>\n<h1 id=\"真的有必要定义-vo，bo，po，do，dto-吗\">真的有必要定义 VO，BO，PO，DO，DTO 吗<a title=\"#真的有必要定义-vo，bo，po，do，dto-吗\" href=\"#真的有必要定义-vo，bo，po，do，dto-吗\"></a></h1>\n<p>在讲具体的概念之前，先简单的讲一讲MVC开发模式。<br>\n<strong>MVC的简单定义：</strong></p>\n<ul>\n<li>M层负责与数据库打交道；</li>\n<li>C层负责业务逻辑的编写；</li>\n<li>V层负责给用户展示（针对于前后端不分离的项目，不分离项目那种编写模版的方式，理解V的概念更直观）。</li>\n</ul>\n<p>?&gt; 而VO，BO，PO，DO，DTO呢，就是穿梭在这M、V、C层之间的实体传输对象。</p>\n<p>实体传输对象示意图：</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2105804/202306/2105804-20230609000505063-353080269.png\" alt=\"2022-07-21-08-25-59.258439200\" loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li>VO（View Object）：<strong>视图对象</strong>，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。</li>\n<li>DTO（Data Transfer Object）：<strong>数据传输对象</strong>，这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，更符合泛指用于展示层与服务层之间的数据传输对象。</li>\n<li>BO（Business Object）：<strong>业务对象</strong>，把业务逻辑封装为一个对象，这个对象可以包括一个或多个其它的对象。</li>\n<li>PO（Persistent Object）：<strong>持久化对象</strong>，它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。</li>\n<li>DO（Domain Object）：<strong>领域对象</strong>，就是从现实世界中抽象出来的有形或无形的业务实体。</li>\n</ul>\n<p><strong>有必要用吗？</strong><br>\n项目中真的有必要定义VO，BO，PO，DO，DTO吗？</p>\n<p>还是要理性看待这个问题，要看项目“目的地”是什么。</p>\n<p>如果项目比较小，是一个简单的MVC项目，又是单兵作战，不建议使用VO，BO，PO，DO，DTO，直接用POJO负责各个层来传输就好，因为这种项目的“目的地”是快速完成。<br>\n而更多的时候，是持续迭代的团队协作项目，这个时候就建议用VO，BO，PO，DO，DTO，而且团队内要达成共识，形成一个标准规范。</p>\n<ol>\n<li>业务复杂，人员协同性要求高的场景下，这些规范性的东西不按着来虽然不会出错，程序照样跑，但是遵守规范会让程序更具扩展性和可读性；</li>\n<li>让类语义更明确，很容易知道类的含义；</li>\n</ol>\n<p>其实就是提升项目的可扩展性、可维护性与可阅读性。<br>\n提升这些性能的尽头是经济效益。</p>\n<h2 id=\"总结\"><strong>总结</strong><a title=\"#总结\" href=\"#总结\"></a></h2>\n<p>这篇文章很短，最后稍微总结一下，不管用哪种方式，只要团队内定义好一种适应的协同规范就行。<br>\n没有一个绝对好与绝对坏的方式方法。<br>\n团队规范的尽头能提升项目的可扩展性、可维护性与可阅读性，从而降低bug率。<br>\n另附这些概念命名规范：</p>\n<ul>\n<li>数据对象：xxxPO，xxx即为数据表名。(也可DO)</li>\n<li>数据传输对象：xxxDTO，xxx为业务领域相关的名称。</li>\n<li>展示对象：xxxVO，xxx一般为网页名称。</li>\n<li>业务对象：xxxBO，xxx是业务名称。</li>\n</ul>\n<h1 id=\"pojo、java-bean-是如何定义的\">POJO、Java Bean 是如何定义的<a title=\"#pojo、java-bean-是如何定义的\" href=\"#pojo、java-bean-是如何定义的\"></a></h1>\n<p>在日常开发中还有一些类经常被人叫做<strong>POJO</strong>，还有的人叫它们<strong>Java Bean</strong>。这些概念都是在特定场景下引入，用来表明它们的特性的。那这些称呼都是啥意思，有啥标准和特征呢？今天就来分享一下这些没用的知识。</p>\n<h2 id=\"pojo\">POJO<a title=\"#pojo\" href=\"#pojo\"></a></h2>\n<p><strong>POJO</strong>是 <strong>Plain Old Java Object</strong> 的简写，大概意思就是“淳朴的Java对象”。这个词是国外一家外包公司的员工创造的。哪些类是<strong>POJO</strong>类还是有说法的，需要同时满足以下几个条件：</p>\n<ol>\n<li><strong>不实现任何接口的类。</strong></li>\n<li><strong>不继承任何其它类的类。</strong></li>\n<li><strong>不使用任何外部注解的类。</strong></li>\n</ol>\n<p>这种类其实就是切断了和外界联系的Java类，下面这个类肯定不是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span> &#123;<br>\t<span class=\"hljs-keyword\">private</span> String name;<br>\t<span class=\"hljs-keyword\">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这个才是<strong>POJO</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span> &#123;<br>\t<span class=\"hljs-keyword\">private</span> String name;<br>\t<span class=\"hljs-keyword\">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"java-bean\">Java Bean<a title=\"#java-bean\" href=\"#java-bean\"></a></h2>\n<p><strong>Java Bean</strong>也经常出现在各种技术文献中，也不是随便什么类都能叫做<strong>Java Bean</strong>的，它需要有以下定义：</p>\n<ul>\n<li><strong>有无参数构造。</strong></li>\n<li>所有的属性必须是私有属性（<code>private</code>）。</li>\n<li>所有的属性必须有公共的（<code>public</code>）的 <code>Getter</code> 和 <code>Setter</code>。</li>\n<li><strong>它必须是可以被序列化的，也就是实现</strong> <code>java.io.Serializable</code> 接口。</li>\n</ul>\n<p>按照这个定义，<strong>POJO</strong>类如果想成为<strong>Java Bean</strong>，需要改造成下面的形式:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> java.io.Serializable;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">serialVersionUID</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">6723564465081191620L</span>;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> Integer age;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title function_\">getAge</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> age;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAge</span><span class=\"hljs-params\">(Integer age)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"spring-bean\">Spring Bean<a title=\"#spring-bean\" href=\"#spring-bean\"></a></h2>\n<p>既然说到这里了，不妨再说下<strong>Spring Bean</strong>。<strong>Spring Bean</strong>的要求就低多了，只要这个类（接口）被注入了<strong>Spring IoC</strong>，那么这个类（接口）都可以被称作一个<strong>Spring Bean</strong>。至于一个类如何注入<strong>Spring IoC</strong>，这里就不说了，大家天天都在做。</p>\n<h2 id=\"最后\">最后<a title=\"#最后\" href=\"#最后\"></a></h2>\n<p>最后，可以得出结论，一个<strong>POJO</strong>总是孤孤单单的，它不可能成为一个<strong>Java Bean</strong>或者<strong>Spring Bean</strong>；但是<strong>Java Bean</strong>可以同时是一个<strong>Spring Bean</strong>；<strong>Spring Bean</strong>也可以是一个<strong>Java Bean</strong>。</p>\n","prev":{"title":"常量接口 vs 常量类 vs 枚举区别","link":"2023/06/09/Java/Java开发细节规范与优化细节/05-常量接口 vs 常量类 vs 枚举区别"},"next":{"title":"代码开发优化细节","link":"2023/06/07/Java/Java开发细节规范与优化细节/03-代码开发优化细节"},"plink":"http://example.com/2023/06/08/Java/Java开发细节规范与优化细节/04-Java开发中PO、VO、DAO、BO、DTO、POJO 含义/","toc":[{"id":"po(persistant-object)-持久对象","title":"PO(persistant object) 持久对象","index":"1"},{"id":"vo(value-object)-值对象","title":"VO(value object) 值对象","index":"2"},{"id":"dao(data-access-objects)-数据访问对象接口","title":"DAO(Data Access Objects) 数据访问对象接口","index":"3"},{"id":"bo(business-object)—业务对象层","title":"BO(Business Object)—业务对象层","index":"4"},{"id":"dto(data-transfer-object)-数据传输对象","title":"DTO(Data Transfer Object) 数据传输对象","index":"5"},{"id":"pojo(plain-old-java-objects)-简单的java对象","title":"POJO(Plain Old Java Objects) 简单的Java对象","index":"6"},{"id":"真的有必要定义-vo，bo，po，do，dto-吗","title":"真的有必要定义 VO，BO，PO，DO，DTO 吗","index":"7","children":[{"id":"总结","title":"总结","index":"7.1"}]},{"id":"pojo、java-bean-是如何定义的","title":"POJO、Java Bean 是如何定义的","index":"8","children":[{"id":"pojo","title":"POJO","index":"8.1"},{"id":"java-bean","title":"Java Bean","index":"8.2"},{"id":"spring-bean","title":"Spring Bean","index":"8.3"},{"id":"最后","title":"最后","index":"8.4"}]}],"reading_time":"2167 words in 14 min"}